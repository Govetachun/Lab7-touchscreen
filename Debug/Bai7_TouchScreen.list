
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031e8  08009350  08009350  00019350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c538  0800c538  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c538  0800c538  0001c538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c540  0800c540  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c540  0800c540  0001c540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c544  0800c544  0001c544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800c548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c0  2**0
                  CONTENTS
 10 .bss          0000031c  200000c0  200000c0  000200c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003dc  200003dc  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f665  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043cd  00000000  00000000  0003f755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  00043b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001388  00000000  00000000  000450a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002769c  00000000  00000000  00046428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d74a  00000000  00000000  0006dac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df760  00000000  00000000  0008b20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016a96e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000631c  00000000  00000000  0016a9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009338 	.word	0x08009338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	08009338 	.word	0x08009338

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000ea4:	4a3d      	ldr	r2, [pc, #244]	; (8000f9c <MX_ADC1_Init+0x10c>)
 8000ea6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eae:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000eb4:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eba:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec0:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000ed0:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <MX_ADC1_Init+0x110>)
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000edc:	2205      	movs	r2, #5
 8000ede:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eee:	482a      	ldr	r0, [pc, #168]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000ef0:	f003 f960 	bl	80041b4 <HAL_ADC_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f001 fe0e 	bl	8002b1a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000efe:	2308      	movs	r3, #8
 8000f00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4822      	ldr	r0, [pc, #136]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000f10:	f003 f994 	bl	800423c <HAL_ADC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f1a:	f001 fdfe 	bl	8002b1a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f1e:	2309      	movs	r3, #9
 8000f20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481b      	ldr	r0, [pc, #108]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000f2c:	f003 f986 	bl	800423c <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f36:	f001 fdf0 	bl	8002b1a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	4814      	ldr	r0, [pc, #80]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000f48:	f003 f978 	bl	800423c <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f52:	f001 fde2 	bl	8002b1a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f56:	230b      	movs	r3, #11
 8000f58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000f64:	f003 f96a 	bl	800423c <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f6e:	f001 fdd4 	bl	8002b1a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f72:	230c      	movs	r3, #12
 8000f74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f76:	2305      	movs	r3, #5
 8000f78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_ADC1_Init+0x108>)
 8000f80:	f003 f95c 	bl	800423c <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f8a:	f001 fdc6 	bl	8002b1a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000110 	.word	0x20000110
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	0f000001 	.word	0x0f000001

08000fa4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a3c      	ldr	r2, [pc, #240]	; (80010b4 <HAL_ADC_MspInit+0x110>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d171      	bne.n	80010aa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <HAL_ADC_MspInit+0x114>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a3a      	ldr	r2, [pc, #232]	; (80010b8 <HAL_ADC_MspInit+0x114>)
 8000fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd6:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <HAL_ADC_MspInit+0x114>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <HAL_ADC_MspInit+0x114>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a33      	ldr	r2, [pc, #204]	; (80010b8 <HAL_ADC_MspInit+0x114>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <HAL_ADC_MspInit+0x114>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_ADC_MspInit+0x114>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a2c      	ldr	r2, [pc, #176]	; (80010b8 <HAL_ADC_MspInit+0x114>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <HAL_ADC_MspInit+0x114>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800101a:	2307      	movs	r3, #7
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4823      	ldr	r0, [pc, #140]	; (80010bc <HAL_ADC_MspInit+0x118>)
 800102e:	f003 ff1f 	bl	8004e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001032:	2303      	movs	r3, #3
 8001034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001036:	2303      	movs	r3, #3
 8001038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	481e      	ldr	r0, [pc, #120]	; (80010c0 <HAL_ADC_MspInit+0x11c>)
 8001046:	f003 ff13 	bl	8004e70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800104a:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 800104c:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <HAL_ADC_MspInit+0x124>)
 800104e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 8001064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001068:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 800106c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001070:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 8001074:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001078:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 800107c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001080:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 8001090:	f003 fc04 	bl	800489c <HAL_DMA_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800109a:	f001 fd3e 	bl	8002b1a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 80010a2:	639a      	str	r2, [r3, #56]	; 0x38
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_ADC_MspInit+0x120>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40012000 	.word	0x40012000
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020400 	.word	0x40020400
 80010c4:	20000158 	.word	0x20000158
 80010c8:	40026410 	.word	0x40026410

080010cc <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	at24c_Check();
 80010d0:	f000 f83c 	bl	800114c <at24c_Check>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af04      	add	r7, sp, #16
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010e6:	88fa      	ldrh	r2, [r7, #6]
 80010e8:	230a      	movs	r3, #10
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	f107 030f 	add.w	r3, r7, #15
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2310      	movs	r3, #16
 80010f8:	21a0      	movs	r1, #160	; 0xa0
 80010fa:	4804      	ldr	r0, [pc, #16]	; (800110c <at24c_ReadOneByte+0x34>)
 80010fc:	f004 fac4 	bl	8005688 <HAL_I2C_Mem_Read>
	return temp;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000208 	.word	0x20000208

08001110 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af04      	add	r7, sp, #16
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	80fb      	strh	r3, [r7, #6]
 800111c:	4613      	mov	r3, r2
 800111e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001120:	88fa      	ldrh	r2, [r7, #6]
 8001122:	230a      	movs	r3, #10
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	2301      	movs	r3, #1
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	1d7b      	adds	r3, r7, #5
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2310      	movs	r3, #16
 8001130:	21a0      	movs	r1, #160	; 0xa0
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <at24c_WriteOneByte+0x38>)
 8001134:	f004 f9ae 	bl	8005494 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001138:	2005      	movs	r0, #5
 800113a:	f003 f817 	bl	800416c <HAL_Delay>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000208 	.word	0x20000208

0800114c <at24c_Check>:

uint8_t at24c_Check(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 8001152:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001156:	f7ff ffbf 	bl	80010d8 <at24c_ReadOneByte>
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b55      	cmp	r3, #85	; 0x55
 8001162:	d101      	bne.n	8001168 <at24c_Check+0x1c>
 8001164:	2300      	movs	r3, #0
 8001166:	e010      	b.n	800118a <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001168:	2155      	movs	r1, #85	; 0x55
 800116a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800116e:	f7ff ffcf 	bl	8001110 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 8001172:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001176:	f7ff ffaf 	bl	80010d8 <at24c_ReadOneByte>
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b55      	cmp	r3, #85	; 0x55
 8001182:	d101      	bne.n	8001188 <at24c_Check+0x3c>
 8001184:	2300      	movs	r3, #0
 8001186:	e000      	b.n	800118a <at24c_Check+0x3e>
	}
	return 1;
 8001188:	2301      	movs	r3, #1
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 8001192:	b590      	push	{r4, r7, lr}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	6039      	str	r1, [r7, #0]
 800119c:	80fb      	strh	r3, [r7, #6]
 800119e:	4613      	mov	r3, r2
 80011a0:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80011a2:	e00d      	b.n	80011c0 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	80fa      	strh	r2, [r7, #6]
 80011aa:	683c      	ldr	r4, [r7, #0]
 80011ac:	1c62      	adds	r2, r4, #1
 80011ae:	603a      	str	r2, [r7, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff91 	bl	80010d8 <at24c_ReadOneByte>
 80011b6:	4603      	mov	r3, r0
 80011b8:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 80011ba:	88bb      	ldrh	r3, [r7, #4]
 80011bc:	3b01      	subs	r3, #1
 80011be:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80011c0:	88bb      	ldrh	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1ee      	bne.n	80011a4 <at24c_Read+0x12>
	}
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}

080011d0 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	80fb      	strh	r3, [r7, #6]
 80011dc:	4613      	mov	r3, r2
 80011de:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011e0:	e00c      	b.n	80011fc <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff90 	bl	8001110 <at24c_WriteOneByte>
		WriteAddr++;
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	3301      	adds	r3, #1
 80011f4:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011fc:	88bb      	ldrh	r3, [r7, #4]
 80011fe:	1e5a      	subs	r2, r3, #1
 8001200:	80ba      	strh	r2, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1ed      	bne.n	80011e2 <at24c_Write+0x12>
	}
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001214:	2201      	movs	r2, #1
 8001216:	2108      	movs	r1, #8
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <button_init+0x14>)
 800121a:	f003 ffdd 	bl	80051d8 <HAL_GPIO_WritePin>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020c00 	.word	0x40020c00

08001228 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_DMA_Init+0x3c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <MX_DMA_Init+0x3c>)
 8001238:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_DMA_Init+0x3c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	2038      	movs	r0, #56	; 0x38
 8001250:	f003 faed 	bl	800482e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001254:	2038      	movs	r0, #56	; 0x38
 8001256:	f003 fb06 	bl	8004866 <HAL_NVIC_EnableIRQ>

}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <fsm>:
#include "fsm.h"

void fsm() {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af02      	add	r7, sp, #8
    switch (game_status) {
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <fsm+0x104>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d05b      	beq.n	800132e <fsm+0xc6>
 8001276:	2b02      	cmp	r3, #2
 8001278:	dc70      	bgt.n	800135c <fsm+0xf4>
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <fsm+0x1c>
 800127e:	2b01      	cmp	r3, #1
 8001280:	d00a      	beq.n	8001298 <fsm+0x30>
            lcd_Clear(BLACK);
            game_status = INIT;
        }
        break;
    default:
        break;
 8001282:	e06b      	b.n	800135c <fsm+0xf4>
        drawGameBoard();
 8001284:	f000 f9b2 	bl	80015ec <drawGameBoard>
        drawControlPad();
 8001288:	f000 f9d4 	bl	8001634 <drawControlPad>
        generateFruit();
 800128c:	f000 f970 	bl	8001570 <generateFruit>
        game_status = GAME_START;
 8001290:	4b36      	ldr	r3, [pc, #216]	; (800136c <fsm+0x104>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
        break;
 8001296:	e066      	b.n	8001366 <fsm+0xfe>
        snake_movement();
 8001298:	f000 fa90 	bl	80017bc <snake_movement>
        drawGameBoard();
 800129c:	f000 f9a6 	bl	80015ec <drawGameBoard>
        if (snake_x_coord + 6 >= fruit_x_coord - 10 && snake_x_coord + 6 <= fruit_x_coord + 10 && snake_y_coord + 12  >= fruit_y_coord - 10 && snake_y_coord + 12 <= fruit_y_coord + 10) {
 80012a0:	4b33      	ldr	r3, [pc, #204]	; (8001370 <fsm+0x108>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	1d9a      	adds	r2, r3, #6
 80012a6:	4b33      	ldr	r3, [pc, #204]	; (8001374 <fsm+0x10c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3b0a      	subs	r3, #10
 80012ac:	429a      	cmp	r2, r3
 80012ae:	db2a      	blt.n	8001306 <fsm+0x9e>
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <fsm+0x10c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	1d1a      	adds	r2, r3, #4
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <fsm+0x108>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	db23      	blt.n	8001306 <fsm+0x9e>
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <fsm+0x110>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f103 020c 	add.w	r2, r3, #12
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <fsm+0x114>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3b0a      	subs	r3, #10
 80012cc:	429a      	cmp	r2, r3
 80012ce:	db1a      	blt.n	8001306 <fsm+0x9e>
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <fsm+0x110>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <fsm+0x114>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	da13      	bge.n	8001306 <fsm+0x9e>
            is_fruit_eaten = 1;
 80012de:	4b28      	ldr	r3, [pc, #160]	; (8001380 <fsm+0x118>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
            score += 10;
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <fsm+0x11c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	330a      	adds	r3, #10
 80012ea:	4a26      	ldr	r2, [pc, #152]	; (8001384 <fsm+0x11c>)
 80012ec:	6013      	str	r3, [r2, #0]
            lcd_DrawCircle(fruit_x_coord, fruit_y_coord, BLACK, 10, 1);
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <fsm+0x10c>)
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <fsm+0x114>)
 80012f4:	6819      	ldr	r1, [r3, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	230a      	movs	r3, #10
 80012fc:	2200      	movs	r2, #0
 80012fe:	f001 f96a 	bl	80025d6 <lcd_DrawCircle>
            generateFruit(); 
 8001302:	f000 f935 	bl	8001570 <generateFruit>
        if (snake_x_coord >= 216 || snake_x_coord <= 10 || snake_y_coord >= 196 || snake_y_coord <= 10) {
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <fsm+0x108>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2bd7      	cmp	r3, #215	; 0xd7
 800130c:	dc0b      	bgt.n	8001326 <fsm+0xbe>
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <fsm+0x108>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	dd07      	ble.n	8001326 <fsm+0xbe>
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <fsm+0x110>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2bc3      	cmp	r3, #195	; 0xc3
 800131c:	dc03      	bgt.n	8001326 <fsm+0xbe>
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <fsm+0x110>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b0a      	cmp	r3, #10
 8001324:	dc1c      	bgt.n	8001360 <fsm+0xf8>
            game_status = GAME_OVER;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <fsm+0x104>)
 8001328:	2202      	movs	r2, #2
 800132a:	601a      	str	r2, [r3, #0]
        break;
 800132c:	e018      	b.n	8001360 <fsm+0xf8>
        printGameOver();
 800132e:	f000 fa01 	bl	8001734 <printGameOver>
        if (restartGame()) {
 8001332:	f000 f8f9 	bl	8001528 <restartGame>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d013      	beq.n	8001364 <fsm+0xfc>
            snake_x_coord = 100;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <fsm+0x108>)
 800133e:	2264      	movs	r2, #100	; 0x64
 8001340:	601a      	str	r2, [r3, #0]
            snake_y_coord = 100;
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <fsm+0x110>)
 8001344:	2264      	movs	r2, #100	; 0x64
 8001346:	601a      	str	r2, [r3, #0]
            score = 0;
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <fsm+0x11c>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
            lcd_Clear(BLACK);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 fc8e 	bl	8001c70 <lcd_Clear>
            game_status = INIT;
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <fsm+0x104>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
        break;
 800135a:	e003      	b.n	8001364 <fsm+0xfc>
        break;
 800135c:	bf00      	nop
 800135e:	e002      	b.n	8001366 <fsm+0xfe>
        break;
 8001360:	bf00      	nop
 8001362:	e000      	b.n	8001366 <fsm+0xfe>
        break;
 8001364:	bf00      	nop
    }
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200000e0 	.word	0x200000e0
 8001370:	20000000 	.word	0x20000000
 8001374:	200000e4 	.word	0x200000e4
 8001378:	20000004 	.word	0x20000004
 800137c:	200000e8 	.word	0x200000e8
 8001380:	200000ec 	.word	0x200000ec
 8001384:	200000f0 	.word	0x200000f0

08001388 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80013a2:	463b      	mov	r3, r7
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
 80013b0:	615a      	str	r2, [r3, #20]
 80013b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <MX_FSMC_Init+0xec>)
 80013b6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013ba:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <MX_FSMC_Init+0xec>)
 80013be:	4a2e      	ldr	r2, [pc, #184]	; (8001478 <MX_FSMC_Init+0xf0>)
 80013c0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <MX_FSMC_Init+0xec>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <MX_FSMC_Init+0xec>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013ce:	4b29      	ldr	r3, [pc, #164]	; (8001474 <MX_FSMC_Init+0xec>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <MX_FSMC_Init+0xec>)
 80013d6:	2210      	movs	r2, #16
 80013d8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <MX_FSMC_Init+0xec>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <MX_FSMC_Init+0xec>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <MX_FSMC_Init+0xec>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <MX_FSMC_Init+0xec>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <MX_FSMC_Init+0xec>)
 80013f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <MX_FSMC_Init+0xec>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001400:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <MX_FSMC_Init+0xec>)
 8001402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_FSMC_Init+0xec>)
 800140a:	2200      	movs	r2, #0
 800140c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <MX_FSMC_Init+0xec>)
 8001410:	2200      	movs	r2, #0
 8001412:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_FSMC_Init+0xec>)
 8001416:	2200      	movs	r2, #0
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800141a:	230f      	movs	r3, #15
 800141c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800141e:	230f      	movs	r3, #15
 8001420:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001422:	233c      	movs	r3, #60	; 0x3c
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800142a:	2310      	movs	r3, #16
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800142e:	2311      	movs	r3, #17
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001432:	2300      	movs	r3, #0
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001436:	2308      	movs	r3, #8
 8001438:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800143a:	230f      	movs	r3, #15
 800143c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800143e:	2309      	movs	r3, #9
 8001440:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001446:	2310      	movs	r3, #16
 8001448:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800144a:	2311      	movs	r3, #17
 800144c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001452:	463a      	mov	r2, r7
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <MX_FSMC_Init+0xec>)
 800145c:	f005 fd86 	bl	8006f6c <HAL_SRAM_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001466:	f001 fb58 	bl	8002b1a <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800146a:	bf00      	nop
 800146c:	3738      	adds	r7, #56	; 0x38
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200001b8 	.word	0x200001b8
 8001478:	a0000104 	.word	0xa0000104

0800147c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_FSMC_MspInit+0x88>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d131      	bne.n	80014fc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_FSMC_MspInit+0x88>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_FSMC_MspInit+0x8c>)
 80014a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a6:	4a18      	ldr	r2, [pc, #96]	; (8001508 <HAL_FSMC_MspInit+0x8c>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6393      	str	r3, [r2, #56]	; 0x38
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_FSMC_MspInit+0x8c>)
 80014b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80014ba:	f64f 7388 	movw	r3, #65416	; 0xff88
 80014be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014cc:	230c      	movs	r3, #12
 80014ce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <HAL_FSMC_MspInit+0x90>)
 80014d6:	f003 fccb 	bl	8004e70 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80014da:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80014de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014ec:	230c      	movs	r3, #12
 80014ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4806      	ldr	r0, [pc, #24]	; (8001510 <HAL_FSMC_MspInit+0x94>)
 80014f6:	f003 fcbb 	bl	8004e70 <HAL_GPIO_Init>
 80014fa:	e000      	b.n	80014fe <HAL_FSMC_MspInit+0x82>
    return;
 80014fc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200000dc 	.word	0x200000dc
 8001508:	40023800 	.word	0x40023800
 800150c:	40021000 	.word	0x40021000
 8001510:	40020c00 	.word	0x40020c00

08001514 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800151c:	f7ff ffae 	bl	800147c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <restartGame>:
    if (touch_GetX() > 150 && touch_GetX() < 190 && touch_GetY() > 250 && touch_GetY() < 290) {
        return RIGHT;
    }
}

uint8_t restartGame() {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
    if (touch_IsTouched()) return 0;
 800152c:	f002 fd58 	bl	8003fe0 <touch_IsTouched>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <restartGame+0x12>
 8001536:	2300      	movs	r3, #0
 8001538:	e017      	b.n	800156a <restartGame+0x42>
    return touch_GetX() > 60 && touch_GetX() < 180 && touch_GetY() > 180 && touch_GetY() < 230;
 800153a:	f002 fd63 	bl	8004004 <touch_GetX>
 800153e:	4603      	mov	r3, r0
 8001540:	2b3c      	cmp	r3, #60	; 0x3c
 8001542:	d910      	bls.n	8001566 <restartGame+0x3e>
 8001544:	f002 fd5e 	bl	8004004 <touch_GetX>
 8001548:	4603      	mov	r3, r0
 800154a:	2bb3      	cmp	r3, #179	; 0xb3
 800154c:	d80b      	bhi.n	8001566 <restartGame+0x3e>
 800154e:	f002 fd65 	bl	800401c <touch_GetY>
 8001552:	4603      	mov	r3, r0
 8001554:	2bb4      	cmp	r3, #180	; 0xb4
 8001556:	d906      	bls.n	8001566 <restartGame+0x3e>
 8001558:	f002 fd60 	bl	800401c <touch_GetY>
 800155c:	4603      	mov	r3, r0
 800155e:	2be5      	cmp	r3, #229	; 0xe5
 8001560:	d801      	bhi.n	8001566 <restartGame+0x3e>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <restartGame+0x40>
 8001566:	2300      	movs	r3, #0
 8001568:	b2db      	uxtb	r3, r3
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <generateFruit>:

void generateFruit() {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af02      	add	r7, sp, #8
    // rand()
    fruit_x_coord = (rand() % (230 - 15 + 1)) + 15; 
 8001576:	f006 fdf5 	bl	8008164 <rand>
 800157a:	4602      	mov	r2, r0
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <generateFruit+0x68>)
 800157e:	fb83 1302 	smull	r1, r3, r3, r2
 8001582:	1199      	asrs	r1, r3, #6
 8001584:	17d3      	asrs	r3, r2, #31
 8001586:	1acb      	subs	r3, r1, r3
 8001588:	21d8      	movs	r1, #216	; 0xd8
 800158a:	fb01 f303 	mul.w	r3, r1, r3
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	330f      	adds	r3, #15
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <generateFruit+0x6c>)
 8001594:	6013      	str	r3, [r2, #0]
    fruit_y_coord = (rand() % (210 - 15 + 1)) + 15;
 8001596:	f006 fde5 	bl	8008164 <rand>
 800159a:	4602      	mov	r2, r0
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <generateFruit+0x70>)
 800159e:	fb83 1302 	smull	r1, r3, r3, r2
 80015a2:	1199      	asrs	r1, r3, #6
 80015a4:	17d3      	asrs	r3, r2, #31
 80015a6:	1acb      	subs	r3, r1, r3
 80015a8:	21c4      	movs	r1, #196	; 0xc4
 80015aa:	fb01 f303 	mul.w	r3, r1, r3
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	330f      	adds	r3, #15
 80015b2:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <generateFruit+0x74>)
 80015b4:	6013      	str	r3, [r2, #0]

    lcd_DrawCircle(fruit_x_coord, fruit_y_coord, RED, 6, 1);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <generateFruit+0x6c>)
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <generateFruit+0x74>)
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2306      	movs	r3, #6
 80015c4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80015c8:	f001 f805 	bl	80025d6 <lcd_DrawCircle>

    is_fruit_eaten = 0;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <generateFruit+0x78>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	4bda12f7 	.word	0x4bda12f7
 80015dc:	200000e4 	.word	0x200000e4
 80015e0:	5397829d 	.word	0x5397829d
 80015e4:	200000e8 	.word	0x200000e8
 80015e8:	200000ec 	.word	0x200000ec

080015ec <drawGameBoard>:
		default:
			break;
	}
}

void drawGameBoard() {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af04      	add	r7, sp, #16
    // lcd_Fill(0, 0, 240, 220, BLACK);
    lcd_DrawRectangle(10, 10, 230, 220, YELLOW);
 80015f2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	23dc      	movs	r3, #220	; 0xdc
 80015fa:	22e6      	movs	r2, #230	; 0xe6
 80015fc:	210a      	movs	r1, #10
 80015fe:	200a      	movs	r0, #10
 8001600:	f000 fc39 	bl	8001e76 <lcd_DrawRectangle>

    lcd_ShowIntNum(snake_x_coord, snake_y_coord, 0, 1, BLUE, BLACK, 24);
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <drawGameBoard+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b298      	uxth	r0, r3
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <drawGameBoard+0x44>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	b299      	uxth	r1, r3
 8001610:	2318      	movs	r3, #24
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	2300      	movs	r3, #0
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	231f      	movs	r3, #31
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2301      	movs	r3, #1
 800161e:	2200      	movs	r2, #0
 8001620:	f000 fd4c 	bl	80020bc <lcd_ShowIntNum>
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004

08001634 <drawControlPad>:

void drawControlPad() {
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af04      	add	r7, sp, #16
    char str[10];
    lcd_Fill(0, 220, 240, 320, BLACK);
 800163a:	2300      	movs	r3, #0
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001642:	22f0      	movs	r2, #240	; 0xf0
 8001644:	21dc      	movs	r1, #220	; 0xdc
 8001646:	2000      	movs	r0, #0
 8001648:	f000 fb44 	bl	8001cd4 <lcd_Fill>

    lcd_Fill(50, 250, 90, 290, CYAN);
 800164c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	f44f 7391 	mov.w	r3, #290	; 0x122
 8001656:	225a      	movs	r2, #90	; 0x5a
 8001658:	21fa      	movs	r1, #250	; 0xfa
 800165a:	2032      	movs	r0, #50	; 0x32
 800165c:	f000 fb3a 	bl	8001cd4 <lcd_Fill>
    strcpy(str, "L");
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	224c      	movs	r2, #76	; 0x4c
 8001664:	801a      	strh	r2, [r3, #0]
    lcd_ShowStr(64, 260, str, RED, CYAN, 24, 0);
 8001666:	1d3a      	adds	r2, r7, #4
 8001668:	2300      	movs	r3, #0
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	2318      	movs	r3, #24
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800167a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800167e:	2040      	movs	r0, #64	; 0x40
 8001680:	f001 f816 	bl	80026b0 <lcd_ShowStr>

    lcd_Fill(100, 230, 140, 270, CYAN);
 8001684:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800168e:	228c      	movs	r2, #140	; 0x8c
 8001690:	21e6      	movs	r1, #230	; 0xe6
 8001692:	2064      	movs	r0, #100	; 0x64
 8001694:	f000 fb1e 	bl	8001cd4 <lcd_Fill>
    strcpy(str, "U");
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2255      	movs	r2, #85	; 0x55
 800169c:	801a      	strh	r2, [r3, #0]
    lcd_ShowStr(114, 240, str, RED, CYAN, 24, 0);
 800169e:	1d3a      	adds	r2, r7, #4
 80016a0:	2300      	movs	r3, #0
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	2318      	movs	r3, #24
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016b2:	21f0      	movs	r1, #240	; 0xf0
 80016b4:	2072      	movs	r0, #114	; 0x72
 80016b6:	f000 fffb 	bl	80026b0 <lcd_ShowStr>

    lcd_Fill(100, 280, 140, 320, CYAN);
 80016ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016c4:	228c      	movs	r2, #140	; 0x8c
 80016c6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80016ca:	2064      	movs	r0, #100	; 0x64
 80016cc:	f000 fb02 	bl	8001cd4 <lcd_Fill>
    strcpy(str, "D");
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2244      	movs	r2, #68	; 0x44
 80016d4:	801a      	strh	r2, [r3, #0]
    lcd_ShowStr(114, 290, str, RED, CYAN, 24, 0);
 80016d6:	1d3a      	adds	r2, r7, #4
 80016d8:	2300      	movs	r3, #0
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	2318      	movs	r3, #24
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016ea:	f44f 7191 	mov.w	r1, #290	; 0x122
 80016ee:	2072      	movs	r0, #114	; 0x72
 80016f0:	f000 ffde 	bl	80026b0 <lcd_ShowStr>

    lcd_Fill(150, 250, 190, 290, CYAN);
 80016f4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	f44f 7391 	mov.w	r3, #290	; 0x122
 80016fe:	22be      	movs	r2, #190	; 0xbe
 8001700:	21fa      	movs	r1, #250	; 0xfa
 8001702:	2096      	movs	r0, #150	; 0x96
 8001704:	f000 fae6 	bl	8001cd4 <lcd_Fill>
    strcpy(str, "R");
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2252      	movs	r2, #82	; 0x52
 800170c:	801a      	strh	r2, [r3, #0]
    lcd_ShowStr(164, 260, str, RED, CYAN, 24, 0);
 800170e:	1d3a      	adds	r2, r7, #4
 8001710:	2300      	movs	r3, #0
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	2318      	movs	r3, #24
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001722:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001726:	20a4      	movs	r0, #164	; 0xa4
 8001728:	f000 ffc2 	bl	80026b0 <lcd_ShowStr>
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <printGameOver>:

void printGameOver() {
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af04      	add	r7, sp, #16
    char str[10];

    lcd_Fill(0, 0, 240, 320, YELLOW);
 800173a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001744:	22f0      	movs	r2, #240	; 0xf0
 8001746:	2100      	movs	r1, #0
 8001748:	2000      	movs	r0, #0
 800174a:	f000 fac3 	bl	8001cd4 <lcd_Fill>
    strcpy(str, "GAME OVER");
 800174e:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <printGameOver+0x80>)
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	ca07      	ldmia	r2, {r0, r1, r2}
 8001754:	c303      	stmia	r3!, {r0, r1}
 8001756:	801a      	strh	r2, [r3, #0]
    lcd_StrCenter(0, 100, str, YELLOW, RED, 24, 0);
 8001758:	1d3a      	adds	r2, r7, #4
 800175a:	2300      	movs	r3, #0
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2318      	movs	r3, #24
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800176c:	2164      	movs	r1, #100	; 0x64
 800176e:	2000      	movs	r0, #0
 8001770:	f001 f802 	bl	8002778 <lcd_StrCenter>

    lcd_Fill(60, 180, 180, 230, GBLUE);
 8001774:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	23e6      	movs	r3, #230	; 0xe6
 800177c:	22b4      	movs	r2, #180	; 0xb4
 800177e:	21b4      	movs	r1, #180	; 0xb4
 8001780:	203c      	movs	r0, #60	; 0x3c
 8001782:	f000 faa7 	bl	8001cd4 <lcd_Fill>
    strcpy(str, "RESTART");
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <printGameOver+0x84>)
 800178a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800178e:	e883 0003 	stmia.w	r3, {r0, r1}
    lcd_ShowStr(80, 190, str, RED, BLACK, 24, 1);
 8001792:	1d3a      	adds	r2, r7, #4
 8001794:	2301      	movs	r3, #1
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	2318      	movs	r3, #24
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017a4:	21be      	movs	r1, #190	; 0xbe
 80017a6:	2050      	movs	r0, #80	; 0x50
 80017a8:	f000 ff82 	bl	80026b0 <lcd_ShowStr>
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	08009358 	.word	0x08009358
 80017b8:	08009364 	.word	0x08009364

080017bc <snake_movement>:

void snake_movement() {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af04      	add	r7, sp, #16
    counter_game = (counter_game + 1) % 1;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <snake_movement+0x8c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

    if (counter_game == 0) {
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <snake_movement+0x8c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d138      	bne.n	8001842 <snake_movement+0x86>
        switch (snake_direction) {
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <snake_movement+0x90>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d822      	bhi.n	8001820 <snake_movement+0x64>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <snake_movement+0x24>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	08001809 	.word	0x08001809
 80017e4:	080017f1 	.word	0x080017f1
 80017e8:	08001815 	.word	0x08001815
 80017ec:	080017fd 	.word	0x080017fd
        case UP:
            snake_y_coord--;
 80017f0:	4b17      	ldr	r3, [pc, #92]	; (8001850 <snake_movement+0x94>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	4a16      	ldr	r2, [pc, #88]	; (8001850 <snake_movement+0x94>)
 80017f8:	6013      	str	r3, [r2, #0]
            break;
 80017fa:	e012      	b.n	8001822 <snake_movement+0x66>
        case DOWN:
            snake_y_coord++;
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <snake_movement+0x94>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	4a13      	ldr	r2, [pc, #76]	; (8001850 <snake_movement+0x94>)
 8001804:	6013      	str	r3, [r2, #0]
            break;
 8001806:	e00c      	b.n	8001822 <snake_movement+0x66>
        case LEFT:
            snake_x_coord--;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <snake_movement+0x98>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3b01      	subs	r3, #1
 800180e:	4a11      	ldr	r2, [pc, #68]	; (8001854 <snake_movement+0x98>)
 8001810:	6013      	str	r3, [r2, #0]
            break;
 8001812:	e006      	b.n	8001822 <snake_movement+0x66>
        case RIGHT:
            snake_x_coord++;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <snake_movement+0x98>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <snake_movement+0x98>)
 800181c:	6013      	str	r3, [r2, #0]
            break;
 800181e:	e000      	b.n	8001822 <snake_movement+0x66>
        default:
            break;
 8001820:	bf00      	nop
        }  

        lcd_ShowIntNum(170, 300, score, 3, YELLOW, BLACK, 24);
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <snake_movement+0x9c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	b29a      	uxth	r2, r3
 8001828:	2318      	movs	r3, #24
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	2300      	movs	r3, #0
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2303      	movs	r3, #3
 8001838:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800183c:	20aa      	movs	r0, #170	; 0xaa
 800183e:	f000 fc3d 	bl	80020bc <lcd_ShowIntNum>
        // lcd_ShowIntNum(150, 10, snake_x_coord, 3, GREEN, BLACK, 24);
        // lcd_ShowIntNum(200, 10, snake_y_coord, 3, GREEN, BLACK, 24);
    }
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200000f4 	.word	0x200000f4
 800184c:	20000008 	.word	0x20000008
 8001850:	20000004 	.word	0x20000004
 8001854:	20000000 	.word	0x20000000
 8001858:	200000f0 	.word	0x200000f0

0800185c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	; 0x38
 8001860:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
 8001876:	4b7e      	ldr	r3, [pc, #504]	; (8001a70 <MX_GPIO_Init+0x214>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a7d      	ldr	r2, [pc, #500]	; (8001a70 <MX_GPIO_Init+0x214>)
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <MX_GPIO_Init+0x214>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	4b77      	ldr	r3, [pc, #476]	; (8001a70 <MX_GPIO_Init+0x214>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a76      	ldr	r2, [pc, #472]	; (8001a70 <MX_GPIO_Init+0x214>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b74      	ldr	r3, [pc, #464]	; (8001a70 <MX_GPIO_Init+0x214>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <MX_GPIO_Init+0x214>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a6f      	ldr	r2, [pc, #444]	; (8001a70 <MX_GPIO_Init+0x214>)
 80018b4:	f043 0320 	orr.w	r3, r3, #32
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b6d      	ldr	r3, [pc, #436]	; (8001a70 <MX_GPIO_Init+0x214>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	4b69      	ldr	r3, [pc, #420]	; (8001a70 <MX_GPIO_Init+0x214>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a68      	ldr	r2, [pc, #416]	; (8001a70 <MX_GPIO_Init+0x214>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b66      	ldr	r3, [pc, #408]	; (8001a70 <MX_GPIO_Init+0x214>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b62      	ldr	r3, [pc, #392]	; (8001a70 <MX_GPIO_Init+0x214>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a61      	ldr	r2, [pc, #388]	; (8001a70 <MX_GPIO_Init+0x214>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <MX_GPIO_Init+0x214>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b5b      	ldr	r3, [pc, #364]	; (8001a70 <MX_GPIO_Init+0x214>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a5a      	ldr	r2, [pc, #360]	; (8001a70 <MX_GPIO_Init+0x214>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b58      	ldr	r3, [pc, #352]	; (8001a70 <MX_GPIO_Init+0x214>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	4b54      	ldr	r3, [pc, #336]	; (8001a70 <MX_GPIO_Init+0x214>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a53      	ldr	r2, [pc, #332]	; (8001a70 <MX_GPIO_Init+0x214>)
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <MX_GPIO_Init+0x214>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <MX_GPIO_Init+0x214>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <MX_GPIO_Init+0x214>)
 8001940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <MX_GPIO_Init+0x214>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	2170      	movs	r1, #112	; 0x70
 8001956:	4847      	ldr	r0, [pc, #284]	; (8001a74 <MX_GPIO_Init+0x218>)
 8001958:	f003 fc3e 	bl	80051d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8001962:	4845      	ldr	r0, [pc, #276]	; (8001a78 <MX_GPIO_Init+0x21c>)
 8001964:	f003 fc38 	bl	80051d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800196e:	4843      	ldr	r0, [pc, #268]	; (8001a7c <MX_GPIO_Init+0x220>)
 8001970:	f003 fc32 	bl	80051d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800197a:	4841      	ldr	r0, [pc, #260]	; (8001a80 <MX_GPIO_Init+0x224>)
 800197c:	f003 fc2c 	bl	80051d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	2108      	movs	r1, #8
 8001984:	483f      	ldr	r0, [pc, #252]	; (8001a84 <MX_GPIO_Init+0x228>)
 8001986:	f003 fc27 	bl	80051d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800198a:	2370      	movs	r3, #112	; 0x70
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800199a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199e:	4619      	mov	r1, r3
 80019a0:	4834      	ldr	r0, [pc, #208]	; (8001a74 <MX_GPIO_Init+0x218>)
 80019a2:	f003 fa65 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80019a6:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019bc:	4619      	mov	r1, r3
 80019be:	482e      	ldr	r0, [pc, #184]	; (8001a78 <MX_GPIO_Init+0x21c>)
 80019c0:	f003 fa56 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80019c4:	23c0      	movs	r3, #192	; 0xc0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d4:	4619      	mov	r1, r3
 80019d6:	482a      	ldr	r0, [pc, #168]	; (8001a80 <MX_GPIO_Init+0x224>)
 80019d8:	f003 fa4a 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80019dc:	2330      	movs	r3, #48	; 0x30
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	4822      	ldr	r0, [pc, #136]	; (8001a78 <MX_GPIO_Init+0x21c>)
 80019f0:	f003 fa3e 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80019f4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481b      	ldr	r0, [pc, #108]	; (8001a7c <MX_GPIO_Init+0x220>)
 8001a0e:	f003 fa2f 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8001a12:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a24:	4619      	mov	r1, r3
 8001a26:	4814      	ldr	r0, [pc, #80]	; (8001a78 <MX_GPIO_Init+0x21c>)
 8001a28:	f003 fa22 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	4619      	mov	r1, r3
 8001a44:	480e      	ldr	r0, [pc, #56]	; (8001a80 <MX_GPIO_Init+0x224>)
 8001a46:	f003 fa13 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4808      	ldr	r0, [pc, #32]	; (8001a84 <MX_GPIO_Init+0x228>)
 8001a62:	f003 fa05 	bl	8004e70 <HAL_GPIO_Init>

}
 8001a66:	bf00      	nop
 8001a68:	3738      	adds	r7, #56	; 0x38
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	40021800 	.word	0x40021800
 8001a80:	40020000 	.word	0x40020000
 8001a84:	40020c00 	.word	0x40020c00

08001a88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001a8e:	4a13      	ldr	r2, [pc, #76]	; (8001adc <MX_I2C1_Init+0x54>)
 8001a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001a94:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <MX_I2C1_Init+0x58>)
 8001a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001ac6:	f003 fba1 	bl	800520c <HAL_I2C_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ad0:	f001 f823 	bl	8002b1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000208 	.word	0x20000208
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	000186a0 	.word	0x000186a0

08001ae4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_I2C_MspInit+0x84>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12b      	bne.n	8001b5e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b22:	23c0      	movs	r3, #192	; 0xc0
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b26:	2312      	movs	r3, #18
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b32:	2304      	movs	r3, #4
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480c      	ldr	r0, [pc, #48]	; (8001b70 <HAL_I2C_MspInit+0x8c>)
 8001b3e:	f003 f997 	bl	8004e70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020400 	.word	0x40020400

08001b74 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <LCD_WR_REG+0x1c>)
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	8013      	strh	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	600ffffe 	.word	0x600ffffe

08001b94 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <LCD_WR_DATA+0x1c>)
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	8053      	strh	r3, [r2, #2]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	600ffffe 	.word	0x600ffffe

08001bb4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <LCD_RD_DATA+0x20>)
 8001bbc:	885b      	ldrh	r3, [r3, #2]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	b29b      	uxth	r3, r3
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	600ffffe 	.word	0x600ffffe

08001bd8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4604      	mov	r4, r0
 8001be0:	4608      	mov	r0, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	4623      	mov	r3, r4
 8001be8:	80fb      	strh	r3, [r7, #6]
 8001bea:	4603      	mov	r3, r0
 8001bec:	80bb      	strh	r3, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	807b      	strh	r3, [r7, #2]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001bf6:	202a      	movs	r0, #42	; 0x2a
 8001bf8:	f7ff ffbc 	bl	8001b74 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ffc6 	bl	8001b94 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ffc0 	bl	8001b94 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ffba 	bl	8001b94 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001c20:	887b      	ldrh	r3, [r7, #2]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ffb4 	bl	8001b94 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001c2c:	202b      	movs	r0, #43	; 0x2b
 8001c2e:	f7ff ffa1 	bl	8001b74 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001c32:	88bb      	ldrh	r3, [r7, #4]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ffab 	bl	8001b94 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001c3e:	88bb      	ldrh	r3, [r7, #4]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ffa5 	bl	8001b94 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001c4a:	883b      	ldrh	r3, [r7, #0]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff9f 	bl	8001b94 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001c56:	883b      	ldrh	r3, [r7, #0]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff99 	bl	8001b94 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001c62:	202c      	movs	r0, #44	; 0x2c
 8001c64:	f7ff ff86 	bl	8001b74 <LCD_WR_REG>
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}

08001c70 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <lcd_Clear+0x60>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <lcd_Clear+0x60>)
 8001c84:	885b      	ldrh	r3, [r3, #2]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff ffa3 	bl	8001bd8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	81fb      	strh	r3, [r7, #14]
 8001c96:	e011      	b.n	8001cbc <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	81bb      	strh	r3, [r7, #12]
 8001c9c:	e006      	b.n	8001cac <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff77 	bl	8001b94 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001ca6:	89bb      	ldrh	r3, [r7, #12]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	81bb      	strh	r3, [r7, #12]
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <lcd_Clear+0x60>)
 8001cae:	885b      	ldrh	r3, [r3, #2]
 8001cb0:	89ba      	ldrh	r2, [r7, #12]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d3f3      	bcc.n	8001c9e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	81fb      	strh	r3, [r7, #14]
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <lcd_Clear+0x60>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	89fa      	ldrh	r2, [r7, #14]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d3e8      	bcc.n	8001c98 <lcd_Clear+0x28>
		}
	}
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	2000025c 	.word	0x2000025c

08001cd4 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4604      	mov	r4, r0
 8001cdc:	4608      	mov	r0, r1
 8001cde:	4611      	mov	r1, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	80fb      	strh	r3, [r7, #6]
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80bb      	strh	r3, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	807b      	strh	r3, [r7, #2]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	883b      	ldrh	r3, [r7, #0]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	88b9      	ldrh	r1, [r7, #4]
 8001d00:	88f8      	ldrh	r0, [r7, #6]
 8001d02:	f7ff ff69 	bl	8001bd8 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001d06:	88bb      	ldrh	r3, [r7, #4]
 8001d08:	81fb      	strh	r3, [r7, #14]
 8001d0a:	e010      	b.n	8001d2e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	81bb      	strh	r3, [r7, #12]
 8001d10:	e006      	b.n	8001d20 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001d12:	8c3b      	ldrh	r3, [r7, #32]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff3d 	bl	8001b94 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001d1a:	89bb      	ldrh	r3, [r7, #12]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	81bb      	strh	r3, [r7, #12]
 8001d20:	89ba      	ldrh	r2, [r7, #12]
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d3f4      	bcc.n	8001d12 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001d28:	89fb      	ldrh	r3, [r7, #14]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	81fb      	strh	r3, [r7, #14]
 8001d2e:	89fa      	ldrh	r2, [r7, #14]
 8001d30:	883b      	ldrh	r3, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d3ea      	bcc.n	8001d0c <lcd_Fill+0x38>
		}
	}
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd90      	pop	{r4, r7, pc}

08001d40 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	80bb      	strh	r3, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001d52:	88bb      	ldrh	r3, [r7, #4]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	88b9      	ldrh	r1, [r7, #4]
 8001d58:	88f8      	ldrh	r0, [r7, #6]
 8001d5a:	f7ff ff3d 	bl	8001bd8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff17 	bl	8001b94 <LCD_WR_DATA>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001d6e:	b590      	push	{r4, r7, lr}
 8001d70:	b08d      	sub	sp, #52	; 0x34
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4604      	mov	r4, r0
 8001d76:	4608      	mov	r0, r1
 8001d78:	4611      	mov	r1, r2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	80fb      	strh	r3, [r7, #6]
 8001d80:	4603      	mov	r3, r0
 8001d82:	80bb      	strh	r3, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001d9c:	883a      	ldrh	r2, [r7, #0]
 8001d9e:	88bb      	ldrh	r3, [r7, #4]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001da8:	88bb      	ldrh	r3, [r7, #4]
 8001daa:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	dd02      	ble.n	8001db8 <lcd_DrawLine+0x4a>
 8001db2:	2301      	movs	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e00b      	b.n	8001dd0 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <lcd_DrawLine+0x56>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e005      	b.n	8001dd0 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	425b      	negs	r3, r3
 8001dce:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	dd02      	ble.n	8001ddc <lcd_DrawLine+0x6e>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	e00b      	b.n	8001df4 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <lcd_DrawLine+0x7a>
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	e005      	b.n	8001df4 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	425b      	negs	r3, r3
 8001df2:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001df4:	6a3a      	ldr	r2, [r7, #32]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dd02      	ble.n	8001e02 <lcd_DrawLine+0x94>
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	e001      	b.n	8001e06 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001e0a:	e02b      	b.n	8001e64 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	b291      	uxth	r1, r2
 8001e14:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff91 	bl	8001d40 <lcd_DrawPoint>
		xerr+=delta_x;
 8001e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	4413      	add	r3, r2
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	dd07      	ble.n	8001e46 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	dd07      	ble.n	8001e5e <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001e5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e60:	3301      	adds	r3, #1
 8001e62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001e64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dacf      	bge.n	8001e0c <lcd_DrawLine+0x9e>
		}
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3734      	adds	r7, #52	; 0x34
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd90      	pop	{r4, r7, pc}

08001e76 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001e76:	b590      	push	{r4, r7, lr}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af02      	add	r7, sp, #8
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	4608      	mov	r0, r1
 8001e80:	4611      	mov	r1, r2
 8001e82:	461a      	mov	r2, r3
 8001e84:	4623      	mov	r3, r4
 8001e86:	80fb      	strh	r3, [r7, #6]
 8001e88:	4603      	mov	r3, r0
 8001e8a:	80bb      	strh	r3, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
 8001e90:	4613      	mov	r3, r2
 8001e92:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001e94:	88bc      	ldrh	r4, [r7, #4]
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	88b9      	ldrh	r1, [r7, #4]
 8001e9a:	88f8      	ldrh	r0, [r7, #6]
 8001e9c:	8b3b      	ldrh	r3, [r7, #24]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	4623      	mov	r3, r4
 8001ea2:	f7ff ff64 	bl	8001d6e <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001ea6:	883c      	ldrh	r4, [r7, #0]
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	88b9      	ldrh	r1, [r7, #4]
 8001eac:	88f8      	ldrh	r0, [r7, #6]
 8001eae:	8b3b      	ldrh	r3, [r7, #24]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	f7ff ff5b 	bl	8001d6e <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001eb8:	883c      	ldrh	r4, [r7, #0]
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	8839      	ldrh	r1, [r7, #0]
 8001ebe:	88f8      	ldrh	r0, [r7, #6]
 8001ec0:	8b3b      	ldrh	r3, [r7, #24]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	f7ff ff52 	bl	8001d6e <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001eca:	883c      	ldrh	r4, [r7, #0]
 8001ecc:	887a      	ldrh	r2, [r7, #2]
 8001ece:	88b9      	ldrh	r1, [r7, #4]
 8001ed0:	8878      	ldrh	r0, [r7, #2]
 8001ed2:	8b3b      	ldrh	r3, [r7, #24]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	f7ff ff49 	bl	8001d6e <lcd_DrawLine>
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd90      	pop	{r4, r7, pc}

08001ee4 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4604      	mov	r4, r0
 8001eec:	4608      	mov	r0, r1
 8001eee:	4611      	mov	r1, r2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	80fb      	strh	r3, [r7, #6]
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80bb      	strh	r3, [r7, #4]
 8001efa:	460b      	mov	r3, r1
 8001efc:	70fb      	strb	r3, [r7, #3]
 8001efe:	4613      	mov	r3, r2
 8001f00:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001f0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f0e:	085b      	lsrs	r3, r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf14      	ite	ne
 8001f26:	2301      	movne	r3, #1
 8001f28:	2300      	moveq	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	fb12 f303 	smulbb	r3, r2, r3
 8001f3a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	3b20      	subs	r3, #32
 8001f40:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	4413      	add	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29c      	uxth	r4, r3
 8001f50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	88bb      	ldrh	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	88b9      	ldrh	r1, [r7, #4]
 8001f62:	88f8      	ldrh	r0, [r7, #6]
 8001f64:	4622      	mov	r2, r4
 8001f66:	f7ff fe37 	bl	8001bd8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	827b      	strh	r3, [r7, #18]
 8001f6e:	e07a      	b.n	8002066 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001f70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	d028      	beq.n	8001fca <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001f78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d108      	bne.n	8001f92 <lcd_ShowChar+0xae>
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	8a7b      	ldrh	r3, [r7, #18]
 8001f84:	493c      	ldr	r1, [pc, #240]	; (8002078 <lcd_ShowChar+0x194>)
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	440a      	add	r2, r1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	75fb      	strb	r3, [r7, #23]
 8001f90:	e01b      	b.n	8001fca <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001f92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f96:	2b18      	cmp	r3, #24
 8001f98:	d10b      	bne.n	8001fb2 <lcd_ShowChar+0xce>
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	8a79      	ldrh	r1, [r7, #18]
 8001f9e:	4837      	ldr	r0, [pc, #220]	; (800207c <lcd_ShowChar+0x198>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4403      	add	r3, r0
 8001faa:	440b      	add	r3, r1
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	75fb      	strb	r3, [r7, #23]
 8001fb0:	e00b      	b.n	8001fca <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001fb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d15a      	bne.n	8002070 <lcd_ShowChar+0x18c>
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	8a7b      	ldrh	r3, [r7, #18]
 8001fbe:	4930      	ldr	r1, [pc, #192]	; (8002080 <lcd_ShowChar+0x19c>)
 8001fc0:	0192      	lsls	r2, r2, #6
 8001fc2:	440a      	add	r2, r1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75bb      	strb	r3, [r7, #22]
 8001fce:	e044      	b.n	800205a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001fd0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d120      	bne.n	800201a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001fd8:	7dfa      	ldrb	r2, [r7, #23]
 8001fda:	7dbb      	ldrb	r3, [r7, #22]
 8001fdc:	fa42 f303 	asr.w	r3, r2, r3
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d004      	beq.n	8001ff2 <lcd_ShowChar+0x10e>
 8001fe8:	883b      	ldrh	r3, [r7, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fdd2 	bl	8001b94 <LCD_WR_DATA>
 8001ff0:	e003      	b.n	8001ffa <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001ff2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fdcd 	bl	8001b94 <LCD_WR_DATA>
				m++;
 8001ffa:	7d7b      	ldrb	r3, [r7, #21]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8002000:	7d7b      	ldrb	r3, [r7, #21]
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	fbb3 f1f2 	udiv	r1, r3, r2
 8002008:	fb02 f201 	mul.w	r2, r2, r1
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d11f      	bne.n	8002054 <lcd_ShowChar+0x170>
				{
					m=0;
 8002014:	2300      	movs	r3, #0
 8002016:	757b      	strb	r3, [r7, #21]
					break;
 8002018:	e022      	b.n	8002060 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800201a:	7dfa      	ldrb	r2, [r7, #23]
 800201c:	7dbb      	ldrb	r3, [r7, #22]
 800201e:	fa42 f303 	asr.w	r3, r2, r3
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <lcd_ShowChar+0x152>
 800202a:	883a      	ldrh	r2, [r7, #0]
 800202c:	88b9      	ldrh	r1, [r7, #4]
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fe85 	bl	8001d40 <lcd_DrawPoint>
				x++;
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	3301      	adds	r3, #1
 800203a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 800203c:	88fa      	ldrh	r2, [r7, #6]
 800203e:	8a3b      	ldrh	r3, [r7, #16]
 8002040:	1ad2      	subs	r2, r2, r3
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	429a      	cmp	r2, r3
 8002046:	d105      	bne.n	8002054 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002048:	8a3b      	ldrh	r3, [r7, #16]
 800204a:	80fb      	strh	r3, [r7, #6]
					y++;
 800204c:	88bb      	ldrh	r3, [r7, #4]
 800204e:	3301      	adds	r3, #1
 8002050:	80bb      	strh	r3, [r7, #4]
					break;
 8002052:	e005      	b.n	8002060 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002054:	7dbb      	ldrb	r3, [r7, #22]
 8002056:	3301      	adds	r3, #1
 8002058:	75bb      	strb	r3, [r7, #22]
 800205a:	7dbb      	ldrb	r3, [r7, #22]
 800205c:	2b07      	cmp	r3, #7
 800205e:	d9b7      	bls.n	8001fd0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002060:	8a7b      	ldrh	r3, [r7, #18]
 8002062:	3301      	adds	r3, #1
 8002064:	827b      	strh	r3, [r7, #18]
 8002066:	8a7a      	ldrh	r2, [r7, #18]
 8002068:	89bb      	ldrh	r3, [r7, #12]
 800206a:	429a      	cmp	r2, r3
 800206c:	d380      	bcc.n	8001f70 <lcd_ShowChar+0x8c>
 800206e:	e000      	b.n	8002072 <lcd_ShowChar+0x18e>
		else return;
 8002070:	bf00      	nop
				}
			}
		}
	}
}
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd90      	pop	{r4, r7, pc}
 8002078:	0800944c 	.word	0x0800944c
 800207c:	08009a3c 	.word	0x08009a3c
 8002080:	0800ac0c 	.word	0x0800ac0c

08002084 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	460a      	mov	r2, r1
 800208e:	71fb      	strb	r3, [r7, #7]
 8002090:	4613      	mov	r3, r2
 8002092:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002094:	2301      	movs	r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002098:	e004      	b.n	80020a4 <mypow+0x20>
 800209a:	79fa      	ldrb	r2, [r7, #7]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	79bb      	ldrb	r3, [r7, #6]
 80020a6:	1e5a      	subs	r2, r3, #1
 80020a8:	71ba      	strb	r2, [r7, #6]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f5      	bne.n	800209a <mypow+0x16>
	return result;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af04      	add	r7, sp, #16
 80020c2:	4604      	mov	r4, r0
 80020c4:	4608      	mov	r0, r1
 80020c6:	4611      	mov	r1, r2
 80020c8:	461a      	mov	r2, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	80fb      	strh	r3, [r7, #6]
 80020ce:	4603      	mov	r3, r0
 80020d0:	80bb      	strh	r3, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	807b      	strh	r3, [r7, #2]
 80020d6:	4613      	mov	r3, r2
 80020d8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80020da:	2300      	movs	r3, #0
 80020dc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80020de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80020e2:	085b      	lsrs	r3, r3, #1
 80020e4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	e059      	b.n	80021a0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80020ec:	887c      	ldrh	r4, [r7, #2]
 80020ee:	787a      	ldrb	r2, [r7, #1]
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	4619      	mov	r1, r3
 80020fc:	200a      	movs	r0, #10
 80020fe:	f7ff ffc1 	bl	8002084 <mypow>
 8002102:	4603      	mov	r3, r0
 8002104:	fbb4 f1f3 	udiv	r1, r4, r3
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <lcd_ShowIntNum+0xf8>)
 800210a:	fba3 2301 	umull	r2, r3, r3, r1
 800210e:	08da      	lsrs	r2, r3, #3
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	1aca      	subs	r2, r1, r3
 800211a:	4613      	mov	r3, r2
 800211c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800211e:	7bbb      	ldrb	r3, [r7, #14]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d121      	bne.n	8002168 <lcd_ShowIntNum+0xac>
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	787b      	ldrb	r3, [r7, #1]
 8002128:	3b01      	subs	r3, #1
 800212a:	429a      	cmp	r2, r3
 800212c:	da1c      	bge.n	8002168 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800212e:	7b3b      	ldrb	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d117      	bne.n	8002164 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	b29a      	uxth	r2, r3
 8002138:	7b7b      	ldrb	r3, [r7, #13]
 800213a:	b29b      	uxth	r3, r3
 800213c:	fb12 f303 	smulbb	r3, r2, r3
 8002140:	b29a      	uxth	r2, r3
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	4413      	add	r3, r2
 8002146:	b298      	uxth	r0, r3
 8002148:	8c3a      	ldrh	r2, [r7, #32]
 800214a:	88b9      	ldrh	r1, [r7, #4]
 800214c:	2300      	movs	r3, #0
 800214e:	9302      	str	r3, [sp, #8]
 8002150:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	4613      	mov	r3, r2
 800215c:	2220      	movs	r2, #32
 800215e:	f7ff fec1 	bl	8001ee4 <lcd_ShowChar>
				continue;
 8002162:	e01a      	b.n	800219a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002164:	2301      	movs	r3, #1
 8002166:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	b29a      	uxth	r2, r3
 800216c:	7b7b      	ldrb	r3, [r7, #13]
 800216e:	b29b      	uxth	r3, r3
 8002170:	fb12 f303 	smulbb	r3, r2, r3
 8002174:	b29a      	uxth	r2, r3
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	4413      	add	r3, r2
 800217a:	b298      	uxth	r0, r3
 800217c:	7b3b      	ldrb	r3, [r7, #12]
 800217e:	3330      	adds	r3, #48	; 0x30
 8002180:	b2da      	uxtb	r2, r3
 8002182:	8c3c      	ldrh	r4, [r7, #32]
 8002184:	88b9      	ldrh	r1, [r7, #4]
 8002186:	2300      	movs	r3, #0
 8002188:	9302      	str	r3, [sp, #8]
 800218a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	4623      	mov	r3, r4
 8002196:	f7ff fea5 	bl	8001ee4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	3301      	adds	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	787b      	ldrb	r3, [r7, #1]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d3a1      	bcc.n	80020ec <lcd_ShowIntNum+0x30>
	}
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}
 80021b2:	bf00      	nop
 80021b4:	cccccccd 	.word	0xcccccccd

080021b8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <lcd_SetDir+0x44>)
 80021d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021d8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <lcd_SetDir+0x44>)
 80021dc:	22f0      	movs	r2, #240	; 0xf0
 80021de:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80021e0:	e006      	b.n	80021f0 <lcd_SetDir+0x38>
		lcddev.width=240;
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <lcd_SetDir+0x44>)
 80021e4:	22f0      	movs	r2, #240	; 0xf0
 80021e6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <lcd_SetDir+0x44>)
 80021ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021ee:	805a      	strh	r2, [r3, #2]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	2000025c 	.word	0x2000025c

08002200 <lcd_init>:


void lcd_init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220a:	48aa      	ldr	r0, [pc, #680]	; (80024b4 <lcd_init+0x2b4>)
 800220c:	f002 ffe4 	bl	80051d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002214:	f001 ffaa 	bl	800416c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002218:	2201      	movs	r2, #1
 800221a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800221e:	48a5      	ldr	r0, [pc, #660]	; (80024b4 <lcd_init+0x2b4>)
 8002220:	f002 ffda 	bl	80051d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002224:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002228:	f001 ffa0 	bl	800416c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 800222c:	2000      	movs	r0, #0
 800222e:	f7ff ffc3 	bl	80021b8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002232:	20d3      	movs	r0, #211	; 0xd3
 8002234:	f7ff fc9e 	bl	8001b74 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002238:	f7ff fcbc 	bl	8001bb4 <LCD_RD_DATA>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	4b9d      	ldr	r3, [pc, #628]	; (80024b8 <lcd_init+0x2b8>)
 8002242:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002244:	f7ff fcb6 	bl	8001bb4 <LCD_RD_DATA>
 8002248:	4603      	mov	r3, r0
 800224a:	461a      	mov	r2, r3
 800224c:	4b9a      	ldr	r3, [pc, #616]	; (80024b8 <lcd_init+0x2b8>)
 800224e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002250:	f7ff fcb0 	bl	8001bb4 <LCD_RD_DATA>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	4b97      	ldr	r3, [pc, #604]	; (80024b8 <lcd_init+0x2b8>)
 800225a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800225c:	4b96      	ldr	r3, [pc, #600]	; (80024b8 <lcd_init+0x2b8>)
 800225e:	889b      	ldrh	r3, [r3, #4]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b29a      	uxth	r2, r3
 8002264:	4b94      	ldr	r3, [pc, #592]	; (80024b8 <lcd_init+0x2b8>)
 8002266:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002268:	f7ff fca4 	bl	8001bb4 <LCD_RD_DATA>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	4b91      	ldr	r3, [pc, #580]	; (80024b8 <lcd_init+0x2b8>)
 8002272:	889b      	ldrh	r3, [r3, #4]
 8002274:	4313      	orrs	r3, r2
 8002276:	b29a      	uxth	r2, r3
 8002278:	4b8f      	ldr	r3, [pc, #572]	; (80024b8 <lcd_init+0x2b8>)
 800227a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800227c:	20cf      	movs	r0, #207	; 0xcf
 800227e:	f7ff fc79 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff fc86 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002288:	20c1      	movs	r0, #193	; 0xc1
 800228a:	f7ff fc83 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800228e:	2030      	movs	r0, #48	; 0x30
 8002290:	f7ff fc80 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002294:	20ed      	movs	r0, #237	; 0xed
 8002296:	f7ff fc6d 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800229a:	2064      	movs	r0, #100	; 0x64
 800229c:	f7ff fc7a 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80022a0:	2003      	movs	r0, #3
 80022a2:	f7ff fc77 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80022a6:	2012      	movs	r0, #18
 80022a8:	f7ff fc74 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80022ac:	2081      	movs	r0, #129	; 0x81
 80022ae:	f7ff fc71 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80022b2:	20e8      	movs	r0, #232	; 0xe8
 80022b4:	f7ff fc5e 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80022b8:	2085      	movs	r0, #133	; 0x85
 80022ba:	f7ff fc6b 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80022be:	2010      	movs	r0, #16
 80022c0:	f7ff fc68 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80022c4:	207a      	movs	r0, #122	; 0x7a
 80022c6:	f7ff fc65 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80022ca:	20cb      	movs	r0, #203	; 0xcb
 80022cc:	f7ff fc52 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80022d0:	2039      	movs	r0, #57	; 0x39
 80022d2:	f7ff fc5f 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80022d6:	202c      	movs	r0, #44	; 0x2c
 80022d8:	f7ff fc5c 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff fc59 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80022e2:	2034      	movs	r0, #52	; 0x34
 80022e4:	f7ff fc56 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80022e8:	2002      	movs	r0, #2
 80022ea:	f7ff fc53 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80022ee:	20f7      	movs	r0, #247	; 0xf7
 80022f0:	f7ff fc40 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80022f4:	2020      	movs	r0, #32
 80022f6:	f7ff fc4d 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80022fa:	20ea      	movs	r0, #234	; 0xea
 80022fc:	f7ff fc3a 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002300:	2000      	movs	r0, #0
 8002302:	f7ff fc47 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002306:	2000      	movs	r0, #0
 8002308:	f7ff fc44 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800230c:	20c0      	movs	r0, #192	; 0xc0
 800230e:	f7ff fc31 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002312:	201b      	movs	r0, #27
 8002314:	f7ff fc3e 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002318:	20c1      	movs	r0, #193	; 0xc1
 800231a:	f7ff fc2b 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800231e:	2001      	movs	r0, #1
 8002320:	f7ff fc38 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002324:	20c5      	movs	r0, #197	; 0xc5
 8002326:	f7ff fc25 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800232a:	2030      	movs	r0, #48	; 0x30
 800232c:	f7ff fc32 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002330:	2030      	movs	r0, #48	; 0x30
 8002332:	f7ff fc2f 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002336:	20c7      	movs	r0, #199	; 0xc7
 8002338:	f7ff fc1c 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800233c:	20b7      	movs	r0, #183	; 0xb7
 800233e:	f7ff fc29 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002342:	2036      	movs	r0, #54	; 0x36
 8002344:	f7ff fc16 	bl	8001b74 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002348:	2008      	movs	r0, #8
 800234a:	f7ff fc23 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800234e:	203a      	movs	r0, #58	; 0x3a
 8002350:	f7ff fc10 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002354:	2055      	movs	r0, #85	; 0x55
 8002356:	f7ff fc1d 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800235a:	20b1      	movs	r0, #177	; 0xb1
 800235c:	f7ff fc0a 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff fc17 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002366:	201a      	movs	r0, #26
 8002368:	f7ff fc14 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800236c:	20b6      	movs	r0, #182	; 0xb6
 800236e:	f7ff fc01 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002372:	200a      	movs	r0, #10
 8002374:	f7ff fc0e 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002378:	20a2      	movs	r0, #162	; 0xa2
 800237a:	f7ff fc0b 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800237e:	20f2      	movs	r0, #242	; 0xf2
 8002380:	f7ff fbf8 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002384:	2000      	movs	r0, #0
 8002386:	f7ff fc05 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800238a:	2026      	movs	r0, #38	; 0x26
 800238c:	f7ff fbf2 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002390:	2001      	movs	r0, #1
 8002392:	f7ff fbff 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002396:	20e0      	movs	r0, #224	; 0xe0
 8002398:	f7ff fbec 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800239c:	200f      	movs	r0, #15
 800239e:	f7ff fbf9 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80023a2:	202a      	movs	r0, #42	; 0x2a
 80023a4:	f7ff fbf6 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80023a8:	2028      	movs	r0, #40	; 0x28
 80023aa:	f7ff fbf3 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80023ae:	2008      	movs	r0, #8
 80023b0:	f7ff fbf0 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80023b4:	200e      	movs	r0, #14
 80023b6:	f7ff fbed 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80023ba:	2008      	movs	r0, #8
 80023bc:	f7ff fbea 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80023c0:	2054      	movs	r0, #84	; 0x54
 80023c2:	f7ff fbe7 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80023c6:	20a9      	movs	r0, #169	; 0xa9
 80023c8:	f7ff fbe4 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80023cc:	2043      	movs	r0, #67	; 0x43
 80023ce:	f7ff fbe1 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80023d2:	200a      	movs	r0, #10
 80023d4:	f7ff fbde 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80023d8:	200f      	movs	r0, #15
 80023da:	f7ff fbdb 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7ff fbd8 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff fbd5 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff fbd2 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7ff fbcf 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80023f6:	20e1      	movs	r0, #225	; 0xe1
 80023f8:	f7ff fbbc 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7ff fbc9 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002402:	2015      	movs	r0, #21
 8002404:	f7ff fbc6 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002408:	2017      	movs	r0, #23
 800240a:	f7ff fbc3 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800240e:	2007      	movs	r0, #7
 8002410:	f7ff fbc0 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002414:	2011      	movs	r0, #17
 8002416:	f7ff fbbd 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800241a:	2006      	movs	r0, #6
 800241c:	f7ff fbba 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002420:	202b      	movs	r0, #43	; 0x2b
 8002422:	f7ff fbb7 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002426:	2056      	movs	r0, #86	; 0x56
 8002428:	f7ff fbb4 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800242c:	203c      	movs	r0, #60	; 0x3c
 800242e:	f7ff fbb1 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002432:	2005      	movs	r0, #5
 8002434:	f7ff fbae 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002438:	2010      	movs	r0, #16
 800243a:	f7ff fbab 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800243e:	200f      	movs	r0, #15
 8002440:	f7ff fba8 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002444:	203f      	movs	r0, #63	; 0x3f
 8002446:	f7ff fba5 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800244a:	203f      	movs	r0, #63	; 0x3f
 800244c:	f7ff fba2 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002450:	200f      	movs	r0, #15
 8002452:	f7ff fb9f 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002456:	202b      	movs	r0, #43	; 0x2b
 8002458:	f7ff fb8c 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800245c:	2000      	movs	r0, #0
 800245e:	f7ff fb99 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002462:	2000      	movs	r0, #0
 8002464:	f7ff fb96 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002468:	2001      	movs	r0, #1
 800246a:	f7ff fb93 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800246e:	203f      	movs	r0, #63	; 0x3f
 8002470:	f7ff fb90 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002474:	202a      	movs	r0, #42	; 0x2a
 8002476:	f7ff fb7d 	bl	8001b74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800247a:	2000      	movs	r0, #0
 800247c:	f7ff fb8a 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002480:	2000      	movs	r0, #0
 8002482:	f7ff fb87 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002486:	2000      	movs	r0, #0
 8002488:	f7ff fb84 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800248c:	20ef      	movs	r0, #239	; 0xef
 800248e:	f7ff fb81 	bl	8001b94 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002492:	2011      	movs	r0, #17
 8002494:	f7ff fb6e 	bl	8001b74 <LCD_WR_REG>
	HAL_Delay(120);
 8002498:	2078      	movs	r0, #120	; 0x78
 800249a:	f001 fe67 	bl	800416c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800249e:	2029      	movs	r0, #41	; 0x29
 80024a0:	f7ff fb68 	bl	8001b74 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024aa:	4804      	ldr	r0, [pc, #16]	; (80024bc <lcd_init+0x2bc>)
 80024ac:	f002 fe94 	bl	80051d8 <HAL_GPIO_WritePin>
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40020800 	.word	0x40020800
 80024b8:	2000025c 	.word	0x2000025c
 80024bc:	40020000 	.word	0x40020000

080024c0 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	b298      	uxth	r0, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	8b3a      	ldrh	r2, [r7, #24]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7ff fc29 	bl	8001d40 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	b298      	uxth	r0, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b29b      	uxth	r3, r3
 8002502:	4413      	add	r3, r2
 8002504:	b29b      	uxth	r3, r3
 8002506:	8b3a      	ldrh	r2, [r7, #24]
 8002508:	4619      	mov	r1, r3
 800250a:	f7ff fc19 	bl	8001d40 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	b29a      	uxth	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	b29b      	uxth	r3, r3
 8002516:	4413      	add	r3, r2
 8002518:	b298      	uxth	r0, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	b29a      	uxth	r2, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	b29b      	uxth	r3, r3
 8002526:	8b3a      	ldrh	r2, [r7, #24]
 8002528:	4619      	mov	r1, r3
 800252a:	f7ff fc09 	bl	8001d40 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	b29a      	uxth	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	b29b      	uxth	r3, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	b298      	uxth	r0, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	b29a      	uxth	r2, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	b29b      	uxth	r3, r3
 8002546:	8b3a      	ldrh	r2, [r7, #24]
 8002548:	4619      	mov	r1, r3
 800254a:	f7ff fbf9 	bl	8001d40 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	b29a      	uxth	r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4413      	add	r3, r2
 8002558:	b298      	uxth	r0, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	b29b      	uxth	r3, r3
 8002562:	4413      	add	r3, r2
 8002564:	b29b      	uxth	r3, r3
 8002566:	8b3a      	ldrh	r2, [r7, #24]
 8002568:	4619      	mov	r1, r3
 800256a:	f7ff fbe9 	bl	8001d40 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	b29a      	uxth	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	b298      	uxth	r0, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	b29b      	uxth	r3, r3
 8002582:	4413      	add	r3, r2
 8002584:	b29b      	uxth	r3, r3
 8002586:	8b3a      	ldrh	r2, [r7, #24]
 8002588:	4619      	mov	r1, r3
 800258a:	f7ff fbd9 	bl	8001d40 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	b29a      	uxth	r2, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	4413      	add	r3, r2
 8002598:	b298      	uxth	r0, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	8b3a      	ldrh	r2, [r7, #24]
 80025a8:	4619      	mov	r1, r3
 80025aa:	f7ff fbc9 	bl	8001d40 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	b298      	uxth	r0, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	8b3a      	ldrh	r2, [r7, #24]
 80025c8:	4619      	mov	r1, r3
 80025ca:	f7ff fbb9 	bl	8001d40 <lcd_DrawPoint>
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b08a      	sub	sp, #40	; 0x28
 80025da:	af02      	add	r7, sp, #8
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	f1c3 0303 	rsb	r3, r3, #3
 80025f6:	613b      	str	r3, [r7, #16]


	if (fill)
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d04f      	beq.n	800269e <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80025fe:	e029      	b.n	8002654 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e00a      	b.n	800261c <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff ff55 	bl	80024c0 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3301      	adds	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	429a      	cmp	r2, r3
 8002622:	ddf0      	ble.n	8002606 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	da06      	bge.n	8002638 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	009a      	lsls	r2, r3, #2
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	3306      	adds	r3, #6
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	e00a      	b.n	800264e <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	330a      	adds	r3, #10
 8002646:	613b      	str	r3, [r7, #16]
				y--;
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	3b01      	subs	r3, #1
 800264c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3301      	adds	r3, #1
 8002652:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	429a      	cmp	r2, r3
 800265a:	ddd1      	ble.n	8002600 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 800265c:	e023      	b.n	80026a6 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7ff ff29 	bl	80024c0 <_draw_circle_8>
			if (d < 0) {
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	da06      	bge.n	8002682 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	009a      	lsls	r2, r3, #2
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	3306      	adds	r3, #6
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	e00a      	b.n	8002698 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	009a      	lsls	r2, r3, #2
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	330a      	adds	r3, #10
 8002690:	613b      	str	r3, [r7, #16]
				y--;
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	3b01      	subs	r3, #1
 8002696:	61bb      	str	r3, [r7, #24]
			x++;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	3301      	adds	r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	dddb      	ble.n	800265e <lcd_DrawCircle+0x88>
}
 80026a6:	bf00      	nop
 80026a8:	3720      	adds	r7, #32
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b08b      	sub	sp, #44	; 0x2c
 80026b4:	af04      	add	r7, sp, #16
 80026b6:	60ba      	str	r2, [r7, #8]
 80026b8:	461a      	mov	r2, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	81fb      	strh	r3, [r7, #14]
 80026be:	460b      	mov	r3, r1
 80026c0:	81bb      	strh	r3, [r7, #12]
 80026c2:	4613      	mov	r3, r2
 80026c4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80026c6:	89fb      	ldrh	r3, [r7, #14]
 80026c8:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80026ce:	e048      	b.n	8002762 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d145      	bne.n	8002762 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80026d6:	89fa      	ldrh	r2, [r7, #14]
 80026d8:	4b26      	ldr	r3, [pc, #152]	; (8002774 <lcd_ShowStr+0xc4>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	1acb      	subs	r3, r1, r3
 80026e8:	429a      	cmp	r2, r3
 80026ea:	dc3f      	bgt.n	800276c <lcd_ShowStr+0xbc>
 80026ec:	89ba      	ldrh	r2, [r7, #12]
 80026ee:	4b21      	ldr	r3, [pc, #132]	; (8002774 <lcd_ShowStr+0xc4>)
 80026f0:	885b      	ldrh	r3, [r3, #2]
 80026f2:	4619      	mov	r1, r3
 80026f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80026f8:	1acb      	subs	r3, r1, r3
 80026fa:	429a      	cmp	r2, r3
 80026fc:	dc36      	bgt.n	800276c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b80      	cmp	r3, #128	; 0x80
 8002704:	d902      	bls.n	800270c <lcd_ShowStr+0x5c>
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
 800270a:	e02a      	b.n	8002762 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b0d      	cmp	r3, #13
 8002712:	d10b      	bne.n	800272c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002714:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002718:	b29a      	uxth	r2, r3
 800271a:	89bb      	ldrh	r3, [r7, #12]
 800271c:	4413      	add	r3, r2
 800271e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002720:	8abb      	ldrh	r3, [r7, #20]
 8002722:	81fb      	strh	r3, [r7, #14]
					str++;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3301      	adds	r3, #1
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	e017      	b.n	800275c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	88fc      	ldrh	r4, [r7, #6]
 8002732:	89b9      	ldrh	r1, [r7, #12]
 8002734:	89f8      	ldrh	r0, [r7, #14]
 8002736:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800273a:	9302      	str	r3, [sp, #8]
 800273c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	4623      	mov	r3, r4
 8002748:	f7ff fbcc 	bl	8001ee4 <lcd_ShowChar>
					x+=sizey/2;
 800274c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	b2db      	uxtb	r3, r3
 8002754:	b29a      	uxth	r2, r3
 8002756:	89fb      	ldrh	r3, [r7, #14]
 8002758:	4413      	add	r3, r2
 800275a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	3301      	adds	r3, #1
 8002760:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1b2      	bne.n	80026d0 <lcd_ShowStr+0x20>
 800276a:	e000      	b.n	800276e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800276c:	bf00      	nop
			}
		}
	}
}
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	bd90      	pop	{r4, r7, pc}
 8002774:	2000025c 	.word	0x2000025c

08002778 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af04      	add	r7, sp, #16
 800277e:	60ba      	str	r2, [r7, #8]
 8002780:	461a      	mov	r2, r3
 8002782:	4603      	mov	r3, r0
 8002784:	81fb      	strh	r3, [r7, #14]
 8002786:	460b      	mov	r3, r1
 8002788:	81bb      	strh	r3, [r7, #12]
 800278a:	4613      	mov	r3, r2
 800278c:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800278e:	68b8      	ldr	r0, [r7, #8]
 8002790:	f7fd fd1e 	bl	80001d0 <strlen>
 8002794:	4603      	mov	r3, r0
 8002796:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <lcd_StrCenter+0x60>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	8afb      	ldrh	r3, [r7, #22]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	0fda      	lsrs	r2, r3, #31
 80027a6:	4413      	add	r3, r2
 80027a8:	105b      	asrs	r3, r3, #1
 80027aa:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80027ac:	89fa      	ldrh	r2, [r7, #14]
 80027ae:	8abb      	ldrh	r3, [r7, #20]
 80027b0:	4413      	add	r3, r2
 80027b2:	b298      	uxth	r0, r3
 80027b4:	88fa      	ldrh	r2, [r7, #6]
 80027b6:	89b9      	ldrh	r1, [r7, #12]
 80027b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	8c3b      	ldrh	r3, [r7, #32]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	f7ff ff70 	bl	80026b0 <lcd_ShowStr>
}
 80027d0:	bf00      	nop
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	2000025c 	.word	0x2000025c

080027dc <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80027e0:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <led7_Scan+0x104>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <led7_Scan+0x104>)
 80027ea:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80027ec:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <led7_Scan+0x108>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3d      	ldr	r2, [pc, #244]	; (80028e8 <led7_Scan+0x10c>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	4b39      	ldr	r3, [pc, #228]	; (80028e0 <led7_Scan+0x104>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	4313      	orrs	r3, r2
 8002800:	b21b      	sxth	r3, r3
 8002802:	b29a      	uxth	r2, r3
 8002804:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <led7_Scan+0x104>)
 8002806:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002808:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <led7_Scan+0x108>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d847      	bhi.n	80028a0 <led7_Scan+0xc4>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <led7_Scan+0x3c>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	08002829 	.word	0x08002829
 800281c:	08002847 	.word	0x08002847
 8002820:	08002865 	.word	0x08002865
 8002824:	08002883 	.word	0x08002883
	case 0:
		spi_buffer |= 0x00b0;
 8002828:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <led7_Scan+0x104>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002830:	b29a      	uxth	r2, r3
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <led7_Scan+0x104>)
 8002834:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <led7_Scan+0x104>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <led7_Scan+0x104>)
 8002842:	801a      	strh	r2, [r3, #0]
		break;
 8002844:	e02d      	b.n	80028a2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <led7_Scan+0x104>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <led7_Scan+0x104>)
 8002852:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <led7_Scan+0x104>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	f023 0320 	bic.w	r3, r3, #32
 800285c:	b29a      	uxth	r2, r3
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <led7_Scan+0x104>)
 8002860:	801a      	strh	r2, [r3, #0]
		break;
 8002862:	e01e      	b.n	80028a2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002864:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <led7_Scan+0x104>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800286c:	b29a      	uxth	r2, r3
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <led7_Scan+0x104>)
 8002870:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <led7_Scan+0x104>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	f023 0310 	bic.w	r3, r3, #16
 800287a:	b29a      	uxth	r2, r3
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <led7_Scan+0x104>)
 800287e:	801a      	strh	r2, [r3, #0]
		break;
 8002880:	e00f      	b.n	80028a2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002882:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <led7_Scan+0x104>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800288a:	b29a      	uxth	r2, r3
 800288c:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <led7_Scan+0x104>)
 800288e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <led7_Scan+0x104>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002898:	b29a      	uxth	r2, r3
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <led7_Scan+0x104>)
 800289c:	801a      	strh	r2, [r3, #0]
		break;
 800289e:	e000      	b.n	80028a2 <led7_Scan+0xc6>
	default:
		break;
 80028a0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <led7_Scan+0x108>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	425a      	negs	r2, r3
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	f002 0203 	and.w	r2, r2, #3
 80028b2:	bf58      	it	pl
 80028b4:	4253      	negpl	r3, r2
 80028b6:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <led7_Scan+0x108>)
 80028b8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2140      	movs	r1, #64	; 0x40
 80028be:	480b      	ldr	r0, [pc, #44]	; (80028ec <led7_Scan+0x110>)
 80028c0:	f002 fc8a 	bl	80051d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80028c4:	2301      	movs	r3, #1
 80028c6:	2202      	movs	r2, #2
 80028c8:	4905      	ldr	r1, [pc, #20]	; (80028e0 <led7_Scan+0x104>)
 80028ca:	4809      	ldr	r0, [pc, #36]	; (80028f0 <led7_Scan+0x114>)
 80028cc:	f004 f947 	bl	8006b5e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80028d0:	2201      	movs	r2, #1
 80028d2:	2140      	movs	r1, #64	; 0x40
 80028d4:	4805      	ldr	r0, [pc, #20]	; (80028ec <led7_Scan+0x110>)
 80028d6:	f002 fc7f 	bl	80051d8 <HAL_GPIO_WritePin>
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000010 	.word	0x20000010
 80028e4:	200000f8 	.word	0x200000f8
 80028e8:	2000000c 	.word	0x2000000c
 80028ec:	40021800 	.word	0x40021800
 80028f0:	20000298 	.word	0x20000298

080028f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028f8:	f001 fbc6 	bl	8004088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028fc:	f000 f894 	bl	8002a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002900:	f7fe ffac 	bl	800185c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002904:	f000 fb88 	bl	8003018 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002908:	f000 f97a 	bl	8002c00 <MX_SPI1_Init>
  MX_FSMC_Init();
 800290c:	f7fe fd3c 	bl	8001388 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002910:	f7ff f8ba 	bl	8001a88 <MX_I2C1_Init>
  MX_TIM13_Init();
 8002914:	f000 fbcc 	bl	80030b0 <MX_TIM13_Init>
  MX_DMA_Init();
 8002918:	f7fe fc86 	bl	8001228 <MX_DMA_Init>
  MX_ADC1_Init();
 800291c:	f7fe fab8 	bl	8000e90 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002920:	f000 fb2a 	bl	8002f78 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002924:	f000 f8ea 	bl	8002afc <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  touch_Adjust();
 lcd_Clear(BLACK);
 8002928:	2000      	movs	r0, #0
 800292a:	f7ff f9a1 	bl	8001c70 <lcd_Clear>
    
 while (1)
  {
	  //scan touch screen
	  touch_Scan();
 800292e:	f001 fb4d 	bl	8003fcc <touch_Scan>
	  //check if touch screen is touched
	  if(touch_IsTouched() && game_status == GAME_START){
 8002932:	f001 fb55 	bl	8003fe0 <touch_IsTouched>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d064      	beq.n	8002a06 <main+0x112>
 800293c:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <main+0x128>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d160      	bne.n	8002a06 <main+0x112>
            //draw a point at the touch position
      if (touch_GetX() > 50 && touch_GetX() < 90 && touch_GetY() > 250 && touch_GetY() < 290) {
 8002944:	f001 fb5e 	bl	8004004 <touch_GetX>
 8002948:	4603      	mov	r3, r0
 800294a:	2b32      	cmp	r3, #50	; 0x32
 800294c:	d912      	bls.n	8002974 <main+0x80>
 800294e:	f001 fb59 	bl	8004004 <touch_GetX>
 8002952:	4603      	mov	r3, r0
 8002954:	2b59      	cmp	r3, #89	; 0x59
 8002956:	d80d      	bhi.n	8002974 <main+0x80>
 8002958:	f001 fb60 	bl	800401c <touch_GetY>
 800295c:	4603      	mov	r3, r0
 800295e:	2bfa      	cmp	r3, #250	; 0xfa
 8002960:	d908      	bls.n	8002974 <main+0x80>
 8002962:	f001 fb5b 	bl	800401c <touch_GetY>
 8002966:	4603      	mov	r3, r0
 8002968:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800296c:	d202      	bcs.n	8002974 <main+0x80>
          snake_direction = LEFT;
 800296e:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <main+0x12c>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]
      }

      if (touch_GetX() > 100 && touch_GetX() < 140 && touch_GetY() > 230 && touch_GetY() < 270) {
 8002974:	f001 fb46 	bl	8004004 <touch_GetX>
 8002978:	4603      	mov	r3, r0
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d912      	bls.n	80029a4 <main+0xb0>
 800297e:	f001 fb41 	bl	8004004 <touch_GetX>
 8002982:	4603      	mov	r3, r0
 8002984:	2b8b      	cmp	r3, #139	; 0x8b
 8002986:	d80d      	bhi.n	80029a4 <main+0xb0>
 8002988:	f001 fb48 	bl	800401c <touch_GetY>
 800298c:	4603      	mov	r3, r0
 800298e:	2be6      	cmp	r3, #230	; 0xe6
 8002990:	d908      	bls.n	80029a4 <main+0xb0>
 8002992:	f001 fb43 	bl	800401c <touch_GetY>
 8002996:	4603      	mov	r3, r0
 8002998:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800299c:	d202      	bcs.n	80029a4 <main+0xb0>
          snake_direction = UP;
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <main+0x12c>)
 80029a0:	2202      	movs	r2, #2
 80029a2:	601a      	str	r2, [r3, #0]
      }

      if (touch_GetX() > 100 && touch_GetX() < 140 && touch_GetY() > 280 && touch_GetY() < 320) {
 80029a4:	f001 fb2e 	bl	8004004 <touch_GetX>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d913      	bls.n	80029d6 <main+0xe2>
 80029ae:	f001 fb29 	bl	8004004 <touch_GetX>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b8b      	cmp	r3, #139	; 0x8b
 80029b6:	d80e      	bhi.n	80029d6 <main+0xe2>
 80029b8:	f001 fb30 	bl	800401c <touch_GetY>
 80029bc:	4603      	mov	r3, r0
 80029be:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80029c2:	d908      	bls.n	80029d6 <main+0xe2>
 80029c4:	f001 fb2a 	bl	800401c <touch_GetY>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80029ce:	d202      	bcs.n	80029d6 <main+0xe2>
          snake_direction = DOWN;
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <main+0x12c>)
 80029d2:	2204      	movs	r2, #4
 80029d4:	601a      	str	r2, [r3, #0]
      }

      if (touch_GetX() > 150 && touch_GetX() < 190 && touch_GetY() > 250 && touch_GetY() < 290) {
 80029d6:	f001 fb15 	bl	8004004 <touch_GetX>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b96      	cmp	r3, #150	; 0x96
 80029de:	d912      	bls.n	8002a06 <main+0x112>
 80029e0:	f001 fb10 	bl	8004004 <touch_GetX>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2bbd      	cmp	r3, #189	; 0xbd
 80029e8:	d80d      	bhi.n	8002a06 <main+0x112>
 80029ea:	f001 fb17 	bl	800401c <touch_GetY>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2bfa      	cmp	r3, #250	; 0xfa
 80029f2:	d908      	bls.n	8002a06 <main+0x112>
 80029f4:	f001 fb12 	bl	800401c <touch_GetY>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80029fe:	d202      	bcs.n	8002a06 <main+0x112>
          snake_direction = RIGHT;
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <main+0x12c>)
 8002a02:	2203      	movs	r2, #3
 8002a04:	601a      	str	r2, [r3, #0]
      }
	  }
	  // 50ms task
	  if(flag_timer2 == 1){
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <main+0x130>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d18f      	bne.n	800292e <main+0x3a>
		  flag_timer2 = 0;
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <main+0x130>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	801a      	strh	r2, [r3, #0]
		  // touchProcess();
      fsm();
 8002a14:	f7fe fc28 	bl	8001268 <fsm>
	  touch_Scan();
 8002a18:	e789      	b.n	800292e <main+0x3a>
 8002a1a:	bf00      	nop
 8002a1c:	200000e0 	.word	0x200000e0
 8002a20:	20000008 	.word	0x20000008
 8002a24:	200000fc 	.word	0x200000fc

08002a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b094      	sub	sp, #80	; 0x50
 8002a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a2e:	f107 0320 	add.w	r3, r7, #32
 8002a32:	2230      	movs	r2, #48	; 0x30
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f005 fb8c 	bl	8008154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	4b28      	ldr	r3, [pc, #160]	; (8002af4 <SystemClock_Config+0xcc>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a27      	ldr	r2, [pc, #156]	; (8002af4 <SystemClock_Config+0xcc>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <SystemClock_Config+0xcc>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <SystemClock_Config+0xd0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <SystemClock_Config+0xd0>)
 8002a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <SystemClock_Config+0xd0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a84:	2302      	movs	r3, #2
 8002a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a90:	2302      	movs	r3, #2
 8002a92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a94:	2300      	movs	r3, #0
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a98:	2308      	movs	r3, #8
 8002a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a9c:	23a8      	movs	r3, #168	; 0xa8
 8002a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa8:	f107 0320 	add.w	r3, r7, #32
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 fb6d 	bl	800618c <HAL_RCC_OscConfig>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ab8:	f000 f82f 	bl	8002b1a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002abc:	230f      	movs	r3, #15
 8002abe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ac8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002acc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002ace:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ad2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	2105      	movs	r1, #5
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 fdce 	bl	800667c <HAL_RCC_ClockConfig>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ae6:	f000 f818 	bl	8002b1a <Error_Handler>
  }
}
 8002aea:	bf00      	nop
 8002aec:	3750      	adds	r7, #80	; 0x50
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40007000 	.word	0x40007000

08002afc <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	  timer_init();
 8002b00:	f000 f810 	bl	8002b24 <timer_init>
	  button_init();
 8002b04:	f7fe fb84 	bl	8001210 <button_init>
	  lcd_init();
 8002b08:	f7ff fb7a 	bl	8002200 <lcd_init>
	  touch_init();
 8002b0c:	f001 fa4e 	bl	8003fac <touch_init>
	  setTimer2(50);
 8002b10:	2032      	movs	r0, #50	; 0x32
 8002b12:	f000 f815 	bl	8002b40 <setTimer2>
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b1e:	b672      	cpsid	i
}
 8002b20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <Error_Handler+0x8>

08002b24 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002b28:	4803      	ldr	r0, [pc, #12]	; (8002b38 <timer_init+0x14>)
 8002b2a:	f004 fb1b 	bl	8007164 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002b2e:	4803      	ldr	r0, [pc, #12]	; (8002b3c <timer_init+0x18>)
 8002b30:	f004 fab0 	bl	8007094 <HAL_TIM_Base_Start>
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000380 	.word	0x20000380
 8002b3c:	20000338 	.word	0x20000338

08002b40 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <setTimer2+0x2c>)
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <setTimer2+0x2c>)
 8002b52:	881a      	ldrh	r2, [r3, #0]
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <setTimer2+0x30>)
 8002b56:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <setTimer2+0x34>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	801a      	strh	r2, [r3, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000100 	.word	0x20000100
 8002b70:	200000fe 	.word	0x200000fe
 8002b74:	200000fc 	.word	0x200000fc

08002b78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b88:	d116      	bne.n	8002bb8 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d010      	beq.n	8002bb4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b9c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002bae:	881a      	ldrh	r2, [r3, #0]
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002bb2:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002bb4:	f7ff fe12 	bl	80027dc <led7_Scan>
	}
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	200000fe 	.word	0x200000fe
 8002bc4:	200000fc 	.word	0x200000fc
 8002bc8:	20000100 	.word	0x20000100

08002bcc <delay_us>:

void delay_us (uint16_t us)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <delay_us+0x30>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002bde:	bf00      	nop
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <delay_us+0x30>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d3f9      	bcc.n	8002be0 <delay_us+0x14>
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20000338 	.word	0x20000338

08002c00 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <MX_SPI1_Init+0x68>)
 8002c08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c0a:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c12:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c44:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c4c:	220a      	movs	r2, #10
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c50:	4804      	ldr	r0, [pc, #16]	; (8002c64 <MX_SPI1_Init+0x64>)
 8002c52:	f003 fefb 	bl	8006a4c <HAL_SPI_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c5c:	f7ff ff5d 	bl	8002b1a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000298 	.word	0x20000298
 8002c68:	40013000 	.word	0x40013000

08002c6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	; 0x28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <HAL_SPI_MspInit+0x84>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d12b      	bne.n	8002ce6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_SPI_MspInit+0x88>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <HAL_SPI_MspInit+0x88>)
 8002c98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_SPI_MspInit+0x88>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <HAL_SPI_MspInit+0x88>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <HAL_SPI_MspInit+0x88>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_SPI_MspInit+0x88>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002cc6:	2338      	movs	r3, #56	; 0x38
 8002cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cd6:	2305      	movs	r3, #5
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <HAL_SPI_MspInit+0x8c>)
 8002ce2:	f002 f8c5 	bl	8004e70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	3728      	adds	r7, #40	; 0x28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40013000 	.word	0x40013000
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40020400 	.word	0x40020400

08002cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_MspInit+0x4c>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	4a0f      	ldr	r2, [pc, #60]	; (8002d48 <HAL_MspInit+0x4c>)
 8002d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d10:	6453      	str	r3, [r2, #68]	; 0x44
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_MspInit+0x4c>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_MspInit+0x4c>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <HAL_MspInit+0x4c>)
 8002d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_MspInit+0x4c>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800

08002d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <NMI_Handler+0x4>

08002d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d56:	e7fe      	b.n	8002d56 <HardFault_Handler+0x4>

08002d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <MemManage_Handler+0x4>

08002d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <BusFault_Handler+0x4>

08002d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <UsageFault_Handler+0x4>

08002d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d98:	f001 f9c8 	bl	800412c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <TIM2_IRQHandler+0x10>)
 8002da6:	f004 faa6 	bl	80072f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000380 	.word	0x20000380

08002db4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <DMA2_Stream0_IRQHandler+0x10>)
 8002dba:	f001 fe1d 	bl	80049f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000158 	.word	0x20000158

08002dc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
	return 1;
 8002dcc:	2301      	movs	r3, #1
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_kill>:

int _kill(int pid, int sig)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002de2:	f005 f98d 	bl	8008100 <__errno>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2216      	movs	r2, #22
 8002dea:	601a      	str	r2, [r3, #0]
	return -1;
 8002dec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <_exit>:

void _exit (int status)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ffe7 	bl	8002dd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e0a:	e7fe      	b.n	8002e0a <_exit+0x12>

08002e0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e00a      	b.n	8002e34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e1e:	f3af 8000 	nop.w
 8002e22:	4601      	mov	r1, r0
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	60ba      	str	r2, [r7, #8]
 8002e2a:	b2ca      	uxtb	r2, r1
 8002e2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3301      	adds	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	dbf0      	blt.n	8002e1e <_read+0x12>
	}

return len;
 8002e3c:	687b      	ldr	r3, [r7, #4]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e009      	b.n	8002e6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	60ba      	str	r2, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	dbf1      	blt.n	8002e58 <_write+0x12>
	}
	return len;
 8002e74:	687b      	ldr	r3, [r7, #4]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <_close>:

int _close(int file)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
	return -1;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ea6:	605a      	str	r2, [r3, #4]
	return 0;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <_isatty>:

int _isatty(int file)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
	return 1;
 8002ebe:	2301      	movs	r3, #1
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
	return 0;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ef0:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <_sbrk+0x5c>)
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <_sbrk+0x60>)
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002efc:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <_sbrk+0x64>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <_sbrk+0x64>)
 8002f06:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <_sbrk+0x68>)
 8002f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <_sbrk+0x64>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d207      	bcs.n	8002f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f18:	f005 f8f2 	bl	8008100 <__errno>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	220c      	movs	r2, #12
 8002f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	e009      	b.n	8002f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <_sbrk+0x64>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <_sbrk+0x64>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	4a05      	ldr	r2, [pc, #20]	; (8002f4c <_sbrk+0x64>)
 8002f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20020000 	.word	0x20020000
 8002f48:	00000400 	.word	0x00000400
 8002f4c:	20000104 	.word	0x20000104
 8002f50:	200003e0 	.word	0x200003e0

08002f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <SystemInit+0x20>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <SystemInit+0x20>)
 8002f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f7e:	f107 0308 	add.w	r3, r7, #8
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	609a      	str	r2, [r3, #8]
 8002f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f8c:	463b      	mov	r3, r7
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f94:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <MX_TIM1_Init+0x98>)
 8002f96:	4a1f      	ldr	r2, [pc, #124]	; (8003014 <MX_TIM1_Init+0x9c>)
 8002f98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <MX_TIM1_Init+0x98>)
 8002f9c:	2253      	movs	r2, #83	; 0x53
 8002f9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <MX_TIM1_Init+0x98>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <MX_TIM1_Init+0x98>)
 8002fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fae:	4b18      	ldr	r3, [pc, #96]	; (8003010 <MX_TIM1_Init+0x98>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fb4:	4b16      	ldr	r3, [pc, #88]	; (8003010 <MX_TIM1_Init+0x98>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <MX_TIM1_Init+0x98>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fc0:	4813      	ldr	r0, [pc, #76]	; (8003010 <MX_TIM1_Init+0x98>)
 8002fc2:	f004 f817 	bl	8006ff4 <HAL_TIM_Base_Init>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002fcc:	f7ff fda5 	bl	8002b1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fd6:	f107 0308 	add.w	r3, r7, #8
 8002fda:	4619      	mov	r1, r3
 8002fdc:	480c      	ldr	r0, [pc, #48]	; (8003010 <MX_TIM1_Init+0x98>)
 8002fde:	f004 fb55 	bl	800768c <HAL_TIM_ConfigClockSource>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002fe8:	f7ff fd97 	bl	8002b1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ff4:	463b      	mov	r3, r7
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4805      	ldr	r0, [pc, #20]	; (8003010 <MX_TIM1_Init+0x98>)
 8002ffa:	f004 ff21 	bl	8007e40 <HAL_TIMEx_MasterConfigSynchronization>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003004:	f7ff fd89 	bl	8002b1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003008:	bf00      	nop
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000338 	.word	0x20000338
 8003014:	40010000 	.word	0x40010000

08003018 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800301e:	f107 0308 	add.w	r3, r7, #8
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800302c:	463b      	mov	r3, r7
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <MX_TIM2_Init+0x94>)
 8003036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800303a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <MX_TIM2_Init+0x94>)
 800303e:	f240 3247 	movw	r2, #839	; 0x347
 8003042:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <MX_TIM2_Init+0x94>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800304a:	4b18      	ldr	r3, [pc, #96]	; (80030ac <MX_TIM2_Init+0x94>)
 800304c:	2263      	movs	r2, #99	; 0x63
 800304e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003050:	4b16      	ldr	r3, [pc, #88]	; (80030ac <MX_TIM2_Init+0x94>)
 8003052:	2200      	movs	r2, #0
 8003054:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <MX_TIM2_Init+0x94>)
 8003058:	2200      	movs	r2, #0
 800305a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800305c:	4813      	ldr	r0, [pc, #76]	; (80030ac <MX_TIM2_Init+0x94>)
 800305e:	f003 ffc9 	bl	8006ff4 <HAL_TIM_Base_Init>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003068:	f7ff fd57 	bl	8002b1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800306c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003070:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003072:	f107 0308 	add.w	r3, r7, #8
 8003076:	4619      	mov	r1, r3
 8003078:	480c      	ldr	r0, [pc, #48]	; (80030ac <MX_TIM2_Init+0x94>)
 800307a:	f004 fb07 	bl	800768c <HAL_TIM_ConfigClockSource>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003084:	f7ff fd49 	bl	8002b1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003088:	2300      	movs	r3, #0
 800308a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800308c:	2300      	movs	r3, #0
 800308e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003090:	463b      	mov	r3, r7
 8003092:	4619      	mov	r1, r3
 8003094:	4805      	ldr	r0, [pc, #20]	; (80030ac <MX_TIM2_Init+0x94>)
 8003096:	f004 fed3 	bl	8007e40 <HAL_TIMEx_MasterConfigSynchronization>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80030a0:	f7ff fd3b 	bl	8002b1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030a4:	bf00      	nop
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000380 	.word	0x20000380

080030b0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
 80030c4:	615a      	str	r2, [r3, #20]
 80030c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80030c8:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <MX_TIM13_Init+0x94>)
 80030ca:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <MX_TIM13_Init+0x98>)
 80030cc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <MX_TIM13_Init+0x94>)
 80030d0:	f240 3247 	movw	r2, #839	; 0x347
 80030d4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d6:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <MX_TIM13_Init+0x94>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <MX_TIM13_Init+0x94>)
 80030de:	2263      	movs	r2, #99	; 0x63
 80030e0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e2:	4b18      	ldr	r3, [pc, #96]	; (8003144 <MX_TIM13_Init+0x94>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030e8:	4b16      	ldr	r3, [pc, #88]	; (8003144 <MX_TIM13_Init+0x94>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80030ee:	4815      	ldr	r0, [pc, #84]	; (8003144 <MX_TIM13_Init+0x94>)
 80030f0:	f003 ff80 	bl	8006ff4 <HAL_TIM_Base_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80030fa:	f7ff fd0e 	bl	8002b1a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80030fe:	4811      	ldr	r0, [pc, #68]	; (8003144 <MX_TIM13_Init+0x94>)
 8003100:	f004 f8a0 	bl	8007244 <HAL_TIM_PWM_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800310a:	f7ff fd06 	bl	8002b1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800310e:	2360      	movs	r3, #96	; 0x60
 8003110:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	2200      	movs	r2, #0
 8003122:	4619      	mov	r1, r3
 8003124:	4807      	ldr	r0, [pc, #28]	; (8003144 <MX_TIM13_Init+0x94>)
 8003126:	f004 f9ef 	bl	8007508 <HAL_TIM_PWM_ConfigChannel>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003130:	f7ff fcf3 	bl	8002b1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003134:	4803      	ldr	r0, [pc, #12]	; (8003144 <MX_TIM13_Init+0x94>)
 8003136:	f000 f85b 	bl	80031f0 <HAL_TIM_MspPostInit>

}
 800313a:	bf00      	nop
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200002f0 	.word	0x200002f0
 8003148:	40001c00 	.word	0x40001c00

0800314c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <HAL_TIM_Base_MspInit+0x98>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d10e      	bne.n	800317c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <HAL_TIM_Base_MspInit+0x9c>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	4a20      	ldr	r2, [pc, #128]	; (80031e8 <HAL_TIM_Base_MspInit+0x9c>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6453      	str	r3, [r2, #68]	; 0x44
 800316e:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <HAL_TIM_Base_MspInit+0x9c>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800317a:	e02e      	b.n	80031da <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d116      	bne.n	80031b4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <HAL_TIM_Base_MspInit+0x9c>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <HAL_TIM_Base_MspInit+0x9c>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_TIM_Base_MspInit+0x9c>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	201c      	movs	r0, #28
 80031a8:	f001 fb41 	bl	800482e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031ac:	201c      	movs	r0, #28
 80031ae:	f001 fb5a 	bl	8004866 <HAL_NVIC_EnableIRQ>
}
 80031b2:	e012      	b.n	80031da <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0c      	ldr	r2, [pc, #48]	; (80031ec <HAL_TIM_Base_MspInit+0xa0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d10d      	bne.n	80031da <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_TIM_Base_MspInit+0x9c>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <HAL_TIM_Base_MspInit+0x9c>)
 80031c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_TIM_Base_MspInit+0x9c>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40010000 	.word	0x40010000
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40001c00 	.word	0x40001c00

080031f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a12      	ldr	r2, [pc, #72]	; (8003258 <HAL_TIM_MspPostInit+0x68>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d11e      	bne.n	8003250 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_TIM_MspPostInit+0x6c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_TIM_MspPostInit+0x6c>)
 800321c:	f043 0320 	orr.w	r3, r3, #32
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_TIM_MspPostInit+0x6c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800322e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003232:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003240:	2309      	movs	r3, #9
 8003242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003244:	f107 030c 	add.w	r3, r7, #12
 8003248:	4619      	mov	r1, r3
 800324a:	4805      	ldr	r0, [pc, #20]	; (8003260 <HAL_TIM_MspPostInit+0x70>)
 800324c:	f001 fe10 	bl	8004e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003250:	bf00      	nop
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40001c00 	.word	0x40001c00
 800325c:	40023800 	.word	0x40023800
 8003260:	40021400 	.word	0x40021400

08003264 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8003272:	2300      	movs	r3, #0
 8003274:	73fb      	strb	r3, [r7, #15]
 8003276:	e025      	b.n	80032c4 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8003278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327c:	2b00      	cmp	r3, #0
 800327e:	da06      	bge.n	800328e <TP_Write_Byte+0x2a>
 8003280:	2201      	movs	r2, #1
 8003282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003286:	4813      	ldr	r0, [pc, #76]	; (80032d4 <TP_Write_Byte+0x70>)
 8003288:	f001 ffa6 	bl	80051d8 <HAL_GPIO_WritePin>
 800328c:	e005      	b.n	800329a <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003294:	480f      	ldr	r0, [pc, #60]	; (80032d4 <TP_Write_Byte+0x70>)
 8003296:	f001 ff9f 	bl	80051d8 <HAL_GPIO_WritePin>
		num<<=1;
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80032a0:	2200      	movs	r2, #0
 80032a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032a6:	480c      	ldr	r0, [pc, #48]	; (80032d8 <TP_Write_Byte+0x74>)
 80032a8:	f001 ff96 	bl	80051d8 <HAL_GPIO_WritePin>
		delay_us(1);
 80032ac:	2001      	movs	r0, #1
 80032ae:	f7ff fc8d 	bl	8002bcc <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80032b2:	2201      	movs	r2, #1
 80032b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032b8:	4807      	ldr	r0, [pc, #28]	; (80032d8 <TP_Write_Byte+0x74>)
 80032ba:	f001 ff8d 	bl	80051d8 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	3301      	adds	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b07      	cmp	r3, #7
 80032c8:	d9d6      	bls.n	8003278 <TP_Write_Byte+0x14>
	}
}
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40020800 	.word	0x40020800
 80032d8:	40021800 	.word	0x40021800

080032dc <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80032ee:	2200      	movs	r2, #0
 80032f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032f4:	482f      	ldr	r0, [pc, #188]	; (80033b4 <TP_Read_AD+0xd8>)
 80032f6:	f001 ff6f 	bl	80051d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003300:	482d      	ldr	r0, [pc, #180]	; (80033b8 <TP_Read_AD+0xdc>)
 8003302:	f001 ff69 	bl	80051d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8003306:	2200      	movs	r2, #0
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	482a      	ldr	r0, [pc, #168]	; (80033b4 <TP_Read_AD+0xd8>)
 800330c:	f001 ff64 	bl	80051d8 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff ffa6 	bl	8003264 <TP_Write_Byte>
	delay_us(6);
 8003318:	2006      	movs	r0, #6
 800331a:	f7ff fc57 	bl	8002bcc <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800331e:	2200      	movs	r2, #0
 8003320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003324:	4823      	ldr	r0, [pc, #140]	; (80033b4 <TP_Read_AD+0xd8>)
 8003326:	f001 ff57 	bl	80051d8 <HAL_GPIO_WritePin>
	delay_us(1);
 800332a:	2001      	movs	r0, #1
 800332c:	f7ff fc4e 	bl	8002bcc <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003330:	2201      	movs	r2, #1
 8003332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003336:	481f      	ldr	r0, [pc, #124]	; (80033b4 <TP_Read_AD+0xd8>)
 8003338:	f001 ff4e 	bl	80051d8 <HAL_GPIO_WritePin>
	delay_us(1);
 800333c:	2001      	movs	r0, #1
 800333e:	f7ff fc45 	bl	8002bcc <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003348:	481a      	ldr	r0, [pc, #104]	; (80033b4 <TP_Read_AD+0xd8>)
 800334a:	f001 ff45 	bl	80051d8 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
 8003352:	e01f      	b.n	8003394 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8003354:	89bb      	ldrh	r3, [r7, #12]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800335a:	2200      	movs	r2, #0
 800335c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003360:	4814      	ldr	r0, [pc, #80]	; (80033b4 <TP_Read_AD+0xd8>)
 8003362:	f001 ff39 	bl	80051d8 <HAL_GPIO_WritePin>
		delay_us(1);
 8003366:	2001      	movs	r0, #1
 8003368:	f7ff fc30 	bl	8002bcc <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800336c:	2201      	movs	r2, #1
 800336e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003372:	4810      	ldr	r0, [pc, #64]	; (80033b4 <TP_Read_AD+0xd8>)
 8003374:	f001 ff30 	bl	80051d8 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8003378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800337c:	480e      	ldr	r0, [pc, #56]	; (80033b8 <TP_Read_AD+0xdc>)
 800337e:	f001 ff13 	bl	80051a8 <HAL_GPIO_ReadPin>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <TP_Read_AD+0xb2>
 8003388:	89bb      	ldrh	r3, [r7, #12]
 800338a:	3301      	adds	r3, #1
 800338c:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	3301      	adds	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b0f      	cmp	r3, #15
 8003398:	d9dc      	bls.n	8003354 <TP_Read_AD+0x78>
	}
	Num>>=4;
 800339a:	89bb      	ldrh	r3, [r7, #12]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 80033a0:	2201      	movs	r2, #1
 80033a2:	2180      	movs	r1, #128	; 0x80
 80033a4:	4803      	ldr	r0, [pc, #12]	; (80033b4 <TP_Read_AD+0xd8>)
 80033a6:	f001 ff17 	bl	80051d8 <HAL_GPIO_WritePin>
	return(Num);
 80033aa:	89bb      	ldrh	r3, [r7, #12]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021800 	.word	0x40021800
 80033b8:	40020800 	.word	0x40020800

080033bc <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 80033ca:	2300      	movs	r3, #0
 80033cc:	83fb      	strh	r3, [r7, #30]
 80033ce:	e00f      	b.n	80033f0 <TP_Read_XOY+0x34>
 80033d0:	8bfc      	ldrh	r4, [r7, #30]
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff81 	bl	80032dc <TP_Read_AD>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	0063      	lsls	r3, r4, #1
 80033e0:	f107 0120 	add.w	r1, r7, #32
 80033e4:	440b      	add	r3, r1
 80033e6:	f823 2c14 	strh.w	r2, [r3, #-20]
 80033ea:	8bfb      	ldrh	r3, [r7, #30]
 80033ec:	3301      	adds	r3, #1
 80033ee:	83fb      	strh	r3, [r7, #30]
 80033f0:	8bfb      	ldrh	r3, [r7, #30]
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d9ec      	bls.n	80033d0 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	83fb      	strh	r3, [r7, #30]
 80033fa:	e03b      	b.n	8003474 <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 80033fc:	8bfb      	ldrh	r3, [r7, #30]
 80033fe:	3301      	adds	r3, #1
 8003400:	83bb      	strh	r3, [r7, #28]
 8003402:	e031      	b.n	8003468 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8003404:	8bfb      	ldrh	r3, [r7, #30]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	f107 0220 	add.w	r2, r7, #32
 800340c:	4413      	add	r3, r2
 800340e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003412:	8bbb      	ldrh	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	f107 0120 	add.w	r1, r7, #32
 800341a:	440b      	add	r3, r1
 800341c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003420:	429a      	cmp	r2, r3
 8003422:	d91e      	bls.n	8003462 <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8003424:	8bfb      	ldrh	r3, [r7, #30]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	f107 0220 	add.w	r2, r7, #32
 800342c:	4413      	add	r3, r2
 800342e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003432:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8003434:	8bbb      	ldrh	r3, [r7, #28]
 8003436:	8bfa      	ldrh	r2, [r7, #30]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	f107 0120 	add.w	r1, r7, #32
 800343e:	440b      	add	r3, r1
 8003440:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8003444:	0053      	lsls	r3, r2, #1
 8003446:	f107 0220 	add.w	r2, r7, #32
 800344a:	4413      	add	r3, r2
 800344c:	460a      	mov	r2, r1
 800344e:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8003452:	8bbb      	ldrh	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	f107 0220 	add.w	r2, r7, #32
 800345a:	4413      	add	r3, r2
 800345c:	8b3a      	ldrh	r2, [r7, #24]
 800345e:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8003462:	8bbb      	ldrh	r3, [r7, #28]
 8003464:	3301      	adds	r3, #1
 8003466:	83bb      	strh	r3, [r7, #28]
 8003468:	8bbb      	ldrh	r3, [r7, #28]
 800346a:	2b04      	cmp	r3, #4
 800346c:	d9ca      	bls.n	8003404 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 800346e:	8bfb      	ldrh	r3, [r7, #30]
 8003470:	3301      	adds	r3, #1
 8003472:	83fb      	strh	r3, [r7, #30]
 8003474:	8bfb      	ldrh	r3, [r7, #30]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d9c0      	bls.n	80033fc <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 800347a:	2300      	movs	r3, #0
 800347c:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 800347e:	2301      	movs	r3, #1
 8003480:	83fb      	strh	r3, [r7, #30]
 8003482:	e00c      	b.n	800349e <TP_Read_XOY+0xe2>
 8003484:	8bfb      	ldrh	r3, [r7, #30]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	f107 0220 	add.w	r2, r7, #32
 800348c:	4413      	add	r3, r2
 800348e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003492:	8b7b      	ldrh	r3, [r7, #26]
 8003494:	4413      	add	r3, r2
 8003496:	837b      	strh	r3, [r7, #26]
 8003498:	8bfb      	ldrh	r3, [r7, #30]
 800349a:	3301      	adds	r3, #1
 800349c:	83fb      	strh	r3, [r7, #30]
 800349e:	8bfb      	ldrh	r3, [r7, #30]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d9ef      	bls.n	8003484 <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 80034a4:	8b7b      	ldrh	r3, [r7, #26]
 80034a6:	4a05      	ldr	r2, [pc, #20]	; (80034bc <TP_Read_XOY+0x100>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	085b      	lsrs	r3, r3, #1
 80034ae:	833b      	strh	r3, [r7, #24]
	return temp;
 80034b0:	8b3b      	ldrh	r3, [r7, #24]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3724      	adds	r7, #36	; 0x24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd90      	pop	{r4, r7, pc}
 80034ba:	bf00      	nop
 80034bc:	aaaaaaab 	.word	0xaaaaaaab

080034c0 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 80034ca:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <TP_Read_XY+0x3c>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff74 	bl	80033bc <TP_Read_XOY>
 80034d4:	4603      	mov	r3, r0
 80034d6:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <TP_Read_XY+0x40>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff6d 	bl	80033bc <TP_Read_XOY>
 80034e2:	4603      	mov	r3, r0
 80034e4:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	89fa      	ldrh	r2, [r7, #14]
 80034ea:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	89ba      	ldrh	r2, [r7, #12]
 80034f0:	801a      	strh	r2, [r3, #0]
	return 1;
 80034f2:	2301      	movs	r3, #1
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	2000004c 	.word	0x2000004c
 8003500:	2000004d 	.word	0x2000004d

08003504 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 800350e:	f107 0212 	add.w	r2, r7, #18
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ffd1 	bl	80034c0 <TP_Read_XY>
 800351e:	4603      	mov	r3, r0
 8003520:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <TP_Read_XY2+0x28>
 8003528:	2300      	movs	r3, #0
 800352a:	e049      	b.n	80035c0 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 800352c:	f107 020e 	add.w	r2, r7, #14
 8003530:	f107 0310 	add.w	r3, r7, #16
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ffc2 	bl	80034c0 <TP_Read_XY>
 800353c:	4603      	mov	r3, r0
 800353e:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <TP_Read_XY2+0x46>
 8003546:	2300      	movs	r3, #0
 8003548:	e03a      	b.n	80035c0 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 800354a:	8a3a      	ldrh	r2, [r7, #16]
 800354c:	8abb      	ldrh	r3, [r7, #20]
 800354e:	429a      	cmp	r2, r3
 8003550:	d804      	bhi.n	800355c <TP_Read_XY2+0x58>
 8003552:	8a3b      	ldrh	r3, [r7, #16]
 8003554:	3363      	adds	r3, #99	; 0x63
 8003556:	8aba      	ldrh	r2, [r7, #20]
 8003558:	4293      	cmp	r3, r2
 800355a:	da08      	bge.n	800356e <TP_Read_XY2+0x6a>
 800355c:	8aba      	ldrh	r2, [r7, #20]
 800355e:	8a3b      	ldrh	r3, [r7, #16]
 8003560:	429a      	cmp	r2, r3
 8003562:	d82c      	bhi.n	80035be <TP_Read_XY2+0xba>
 8003564:	8abb      	ldrh	r3, [r7, #20]
 8003566:	3363      	adds	r3, #99	; 0x63
 8003568:	8a3a      	ldrh	r2, [r7, #16]
 800356a:	4293      	cmp	r3, r2
 800356c:	db27      	blt.n	80035be <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 800356e:	89fa      	ldrh	r2, [r7, #14]
 8003570:	8a7b      	ldrh	r3, [r7, #18]
 8003572:	429a      	cmp	r2, r3
 8003574:	d804      	bhi.n	8003580 <TP_Read_XY2+0x7c>
 8003576:	89fb      	ldrh	r3, [r7, #14]
 8003578:	3363      	adds	r3, #99	; 0x63
 800357a:	8a7a      	ldrh	r2, [r7, #18]
 800357c:	4293      	cmp	r3, r2
 800357e:	da08      	bge.n	8003592 <TP_Read_XY2+0x8e>
 8003580:	8a7a      	ldrh	r2, [r7, #18]
 8003582:	89fb      	ldrh	r3, [r7, #14]
 8003584:	429a      	cmp	r2, r3
 8003586:	d81a      	bhi.n	80035be <TP_Read_XY2+0xba>
 8003588:	8a7b      	ldrh	r3, [r7, #18]
 800358a:	3363      	adds	r3, #99	; 0x63
 800358c:	89fa      	ldrh	r2, [r7, #14]
 800358e:	4293      	cmp	r3, r2
 8003590:	db15      	blt.n	80035be <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8003592:	8abb      	ldrh	r3, [r7, #20]
 8003594:	461a      	mov	r2, r3
 8003596:	8a3b      	ldrh	r3, [r7, #16]
 8003598:	4413      	add	r3, r2
 800359a:	0fda      	lsrs	r2, r3, #31
 800359c:	4413      	add	r3, r2
 800359e:	105b      	asrs	r3, r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 80035a6:	8a7b      	ldrh	r3, [r7, #18]
 80035a8:	461a      	mov	r2, r3
 80035aa:	89fb      	ldrh	r3, [r7, #14]
 80035ac:	4413      	add	r3, r2
 80035ae:	0fda      	lsrs	r2, r3, #31
 80035b0:	4413      	add	r3, r2
 80035b2:	105b      	asrs	r3, r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	801a      	strh	r2, [r3, #0]
		return 1;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <TP_Read_XY2+0xbc>
	}else return 0;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	4603      	mov	r3, r0
 80035d0:	80fb      	strh	r3, [r7, #6]
 80035d2:	460b      	mov	r3, r1
 80035d4:	80bb      	strh	r3, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	3b0c      	subs	r3, #12
 80035de:	b298      	uxth	r0, r3
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	330d      	adds	r3, #13
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	88bc      	ldrh	r4, [r7, #4]
 80035e8:	88b9      	ldrh	r1, [r7, #4]
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	4623      	mov	r3, r4
 80035f0:	f7fe fbbd 	bl	8001d6e <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 80035f4:	88bb      	ldrh	r3, [r7, #4]
 80035f6:	3b0c      	subs	r3, #12
 80035f8:	b299      	uxth	r1, r3
 80035fa:	88bb      	ldrh	r3, [r7, #4]
 80035fc:	330d      	adds	r3, #13
 80035fe:	b29c      	uxth	r4, r3
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	88f8      	ldrh	r0, [r7, #6]
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	4623      	mov	r3, r4
 800360a:	f7fe fbb0 	bl	8001d6e <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	3301      	adds	r3, #1
 8003612:	b298      	uxth	r0, r3
 8003614:	88bb      	ldrh	r3, [r7, #4]
 8003616:	3301      	adds	r3, #1
 8003618:	b29b      	uxth	r3, r3
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	4619      	mov	r1, r3
 800361e:	f7fe fb8f 	bl	8001d40 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	3b01      	subs	r3, #1
 8003626:	b298      	uxth	r0, r3
 8003628:	88bb      	ldrh	r3, [r7, #4]
 800362a:	3301      	adds	r3, #1
 800362c:	b29b      	uxth	r3, r3
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	4619      	mov	r1, r3
 8003632:	f7fe fb85 	bl	8001d40 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	3301      	adds	r3, #1
 800363a:	b298      	uxth	r0, r3
 800363c:	88bb      	ldrh	r3, [r7, #4]
 800363e:	3b01      	subs	r3, #1
 8003640:	b29b      	uxth	r3, r3
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	4619      	mov	r1, r3
 8003646:	f7fe fb7b 	bl	8001d40 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	3b01      	subs	r3, #1
 800364e:	b298      	uxth	r0, r3
 8003650:	88bb      	ldrh	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	b29b      	uxth	r3, r3
 8003656:	887a      	ldrh	r2, [r7, #2]
 8003658:	4619      	mov	r1, r3
 800365a:	f7fe fb71 	bl	8001d40 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 800365e:	88f8      	ldrh	r0, [r7, #6]
 8003660:	88b9      	ldrh	r1, [r7, #4]
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	2300      	movs	r3, #0
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	2306      	movs	r3, #6
 800366a:	f7fe ffb4 	bl	80025d6 <lcd_DrawCircle>
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	bd90      	pop	{r4, r7, pc}
	...

08003678 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8003682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003686:	4843      	ldr	r0, [pc, #268]	; (8003794 <TP_Scan+0x11c>)
 8003688:	f001 fd8e 	bl	80051a8 <HAL_GPIO_ReadPin>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d157      	bne.n	8003742 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d004      	beq.n	80036a2 <TP_Scan+0x2a>
 8003698:	493f      	ldr	r1, [pc, #252]	; (8003798 <TP_Scan+0x120>)
 800369a:	4840      	ldr	r0, [pc, #256]	; (800379c <TP_Scan+0x124>)
 800369c:	f7ff ff32 	bl	8003504 <TP_Read_XY2>
 80036a0:	e03c      	b.n	800371c <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 80036a2:	493d      	ldr	r1, [pc, #244]	; (8003798 <TP_Scan+0x120>)
 80036a4:	483d      	ldr	r0, [pc, #244]	; (800379c <TP_Scan+0x124>)
 80036a6:	f7ff ff2d 	bl	8003504 <TP_Read_XY2>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d035      	beq.n	800371c <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 80036b0:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <TP_Scan+0x128>)
 80036b2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80036b6:	4b3a      	ldr	r3, [pc, #232]	; (80037a0 <TP_Scan+0x128>)
 80036b8:	899b      	ldrh	r3, [r3, #12]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c6:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <TP_Scan+0x128>)
 80036c8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036dc:	ee17 3a90 	vmov	r3, s15
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <TP_Scan+0x128>)
 80036e4:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 80036e6:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <TP_Scan+0x128>)
 80036e8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80036ec:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <TP_Scan+0x128>)
 80036ee:	8adb      	ldrh	r3, [r3, #22]
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036fc:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <TP_Scan+0x128>)
 80036fe:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800370a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800370e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003712:	ee17 3a90 	vmov	r3, s15
 8003716:	b29a      	uxth	r2, r3
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <TP_Scan+0x128>)
 800371a:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 800371c:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <TP_Scan+0x128>)
 800371e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003722:	b25b      	sxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	db2a      	blt.n	800377e <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <TP_Scan+0x128>)
 800372a:	22c0      	movs	r2, #192	; 0xc0
 800372c:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8003730:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <TP_Scan+0x128>)
 8003732:	899a      	ldrh	r2, [r3, #12]
 8003734:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <TP_Scan+0x128>)
 8003736:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <TP_Scan+0x128>)
 800373a:	8ada      	ldrh	r2, [r3, #22]
 800373c:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <TP_Scan+0x128>)
 800373e:	83da      	strh	r2, [r3, #30]
 8003740:	e01d      	b.n	800377e <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <TP_Scan+0x128>)
 8003744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003748:	b25b      	sxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	da09      	bge.n	8003762 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <TP_Scan+0x128>)
 8003750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <TP_Scan+0x128>)
 800375c:	f883 2020 	strb.w	r2, [r3, #32]
 8003760:	e00d      	b.n	800377e <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8003762:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <TP_Scan+0x128>)
 8003764:	2200      	movs	r2, #0
 8003766:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8003768:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <TP_Scan+0x128>)
 800376a:	2200      	movs	r2, #0
 800376c:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 800376e:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <TP_Scan+0x128>)
 8003770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003774:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <TP_Scan+0x128>)
 8003778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800377c:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <TP_Scan+0x128>)
 8003780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003784:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003788:	b2db      	uxtb	r3, r3
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40020800 	.word	0x40020800
 8003798:	2000002e 	.word	0x2000002e
 800379c:	20000024 	.word	0x20000024
 80037a0:	20000018 	.word	0x20000018

080037a4 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 80037a8:	220e      	movs	r2, #14
 80037aa:	4905      	ldr	r1, [pc, #20]	; (80037c0 <TP_Save_Adjdata+0x1c>)
 80037ac:	2000      	movs	r0, #0
 80037ae:	f7fd fd0f 	bl	80011d0 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 80037b2:	2100      	movs	r1, #0
 80037b4:	200e      	movs	r0, #14
 80037b6:	f7fd fcab 	bl	8001110 <at24c_WriteOneByte>
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	2000003c 	.word	0x2000003c

080037c4 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 80037ce:	200e      	movs	r0, #14
 80037d0:	f7fd fc82 	bl	80010d8 <at24c_ReadOneByte>
 80037d4:	4603      	mov	r3, r0
 80037d6:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 80037de:	220e      	movs	r2, #14
 80037e0:	4905      	ldr	r1, [pc, #20]	; (80037f8 <TP_Get_Adjdata+0x34>)
 80037e2:	2000      	movs	r0, #0
 80037e4:	f7fd fcd5 	bl	8001192 <at24c_Read>
		return 1;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <TP_Get_Adjdata+0x2a>
	}
	return 0;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	2000003c 	.word	0x2000003c
 80037fc:	00000000 	.word	0x00000000

08003800 <touch_Adjust>:


void touch_Adjust(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08e      	sub	sp, #56	; 0x38
 8003804:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8003806:	2300      	movs	r3, #0
 8003808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 800380c:	2300      	movs	r3, #0
 800380e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8003812:	4b61      	ldr	r3, [pc, #388]	; (8003998 <touch_Adjust+0x198>)
 8003814:	881a      	ldrh	r2, [r3, #0]
 8003816:	4b60      	ldr	r3, [pc, #384]	; (8003998 <touch_Adjust+0x198>)
 8003818:	885b      	ldrh	r3, [r3, #2]
 800381a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800381e:	9100      	str	r1, [sp, #0]
 8003820:	2100      	movs	r1, #0
 8003822:	2000      	movs	r0, #0
 8003824:	f7fe fa56 	bl	8001cd4 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8003828:	2300      	movs	r3, #0
 800382a:	9302      	str	r3, [sp, #8]
 800382c:	2310      	movs	r3, #16
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800383a:	4a58      	ldr	r2, [pc, #352]	; (800399c <touch_Adjust+0x19c>)
 800383c:	2128      	movs	r1, #40	; 0x28
 800383e:	2005      	movs	r0, #5
 8003840:	f7fe ff36 	bl	80026b0 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8003844:	2300      	movs	r3, #0
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	2310      	movs	r3, #16
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003856:	4a52      	ldr	r2, [pc, #328]	; (80039a0 <touch_Adjust+0x1a0>)
 8003858:	2141      	movs	r1, #65	; 0x41
 800385a:	2005      	movs	r0, #5
 800385c:	f7fe ff28 	bl	80026b0 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8003860:	2300      	movs	r3, #0
 8003862:	9302      	str	r3, [sp, #8]
 8003864:	2310      	movs	r3, #16
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003872:	4a4c      	ldr	r2, [pc, #304]	; (80039a4 <touch_Adjust+0x1a4>)
 8003874:	215a      	movs	r1, #90	; 0x5a
 8003876:	2005      	movs	r0, #5
 8003878:	f7fe ff1a 	bl	80026b0 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 800387c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003880:	2114      	movs	r1, #20
 8003882:	2014      	movs	r0, #20
 8003884:	f7ff fea0 	bl	80035c8 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8003888:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <touch_Adjust+0x1a8>)
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8003890:	4b45      	ldr	r3, [pc, #276]	; (80039a8 <touch_Adjust+0x1a8>)
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8003898:	2032      	movs	r0, #50	; 0x32
 800389a:	f000 fc67 	bl	800416c <HAL_Delay>
		tp_dev.scan(1);
 800389e:	4b42      	ldr	r3, [pc, #264]	; (80039a8 <touch_Adjust+0x1a8>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2001      	movs	r0, #1
 80038a4:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 80038a6:	4b40      	ldr	r3, [pc, #256]	; (80039a8 <touch_Adjust+0x1a8>)
 80038a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	f040 835e 	bne.w	8003f72 <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 80038b6:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <touch_Adjust+0x1a8>)
 80038b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <touch_Adjust+0x1a8>)
 80038c4:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 80038c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038cc:	4a36      	ldr	r2, [pc, #216]	; (80039a8 <touch_Adjust+0x1a8>)
 80038ce:	8992      	ldrh	r2, [r2, #12]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80038d6:	440b      	add	r3, r1
 80038d8:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 80038dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038e0:	4a31      	ldr	r2, [pc, #196]	; (80039a8 <touch_Adjust+0x1a8>)
 80038e2:	8ad2      	ldrh	r2, [r2, #22]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80038ea:	440b      	add	r3, r1
 80038ec:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 80038f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038f4:	3301      	adds	r3, #1
 80038f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 80038fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038fe:	3b01      	subs	r3, #1
 8003900:	2b03      	cmp	r3, #3
 8003902:	d8c9      	bhi.n	8003898 <touch_Adjust+0x98>
 8003904:	a201      	add	r2, pc, #4	; (adr r2, 800390c <touch_Adjust+0x10c>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	0800391d 	.word	0x0800391d
 8003910:	0800393f 	.word	0x0800393f
 8003914:	08003969 	.word	0x08003969
 8003918:	080039ad 	.word	0x080039ad
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 800391c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003920:	2114      	movs	r1, #20
 8003922:	2014      	movs	r0, #20
 8003924:	f7ff fe50 	bl	80035c8 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8003928:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <touch_Adjust+0x198>)
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	3b14      	subs	r3, #20
 800392e:	b29b      	uxth	r3, r3
 8003930:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003934:	2114      	movs	r1, #20
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fe46 	bl	80035c8 <TP_Drow_Touch_Point>
					break;
 800393c:	e31a      	b.n	8003f74 <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 800393e:	4b16      	ldr	r3, [pc, #88]	; (8003998 <touch_Adjust+0x198>)
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	3b14      	subs	r3, #20
 8003944:	b29b      	uxth	r3, r3
 8003946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800394a:	2114      	movs	r1, #20
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fe3b 	bl	80035c8 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8003952:	4b11      	ldr	r3, [pc, #68]	; (8003998 <touch_Adjust+0x198>)
 8003954:	885b      	ldrh	r3, [r3, #2]
 8003956:	3b14      	subs	r3, #20
 8003958:	b29b      	uxth	r3, r3
 800395a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800395e:	4619      	mov	r1, r3
 8003960:	2014      	movs	r0, #20
 8003962:	f7ff fe31 	bl	80035c8 <TP_Drow_Touch_Point>
					break;
 8003966:	e305      	b.n	8003f74 <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <touch_Adjust+0x198>)
 800396a:	885b      	ldrh	r3, [r3, #2]
 800396c:	3b14      	subs	r3, #20
 800396e:	b29b      	uxth	r3, r3
 8003970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003974:	4619      	mov	r1, r3
 8003976:	2014      	movs	r0, #20
 8003978:	f7ff fe26 	bl	80035c8 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <touch_Adjust+0x198>)
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	3b14      	subs	r3, #20
 8003982:	b298      	uxth	r0, r3
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <touch_Adjust+0x198>)
 8003986:	885b      	ldrh	r3, [r3, #2]
 8003988:	3b14      	subs	r3, #20
 800398a:	b29b      	uxth	r3, r3
 800398c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003990:	4619      	mov	r1, r3
 8003992:	f7ff fe19 	bl	80035c8 <TP_Drow_Touch_Point>
					break;
 8003996:	e2ed      	b.n	8003f74 <touch_Adjust+0x774>
 8003998:	2000025c 	.word	0x2000025c
 800399c:	0800936c 	.word	0x0800936c
 80039a0:	08009388 	.word	0x08009388
 80039a4:	080093a0 	.word	0x080093a0
 80039a8:	20000018 	.word	0x20000018
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 80039ac:	883b      	ldrh	r3, [r7, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	88bb      	ldrh	r3, [r7, #4]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bfb8      	it	lt
 80039b8:	425b      	neglt	r3, r3
 80039ba:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 80039bc:	887b      	ldrh	r3, [r7, #2]
 80039be:	461a      	mov	r2, r3
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bfb8      	it	lt
 80039c8:	425b      	neglt	r3, r3
 80039ca:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	fb03 f303 	mul.w	r3, r3, r3
 80039d2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	fb03 f303 	mul.w	r3, r3, r3
 80039da:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80039dc:	6a3a      	ldr	r2, [r7, #32]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fc fd8e 	bl	8000504 <__aeabi_ui2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	ec43 2b10 	vmov	d0, r2, r3
 80039f0:	f005 fbba 	bl	8009168 <sqrt>
 80039f4:	ec53 2b10 	vmov	r2, r3, d0
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	f7fd f8ac 	bl	8000b58 <__aeabi_d2uiz>
 8003a00:	4603      	mov	r3, r0
 8003a02:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 8003a04:	893b      	ldrh	r3, [r7, #8]
 8003a06:	461a      	mov	r2, r3
 8003a08:	89bb      	ldrh	r3, [r7, #12]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bfb8      	it	lt
 8003a10:	425b      	neglt	r3, r3
 8003a12:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 8003a14:	897b      	ldrh	r3, [r7, #10]
 8003a16:	461a      	mov	r2, r3
 8003a18:	89fb      	ldrh	r3, [r7, #14]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bfb8      	it	lt
 8003a20:	425b      	neglt	r3, r3
 8003a22:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	fb03 f303 	mul.w	r3, r3, r3
 8003a2a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	fb03 f303 	mul.w	r3, r3, r3
 8003a32:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003a34:	6a3a      	ldr	r2, [r7, #32]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fc fd62 	bl	8000504 <__aeabi_ui2d>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	ec43 2b10 	vmov	d0, r2, r3
 8003a48:	f005 fb8e 	bl	8009168 <sqrt>
 8003a4c:	ec53 2b10 	vmov	r2, r3, d0
 8003a50:	4610      	mov	r0, r2
 8003a52:	4619      	mov	r1, r3
 8003a54:	f7fd f880 	bl	8000b58 <__aeabi_d2uiz>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003a5c:	8b7b      	ldrh	r3, [r7, #26]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a66:	8b3b      	ldrh	r3, [r7, #24]
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a74:	ee16 0a90 	vmov	r0, s13
 8003a78:	f7fc fd66 	bl	8000548 <__aeabi_f2d>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8003a84:	a384      	add	r3, pc, #528	; (adr r3, 8003c98 <touch_Adjust+0x498>)
 8003a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a8e:	f7fd f825 	bl	8000adc <__aeabi_dcmplt>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10f      	bne.n	8003ab8 <touch_Adjust+0x2b8>
 8003a98:	a381      	add	r3, pc, #516	; (adr r3, 8003ca0 <touch_Adjust+0x4a0>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003aa2:	f7fd f839 	bl	8000b18 <__aeabi_dcmpgt>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <touch_Adjust+0x2b8>
 8003aac:	8b7b      	ldrh	r3, [r7, #26]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <touch_Adjust+0x2b8>
 8003ab2:	8b3b      	ldrh	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d136      	bne.n	8003b26 <touch_Adjust+0x326>
					{
						cnt=0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003abe:	4b7a      	ldr	r3, [pc, #488]	; (8003ca8 <touch_Adjust+0x4a8>)
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	3b14      	subs	r3, #20
 8003ac4:	b298      	uxth	r0, r3
 8003ac6:	4b78      	ldr	r3, [pc, #480]	; (8003ca8 <touch_Adjust+0x4a8>)
 8003ac8:	885b      	ldrh	r3, [r3, #2]
 8003aca:	3b14      	subs	r3, #20
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f7ff fd78 	bl	80035c8 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003ad8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003adc:	2114      	movs	r1, #20
 8003ade:	2014      	movs	r0, #20
 8003ae0:	f7ff fd72 	bl	80035c8 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	9302      	str	r3, [sp, #8]
 8003ae8:	2310      	movs	r3, #16
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003af6:	4a6d      	ldr	r2, [pc, #436]	; (8003cac <touch_Adjust+0x4ac>)
 8003af8:	2128      	movs	r1, #40	; 0x28
 8003afa:	2005      	movs	r0, #5
 8003afc:	f7fe fdd8 	bl	80026b0 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003b00:	2300      	movs	r3, #0
 8003b02:	9302      	str	r3, [sp, #8]
 8003b04:	2310      	movs	r3, #16
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b12:	4a67      	ldr	r2, [pc, #412]	; (8003cb0 <touch_Adjust+0x4b0>)
 8003b14:	213c      	movs	r1, #60	; 0x3c
 8003b16:	2005      	movs	r0, #5
 8003b18:	f7fe fdca 	bl	80026b0 <lcd_ShowStr>
						HAL_Delay(1000);
 8003b1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b20:	f000 fb24 	bl	800416c <HAL_Delay>
 						continue;
 8003b24:	e226      	b.n	8003f74 <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8003b26:	883b      	ldrh	r3, [r7, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	893b      	ldrh	r3, [r7, #8]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bfb8      	it	lt
 8003b32:	425b      	neglt	r3, r3
 8003b34:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	897b      	ldrh	r3, [r7, #10]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bfb8      	it	lt
 8003b42:	425b      	neglt	r3, r3
 8003b44:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	fb03 f303 	mul.w	r3, r3, r3
 8003b4c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fb03 f303 	mul.w	r3, r3, r3
 8003b54:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003b56:	6a3a      	ldr	r2, [r7, #32]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fc fcd1 	bl	8000504 <__aeabi_ui2d>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	ec43 2b10 	vmov	d0, r2, r3
 8003b6a:	f005 fafd 	bl	8009168 <sqrt>
 8003b6e:	ec53 2b10 	vmov	r2, r3, d0
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	f7fc ffef 	bl	8000b58 <__aeabi_d2uiz>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8003b7e:	88bb      	ldrh	r3, [r7, #4]
 8003b80:	461a      	mov	r2, r3
 8003b82:	89bb      	ldrh	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bfb8      	it	lt
 8003b8a:	425b      	neglt	r3, r3
 8003b8c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	461a      	mov	r2, r3
 8003b92:	89fb      	ldrh	r3, [r7, #14]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bfb8      	it	lt
 8003b9a:	425b      	neglt	r3, r3
 8003b9c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	fb03 f303 	mul.w	r3, r3, r3
 8003ba4:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	fb03 f303 	mul.w	r3, r3, r3
 8003bac:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003bae:	6a3a      	ldr	r2, [r7, #32]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fc fca5 	bl	8000504 <__aeabi_ui2d>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	ec43 2b10 	vmov	d0, r2, r3
 8003bc2:	f005 fad1 	bl	8009168 <sqrt>
 8003bc6:	ec53 2b10 	vmov	r2, r3, d0
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	f7fc ffc3 	bl	8000b58 <__aeabi_d2uiz>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003bd6:	8b7b      	ldrh	r3, [r7, #26]
 8003bd8:	ee07 3a90 	vmov	s15, r3
 8003bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003be0:	8b3b      	ldrh	r3, [r7, #24]
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bee:	ee16 0a90 	vmov	r0, s13
 8003bf2:	f7fc fca9 	bl	8000548 <__aeabi_f2d>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003bfe:	a326      	add	r3, pc, #152	; (adr r3, 8003c98 <touch_Adjust+0x498>)
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c08:	f7fc ff68 	bl	8000adc <__aeabi_dcmplt>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <touch_Adjust+0x426>
 8003c12:	a323      	add	r3, pc, #140	; (adr r3, 8003ca0 <touch_Adjust+0x4a0>)
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c1c:	f7fc ff7c 	bl	8000b18 <__aeabi_dcmpgt>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d046      	beq.n	8003cb4 <touch_Adjust+0x4b4>
					{
						cnt=0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003c2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <touch_Adjust+0x4a8>)
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	3b14      	subs	r3, #20
 8003c32:	b298      	uxth	r0, r3
 8003c34:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <touch_Adjust+0x4a8>)
 8003c36:	885b      	ldrh	r3, [r3, #2]
 8003c38:	3b14      	subs	r3, #20
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c40:	4619      	mov	r1, r3
 8003c42:	f7ff fcc1 	bl	80035c8 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003c46:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003c4a:	2114      	movs	r1, #20
 8003c4c:	2014      	movs	r0, #20
 8003c4e:	f7ff fcbb 	bl	80035c8 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003c52:	2300      	movs	r3, #0
 8003c54:	9302      	str	r3, [sp, #8]
 8003c56:	2310      	movs	r3, #16
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c64:	4a11      	ldr	r2, [pc, #68]	; (8003cac <touch_Adjust+0x4ac>)
 8003c66:	2128      	movs	r1, #40	; 0x28
 8003c68:	2005      	movs	r0, #5
 8003c6a:	f7fe fd21 	bl	80026b0 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9302      	str	r3, [sp, #8]
 8003c72:	2310      	movs	r3, #16
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c80:	4a0b      	ldr	r2, [pc, #44]	; (8003cb0 <touch_Adjust+0x4b0>)
 8003c82:	213c      	movs	r1, #60	; 0x3c
 8003c84:	2005      	movs	r0, #5
 8003c86:	f7fe fd13 	bl	80026b0 <lcd_ShowStr>
						HAL_Delay(1000);
 8003c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c8e:	f000 fa6d 	bl	800416c <HAL_Delay>
						continue;
 8003c92:	e16f      	b.n	8003f74 <touch_Adjust+0x774>
 8003c94:	f3af 8000 	nop.w
 8003c98:	66666666 	.word	0x66666666
 8003c9c:	3fee6666 	.word	0x3fee6666
 8003ca0:	cccccccd 	.word	0xcccccccd
 8003ca4:	3ff0cccc 	.word	0x3ff0cccc
 8003ca8:	2000025c 	.word	0x2000025c
 8003cac:	080093b4 	.word	0x080093b4
 8003cb0:	080093d4 	.word	0x080093d4
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8003cb4:	88bb      	ldrh	r3, [r7, #4]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	893b      	ldrh	r3, [r7, #8]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bfb8      	it	lt
 8003cc0:	425b      	neglt	r3, r3
 8003cc2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	897b      	ldrh	r3, [r7, #10]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bfb8      	it	lt
 8003cd0:	425b      	neglt	r3, r3
 8003cd2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	fb03 f303 	mul.w	r3, r3, r3
 8003cda:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	fb03 f303 	mul.w	r3, r3, r3
 8003ce2:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003ce4:	6a3a      	ldr	r2, [r7, #32]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	4413      	add	r3, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fc0a 	bl	8000504 <__aeabi_ui2d>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	ec43 2b10 	vmov	d0, r2, r3
 8003cf8:	f005 fa36 	bl	8009168 <sqrt>
 8003cfc:	ec53 2b10 	vmov	r2, r3, d0
 8003d00:	4610      	mov	r0, r2
 8003d02:	4619      	mov	r1, r3
 8003d04:	f7fc ff28 	bl	8000b58 <__aeabi_d2uiz>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8003d0c:	883b      	ldrh	r3, [r7, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	89bb      	ldrh	r3, [r7, #12]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bfb8      	it	lt
 8003d18:	425b      	neglt	r3, r3
 8003d1a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8003d1c:	887b      	ldrh	r3, [r7, #2]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	89fb      	ldrh	r3, [r7, #14]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bfb8      	it	lt
 8003d28:	425b      	neglt	r3, r3
 8003d2a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	fb03 f303 	mul.w	r3, r3, r3
 8003d32:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	fb03 f303 	mul.w	r3, r3, r3
 8003d3a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc fbde 	bl	8000504 <__aeabi_ui2d>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	ec43 2b10 	vmov	d0, r2, r3
 8003d50:	f005 fa0a 	bl	8009168 <sqrt>
 8003d54:	ec53 2b10 	vmov	r2, r3, d0
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f7fc fefc 	bl	8000b58 <__aeabi_d2uiz>
 8003d60:	4603      	mov	r3, r0
 8003d62:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003d64:	8b7b      	ldrh	r3, [r7, #26]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d6e:	8b3b      	ldrh	r3, [r7, #24]
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d78:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d7c:	ee16 0a90 	vmov	r0, s13
 8003d80:	f7fc fbe2 	bl	8000548 <__aeabi_f2d>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003d8c:	a383      	add	r3, pc, #524	; (adr r3, 8003f9c <touch_Adjust+0x79c>)
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d96:	f7fc fea1 	bl	8000adc <__aeabi_dcmplt>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <touch_Adjust+0x5b4>
 8003da0:	a380      	add	r3, pc, #512	; (adr r3, 8003fa4 <touch_Adjust+0x7a4>)
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003daa:	f7fc feb5 	bl	8000b18 <__aeabi_dcmpgt>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d036      	beq.n	8003e22 <touch_Adjust+0x622>
					{
						cnt=0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003dba:	4b71      	ldr	r3, [pc, #452]	; (8003f80 <touch_Adjust+0x780>)
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	3b14      	subs	r3, #20
 8003dc0:	b298      	uxth	r0, r3
 8003dc2:	4b6f      	ldr	r3, [pc, #444]	; (8003f80 <touch_Adjust+0x780>)
 8003dc4:	885b      	ldrh	r3, [r3, #2]
 8003dc6:	3b14      	subs	r3, #20
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f7ff fbfa 	bl	80035c8 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003dd4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003dd8:	2114      	movs	r1, #20
 8003dda:	2014      	movs	r0, #20
 8003ddc:	f7ff fbf4 	bl	80035c8 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003de0:	2300      	movs	r3, #0
 8003de2:	9302      	str	r3, [sp, #8]
 8003de4:	2310      	movs	r3, #16
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003df2:	4a64      	ldr	r2, [pc, #400]	; (8003f84 <touch_Adjust+0x784>)
 8003df4:	2128      	movs	r1, #40	; 0x28
 8003df6:	2005      	movs	r0, #5
 8003df8:	f7fe fc5a 	bl	80026b0 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	9302      	str	r3, [sp, #8]
 8003e00:	2310      	movs	r3, #16
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e0e:	4a5e      	ldr	r2, [pc, #376]	; (8003f88 <touch_Adjust+0x788>)
 8003e10:	213c      	movs	r1, #60	; 0x3c
 8003e12:	2005      	movs	r0, #5
 8003e14:	f7fe fc4c 	bl	80026b0 <lcd_ShowStr>

						HAL_Delay(1000);
 8003e18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e1c:	f000 f9a6 	bl	800416c <HAL_Delay>
 							continue;
 8003e20:	e0a8      	b.n	8003f74 <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8003e22:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <touch_Adjust+0x780>)
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	3b28      	subs	r3, #40	; 0x28
 8003e28:	ee07 3a90 	vmov	s15, r3
 8003e2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e30:	88bb      	ldrh	r3, [r7, #4]
 8003e32:	461a      	mov	r2, r3
 8003e34:	883b      	ldrh	r3, [r7, #0]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e44:	4b51      	ldr	r3, [pc, #324]	; (8003f8c <touch_Adjust+0x78c>)
 8003e46:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8003e4a:	4b4d      	ldr	r3, [pc, #308]	; (8003f80 <touch_Adjust+0x780>)
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e56:	4b4d      	ldr	r3, [pc, #308]	; (8003f8c <touch_Adjust+0x78c>)
 8003e58:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003e5c:	88bb      	ldrh	r3, [r7, #4]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	883b      	ldrh	r3, [r7, #0]
 8003e62:	4413      	add	r3, r2
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e80:	ee17 3a90 	vmov	r3, s15
 8003e84:	b21a      	sxth	r2, r3
 8003e86:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <touch_Adjust+0x78c>)
 8003e88:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8003e8a:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <touch_Adjust+0x780>)
 8003e8c:	885b      	ldrh	r3, [r3, #2]
 8003e8e:	3b28      	subs	r3, #40	; 0x28
 8003e90:	ee07 3a90 	vmov	s15, r3
 8003e94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e98:	897b      	ldrh	r3, [r7, #10]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	887b      	ldrh	r3, [r7, #2]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	ee07 3a90 	vmov	s15, r3
 8003ea4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eac:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <touch_Adjust+0x78c>)
 8003eae:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8003eb2:	4b33      	ldr	r3, [pc, #204]	; (8003f80 <touch_Adjust+0x780>)
 8003eb4:	885b      	ldrh	r3, [r3, #2]
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ebe:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <touch_Adjust+0x78c>)
 8003ec0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003ec4:	897b      	ldrh	r3, [r7, #10]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	4413      	add	r3, r2
 8003ecc:	ee07 3a90 	vmov	s15, r3
 8003ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ed8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003edc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ee8:	ee17 3a90 	vmov	r3, s15
 8003eec:	b21a      	sxth	r2, r3
 8003eee:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <touch_Adjust+0x78c>)
 8003ef0:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003ef2:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <touch_Adjust+0x780>)
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	3b14      	subs	r3, #20
 8003ef8:	b298      	uxth	r0, r3
 8003efa:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <touch_Adjust+0x780>)
 8003efc:	885b      	ldrh	r3, [r3, #2]
 8003efe:	3b14      	subs	r3, #20
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f06:	4619      	mov	r1, r3
 8003f08:	f7ff fb5e 	bl	80035c8 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9302      	str	r3, [sp, #8]
 8003f10:	2310      	movs	r3, #16
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f1e:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <touch_Adjust+0x790>)
 8003f20:	2128      	movs	r1, #40	; 0x28
 8003f22:	2005      	movs	r0, #5
 8003f24:	f7fe fbc4 	bl	80026b0 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9302      	str	r3, [sp, #8]
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f3a:	4a16      	ldr	r2, [pc, #88]	; (8003f94 <touch_Adjust+0x794>)
 8003f3c:	213c      	movs	r1, #60	; 0x3c
 8003f3e:	2005      	movs	r0, #5
 8003f40:	f7fe fbb6 	bl	80026b0 <lcd_ShowStr>
					HAL_Delay(1000);
 8003f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f48:	f000 f910 	bl	800416c <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9302      	str	r3, [sp, #8]
 8003f50:	2310      	movs	r3, #16
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f5e:	4a0e      	ldr	r2, [pc, #56]	; (8003f98 <touch_Adjust+0x798>)
 8003f60:	2128      	movs	r1, #40	; 0x28
 8003f62:	2005      	movs	r0, #5
 8003f64:	f7fe fba4 	bl	80026b0 <lcd_ShowStr>
					TP_Save_Adjdata();
 8003f68:	f7ff fc1c 	bl	80037a4 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8003f6c:	f7ff fc2a 	bl	80037c4 <TP_Get_Adjdata>
					return;
 8003f70:	e001      	b.n	8003f76 <touch_Adjust+0x776>
			}
		}
 8003f72:	bf00      	nop
		HAL_Delay(50);
 8003f74:	e490      	b.n	8003898 <touch_Adjust+0x98>
 	}
}
 8003f76:	3728      	adds	r7, #40	; 0x28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	f3af 8000 	nop.w
 8003f80:	2000025c 	.word	0x2000025c
 8003f84:	080093b4 	.word	0x080093b4
 8003f88:	080093d4 	.word	0x080093d4
 8003f8c:	20000018 	.word	0x20000018
 8003f90:	080093f4 	.word	0x080093f4
 8003f94:	08009414 	.word	0x08009414
 8003f98:	08009434 	.word	0x08009434
 8003f9c:	66666666 	.word	0x66666666
 8003fa0:	3fee6666 	.word	0x3fee6666
 8003fa4:	cccccccd 	.word	0xcccccccd
 8003fa8:	3ff0cccc 	.word	0x3ff0cccc

08003fac <touch_init>:

void touch_init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8003fb0:	4904      	ldr	r1, [pc, #16]	; (8003fc4 <touch_init+0x18>)
 8003fb2:	4805      	ldr	r0, [pc, #20]	; (8003fc8 <touch_init+0x1c>)
 8003fb4:	f7ff fa84 	bl	80034c0 <TP_Read_XY>
	at24c_init();
 8003fb8:	f7fd f888 	bl	80010cc <at24c_init>
	TP_Get_Adjdata();
 8003fbc:	f7ff fc02 	bl	80037c4 <TP_Get_Adjdata>
}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	2000002e 	.word	0x2000002e
 8003fc8:	20000024 	.word	0x20000024

08003fcc <touch_Scan>:

void touch_Scan(){
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8003fd0:	4b02      	ldr	r3, [pc, #8]	; (8003fdc <touch_Scan+0x10>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	4798      	blx	r3
}
 8003fd8:	bf00      	nop
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	20000018 	.word	0x20000018

08003fe0 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8003fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fe8:	4805      	ldr	r0, [pc, #20]	; (8004000 <touch_IsTouched+0x20>)
 8003fea:	f001 f8dd 	bl	80051a8 <HAL_GPIO_ReadPin>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40020800 	.word	0x40020800

08004004 <touch_GetX>:

uint16_t touch_GetX(){
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <touch_GetX+0x14>)
 800400a:	899b      	ldrh	r3, [r3, #12]
}
 800400c:	4618      	mov	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000018 	.word	0x20000018

0800401c <touch_GetY>:

uint16_t touch_GetY(){
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <touch_GetY+0x14>)
 8004022:	8adb      	ldrh	r3, [r3, #22]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20000018 	.word	0x20000018

08004034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800406c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004038:	480d      	ldr	r0, [pc, #52]	; (8004070 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800403a:	490e      	ldr	r1, [pc, #56]	; (8004074 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800403c:	4a0e      	ldr	r2, [pc, #56]	; (8004078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800403e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004040:	e002      	b.n	8004048 <LoopCopyDataInit>

08004042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004046:	3304      	adds	r3, #4

08004048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800404a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800404c:	d3f9      	bcc.n	8004042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800404e:	4a0b      	ldr	r2, [pc, #44]	; (800407c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004050:	4c0b      	ldr	r4, [pc, #44]	; (8004080 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004054:	e001      	b.n	800405a <LoopFillZerobss>

08004056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004058:	3204      	adds	r2, #4

0800405a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800405a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800405c:	d3fb      	bcc.n	8004056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800405e:	f7fe ff79 	bl	8002f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004062:	f004 f853 	bl	800810c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004066:	f7fe fc45 	bl	80028f4 <main>
  bx  lr    
 800406a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800406c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004074:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8004078:	0800c548 	.word	0x0800c548
  ldr r2, =_sbss
 800407c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8004080:	200003dc 	.word	0x200003dc

08004084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004084:	e7fe      	b.n	8004084 <ADC_IRQHandler>
	...

08004088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800408c:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <HAL_Init+0x40>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <HAL_Init+0x40>)
 8004092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <HAL_Init+0x40>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <HAL_Init+0x40>)
 800409e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040a4:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <HAL_Init+0x40>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a07      	ldr	r2, [pc, #28]	; (80040c8 <HAL_Init+0x40>)
 80040aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040b0:	2003      	movs	r0, #3
 80040b2:	f000 fbb1 	bl	8004818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040b6:	200f      	movs	r0, #15
 80040b8:	f000 f808 	bl	80040cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040bc:	f7fe fe1e 	bl	8002cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023c00 	.word	0x40023c00

080040cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040d4:	4b12      	ldr	r3, [pc, #72]	; (8004120 <HAL_InitTick+0x54>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4b12      	ldr	r3, [pc, #72]	; (8004124 <HAL_InitTick+0x58>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	4619      	mov	r1, r3
 80040de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fbc9 	bl	8004882 <HAL_SYSTICK_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e00e      	b.n	8004118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b0f      	cmp	r3, #15
 80040fe:	d80a      	bhi.n	8004116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004100:	2200      	movs	r2, #0
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	f000 fb91 	bl	800482e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800410c:	4a06      	ldr	r2, [pc, #24]	; (8004128 <HAL_InitTick+0x5c>)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	e000      	b.n	8004118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000014 	.word	0x20000014
 8004124:	20000054 	.word	0x20000054
 8004128:	20000050 	.word	0x20000050

0800412c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_IncTick+0x20>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_IncTick+0x24>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4413      	add	r3, r2
 800413c:	4a04      	ldr	r2, [pc, #16]	; (8004150 <HAL_IncTick+0x24>)
 800413e:	6013      	str	r3, [r2, #0]
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000054 	.word	0x20000054
 8004150:	200003c8 	.word	0x200003c8

08004154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  return uwTick;
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <HAL_GetTick+0x14>)
 800415a:	681b      	ldr	r3, [r3, #0]
}
 800415c:	4618      	mov	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	200003c8 	.word	0x200003c8

0800416c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004174:	f7ff ffee 	bl	8004154 <HAL_GetTick>
 8004178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d005      	beq.n	8004192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004186:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <HAL_Delay+0x44>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4413      	add	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004192:	bf00      	nop
 8004194:	f7ff ffde 	bl	8004154 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d8f7      	bhi.n	8004194 <HAL_Delay+0x28>
  {
  }
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000054 	.word	0x20000054

080041b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e033      	b.n	8004232 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fc fee6 	bl	8000fa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d118      	bne.n	8004224 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041fa:	f023 0302 	bic.w	r3, r3, #2
 80041fe:	f043 0202 	orr.w	r2, r3, #2
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f93a 	bl	8004480 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f023 0303 	bic.w	r3, r3, #3
 800421a:	f043 0201 	orr.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
 8004222:	e001      	b.n	8004228 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x1c>
 8004254:	2302      	movs	r3, #2
 8004256:	e105      	b.n	8004464 <HAL_ADC_ConfigChannel+0x228>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b09      	cmp	r3, #9
 8004266:	d925      	bls.n	80042b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68d9      	ldr	r1, [r3, #12]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	3b1e      	subs	r3, #30
 800427e:	2207      	movs	r2, #7
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43da      	mvns	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	400a      	ands	r2, r1
 800428c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68d9      	ldr	r1, [r3, #12]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	4618      	mov	r0, r3
 80042a0:	4603      	mov	r3, r0
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4403      	add	r3, r0
 80042a6:	3b1e      	subs	r3, #30
 80042a8:	409a      	lsls	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	e022      	b.n	80042fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6919      	ldr	r1, [r3, #16]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	2207      	movs	r2, #7
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43da      	mvns	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	400a      	ands	r2, r1
 80042d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6919      	ldr	r1, [r3, #16]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4618      	mov	r0, r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	4403      	add	r3, r0
 80042f0:	409a      	lsls	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d824      	bhi.n	800434c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	3b05      	subs	r3, #5
 8004314:	221f      	movs	r2, #31
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43da      	mvns	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	400a      	ands	r2, r1
 8004322:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	4618      	mov	r0, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	3b05      	subs	r3, #5
 800433e:	fa00 f203 	lsl.w	r2, r0, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	635a      	str	r2, [r3, #52]	; 0x34
 800434a:	e04c      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b0c      	cmp	r3, #12
 8004352:	d824      	bhi.n	800439e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	3b23      	subs	r3, #35	; 0x23
 8004366:	221f      	movs	r2, #31
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43da      	mvns	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	400a      	ands	r2, r1
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	4618      	mov	r0, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	3b23      	subs	r3, #35	; 0x23
 8004390:	fa00 f203 	lsl.w	r2, r0, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
 800439c:	e023      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	3b41      	subs	r3, #65	; 0x41
 80043b0:	221f      	movs	r2, #31
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43da      	mvns	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	400a      	ands	r2, r1
 80043be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	4618      	mov	r0, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	3b41      	subs	r3, #65	; 0x41
 80043da:	fa00 f203 	lsl.w	r2, r0, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043e6:	4b22      	ldr	r3, [pc, #136]	; (8004470 <HAL_ADC_ConfigChannel+0x234>)
 80043e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a21      	ldr	r2, [pc, #132]	; (8004474 <HAL_ADC_ConfigChannel+0x238>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d109      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x1cc>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b12      	cmp	r3, #18
 80043fa:	d105      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a19      	ldr	r2, [pc, #100]	; (8004474 <HAL_ADC_ConfigChannel+0x238>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d123      	bne.n	800445a <HAL_ADC_ConfigChannel+0x21e>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b10      	cmp	r3, #16
 8004418:	d003      	beq.n	8004422 <HAL_ADC_ConfigChannel+0x1e6>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b11      	cmp	r3, #17
 8004420:	d11b      	bne.n	800445a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b10      	cmp	r3, #16
 8004434:	d111      	bne.n	800445a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <HAL_ADC_ConfigChannel+0x23c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a10      	ldr	r2, [pc, #64]	; (800447c <HAL_ADC_ConfigChannel+0x240>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	0c9a      	lsrs	r2, r3, #18
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800444c:	e002      	b.n	8004454 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	3b01      	subs	r3, #1
 8004452:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f9      	bne.n	800444e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	40012300 	.word	0x40012300
 8004474:	40012000 	.word	0x40012000
 8004478:	20000014 	.word	0x20000014
 800447c:	431bde83 	.word	0x431bde83

08004480 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004488:	4b79      	ldr	r3, [pc, #484]	; (8004670 <ADC_Init+0x1f0>)
 800448a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	021a      	lsls	r2, r3, #8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6859      	ldr	r1, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6899      	ldr	r1, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	4a58      	ldr	r2, [pc, #352]	; (8004674 <ADC_Init+0x1f4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004526:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6899      	ldr	r1, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6899      	ldr	r1, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	e00f      	b.n	800457e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800456c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800457c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0202 	bic.w	r2, r2, #2
 800458c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6899      	ldr	r1, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	7e1b      	ldrb	r3, [r3, #24]
 8004598:	005a      	lsls	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01b      	beq.n	80045e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80045ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6859      	ldr	r1, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	3b01      	subs	r3, #1
 80045d8:	035a      	lsls	r2, r3, #13
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	e007      	b.n	80045f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	3b01      	subs	r3, #1
 8004610:	051a      	lsls	r2, r3, #20
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6899      	ldr	r1, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004636:	025a      	lsls	r2, r3, #9
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6899      	ldr	r1, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	029a      	lsls	r2, r3, #10
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	609a      	str	r2, [r3, #8]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	40012300 	.word	0x40012300
 8004674:	0f000001 	.word	0x0f000001

08004678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <__NVIC_SetPriorityGrouping+0x44>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004694:	4013      	ands	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046aa:	4a04      	ldr	r2, [pc, #16]	; (80046bc <__NVIC_SetPriorityGrouping+0x44>)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	60d3      	str	r3, [r2, #12]
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <__NVIC_GetPriorityGrouping+0x18>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	0a1b      	lsrs	r3, r3, #8
 80046ca:	f003 0307 	and.w	r3, r3, #7
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	e000ed00 	.word	0xe000ed00

080046dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	db0b      	blt.n	8004706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	f003 021f 	and.w	r2, r3, #31
 80046f4:	4907      	ldr	r1, [pc, #28]	; (8004714 <__NVIC_EnableIRQ+0x38>)
 80046f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	2001      	movs	r0, #1
 80046fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	e000e100 	.word	0xe000e100

08004718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	6039      	str	r1, [r7, #0]
 8004722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004728:	2b00      	cmp	r3, #0
 800472a:	db0a      	blt.n	8004742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	b2da      	uxtb	r2, r3
 8004730:	490c      	ldr	r1, [pc, #48]	; (8004764 <__NVIC_SetPriority+0x4c>)
 8004732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004736:	0112      	lsls	r2, r2, #4
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	440b      	add	r3, r1
 800473c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004740:	e00a      	b.n	8004758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	4908      	ldr	r1, [pc, #32]	; (8004768 <__NVIC_SetPriority+0x50>)
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	3b04      	subs	r3, #4
 8004750:	0112      	lsls	r2, r2, #4
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	440b      	add	r3, r1
 8004756:	761a      	strb	r2, [r3, #24]
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	e000e100 	.word	0xe000e100
 8004768:	e000ed00 	.word	0xe000ed00

0800476c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800476c:	b480      	push	{r7}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f1c3 0307 	rsb	r3, r3, #7
 8004786:	2b04      	cmp	r3, #4
 8004788:	bf28      	it	cs
 800478a:	2304      	movcs	r3, #4
 800478c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3304      	adds	r3, #4
 8004792:	2b06      	cmp	r3, #6
 8004794:	d902      	bls.n	800479c <NVIC_EncodePriority+0x30>
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	3b03      	subs	r3, #3
 800479a:	e000      	b.n	800479e <NVIC_EncodePriority+0x32>
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a0:	f04f 32ff 	mov.w	r2, #4294967295
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43da      	mvns	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	401a      	ands	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047b4:	f04f 31ff 	mov.w	r1, #4294967295
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	fa01 f303 	lsl.w	r3, r1, r3
 80047be:	43d9      	mvns	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c4:	4313      	orrs	r3, r2
         );
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3724      	adds	r7, #36	; 0x24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047e4:	d301      	bcc.n	80047ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047e6:	2301      	movs	r3, #1
 80047e8:	e00f      	b.n	800480a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <SysTick_Config+0x40>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047f2:	210f      	movs	r1, #15
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295
 80047f8:	f7ff ff8e 	bl	8004718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <SysTick_Config+0x40>)
 80047fe:	2200      	movs	r2, #0
 8004800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004802:	4b04      	ldr	r3, [pc, #16]	; (8004814 <SysTick_Config+0x40>)
 8004804:	2207      	movs	r2, #7
 8004806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	e000e010 	.word	0xe000e010

08004818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff ff29 	bl	8004678 <__NVIC_SetPriorityGrouping>
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af00      	add	r7, sp, #0
 8004834:	4603      	mov	r3, r0
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004840:	f7ff ff3e 	bl	80046c0 <__NVIC_GetPriorityGrouping>
 8004844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	f7ff ff8e 	bl	800476c <NVIC_EncodePriority>
 8004850:	4602      	mov	r2, r0
 8004852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ff5d 	bl	8004718 <__NVIC_SetPriority>
}
 800485e:	bf00      	nop
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	4603      	mov	r3, r0
 800486e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff ff31 	bl	80046dc <__NVIC_EnableIRQ>
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff ffa2 	bl	80047d4 <SysTick_Config>
 8004890:	4603      	mov	r3, r0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048a8:	f7ff fc54 	bl	8004154 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e099      	b.n	80049ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d8:	e00f      	b.n	80048fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048da:	f7ff fc3b 	bl	8004154 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d908      	bls.n	80048fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2203      	movs	r2, #3
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e078      	b.n	80049ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e8      	bne.n	80048da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4b38      	ldr	r3, [pc, #224]	; (80049f4 <HAL_DMA_Init+0x158>)
 8004914:	4013      	ands	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004926:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800493e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	2b04      	cmp	r3, #4
 8004952:	d107      	bne.n	8004964 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	4313      	orrs	r3, r2
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0307 	bic.w	r3, r3, #7
 800497a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2b04      	cmp	r3, #4
 800498c:	d117      	bne.n	80049be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f9e9 	bl	8004d78 <DMA_CheckFifoParam>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2240      	movs	r2, #64	; 0x40
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049ba:	2301      	movs	r3, #1
 80049bc:	e016      	b.n	80049ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f9a0 	bl	8004d0c <DMA_CalcBaseAndBitshift>
 80049cc:	4603      	mov	r3, r0
 80049ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	223f      	movs	r2, #63	; 0x3f
 80049d6:	409a      	lsls	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	f010803f 	.word	0xf010803f

080049f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a04:	4b92      	ldr	r3, [pc, #584]	; (8004c50 <HAL_DMA_IRQHandler+0x258>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a92      	ldr	r2, [pc, #584]	; (8004c54 <HAL_DMA_IRQHandler+0x25c>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	0a9b      	lsrs	r3, r3, #10
 8004a10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a22:	2208      	movs	r2, #8
 8004a24:	409a      	lsls	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01a      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d013      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0204 	bic.w	r2, r2, #4
 8004a4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a50:	2208      	movs	r2, #8
 8004a52:	409a      	lsls	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	f043 0201 	orr.w	r2, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a68:	2201      	movs	r2, #1
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d012      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00b      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a86:	2201      	movs	r2, #1
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	f043 0202 	orr.w	r2, r3, #2
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	409a      	lsls	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d012      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abc:	2204      	movs	r2, #4
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac8:	f043 0204 	orr.w	r2, r3, #4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad4:	2210      	movs	r2, #16
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d043      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d03c      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af2:	2210      	movs	r2, #16
 8004af4:	409a      	lsls	r2, r3
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d018      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d108      	bne.n	8004b28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d024      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	4798      	blx	r3
 8004b26:	e01f      	b.n	8004b68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01b      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	4798      	blx	r3
 8004b38:	e016      	b.n	8004b68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0208 	bic.w	r2, r2, #8
 8004b56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	409a      	lsls	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 808e 	beq.w	8004c96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8086 	beq.w	8004c96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8e:	2220      	movs	r2, #32
 8004b90:	409a      	lsls	r2, r3
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d136      	bne.n	8004c10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0216 	bic.w	r2, r2, #22
 8004bb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d103      	bne.n	8004bd2 <HAL_DMA_IRQHandler+0x1da>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0208 	bic.w	r2, r2, #8
 8004be0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be6:	223f      	movs	r2, #63	; 0x3f
 8004be8:	409a      	lsls	r2, r3
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d07d      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	4798      	blx	r3
        }
        return;
 8004c0e:	e078      	b.n	8004d02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01c      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d108      	bne.n	8004c3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d030      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	4798      	blx	r3
 8004c3c:	e02b      	b.n	8004c96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d027      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
 8004c4e:	e022      	b.n	8004c96 <HAL_DMA_IRQHandler+0x29e>
 8004c50:	20000014 	.word	0x20000014
 8004c54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10f      	bne.n	8004c86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0210 	bic.w	r2, r2, #16
 8004c74:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d032      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d022      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2205      	movs	r2, #5
 8004cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d307      	bcc.n	8004cde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f2      	bne.n	8004cc2 <HAL_DMA_IRQHandler+0x2ca>
 8004cdc:	e000      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004cde:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4798      	blx	r3
 8004d00:	e000      	b.n	8004d04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004d02:	bf00      	nop
    }
  }
}
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop

08004d0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	3b10      	subs	r3, #16
 8004d1c:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <DMA_CalcBaseAndBitshift+0x64>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d26:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <DMA_CalcBaseAndBitshift+0x68>)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d909      	bls.n	8004d4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	1d1a      	adds	r2, r3, #4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d4c:	e007      	b.n	8004d5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d56:	f023 0303 	bic.w	r3, r3, #3
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	aaaaaaab 	.word	0xaaaaaaab
 8004d74:	0800c3e4 	.word	0x0800c3e4

08004d78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d11f      	bne.n	8004dd2 <DMA_CheckFifoParam+0x5a>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d856      	bhi.n	8004e46 <DMA_CheckFifoParam+0xce>
 8004d98:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <DMA_CheckFifoParam+0x28>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004db1 	.word	0x08004db1
 8004da4:	08004dc3 	.word	0x08004dc3
 8004da8:	08004db1 	.word	0x08004db1
 8004dac:	08004e47 	.word	0x08004e47
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d046      	beq.n	8004e4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc0:	e043      	b.n	8004e4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dca:	d140      	bne.n	8004e4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd0:	e03d      	b.n	8004e4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dda:	d121      	bne.n	8004e20 <DMA_CheckFifoParam+0xa8>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d837      	bhi.n	8004e52 <DMA_CheckFifoParam+0xda>
 8004de2:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <DMA_CheckFifoParam+0x70>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004df9 	.word	0x08004df9
 8004dec:	08004dff 	.word	0x08004dff
 8004df0:	08004df9 	.word	0x08004df9
 8004df4:	08004e11 	.word	0x08004e11
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dfc:	e030      	b.n	8004e60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d025      	beq.n	8004e56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e0e:	e022      	b.n	8004e56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e18:	d11f      	bne.n	8004e5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e1e:	e01c      	b.n	8004e5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d903      	bls.n	8004e2e <DMA_CheckFifoParam+0xb6>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d003      	beq.n	8004e34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e2c:	e018      	b.n	8004e60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
      break;
 8004e32:	e015      	b.n	8004e60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00e      	beq.n	8004e5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      break;
 8004e44:	e00b      	b.n	8004e5e <DMA_CheckFifoParam+0xe6>
      break;
 8004e46:	bf00      	nop
 8004e48:	e00a      	b.n	8004e60 <DMA_CheckFifoParam+0xe8>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e008      	b.n	8004e60 <DMA_CheckFifoParam+0xe8>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e006      	b.n	8004e60 <DMA_CheckFifoParam+0xe8>
      break;
 8004e52:	bf00      	nop
 8004e54:	e004      	b.n	8004e60 <DMA_CheckFifoParam+0xe8>
      break;
 8004e56:	bf00      	nop
 8004e58:	e002      	b.n	8004e60 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e5a:	bf00      	nop
 8004e5c:	e000      	b.n	8004e60 <DMA_CheckFifoParam+0xe8>
      break;
 8004e5e:	bf00      	nop
    }
  } 
  
  return status; 
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop

08004e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	e16b      	b.n	8005164 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	f040 815a 	bne.w	800515e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d005      	beq.n	8004ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d130      	bne.n	8004f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	2203      	movs	r2, #3
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ef8:	2201      	movs	r2, #1
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	43db      	mvns	r3, r3
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4013      	ands	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f003 0201 	and.w	r2, r3, #1
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d017      	beq.n	8004f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	43db      	mvns	r3, r3
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4013      	ands	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d123      	bne.n	8004fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	08da      	lsrs	r2, r3, #3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3208      	adds	r2, #8
 8004f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	220f      	movs	r2, #15
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	08da      	lsrs	r2, r3, #3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3208      	adds	r2, #8
 8004fae:	69b9      	ldr	r1, [r7, #24]
 8004fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f003 0203 	and.w	r2, r3, #3
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80b4 	beq.w	800515e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	4b60      	ldr	r3, [pc, #384]	; (800517c <HAL_GPIO_Init+0x30c>)
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffe:	4a5f      	ldr	r2, [pc, #380]	; (800517c <HAL_GPIO_Init+0x30c>)
 8005000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005004:	6453      	str	r3, [r2, #68]	; 0x44
 8005006:	4b5d      	ldr	r3, [pc, #372]	; (800517c <HAL_GPIO_Init+0x30c>)
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005012:	4a5b      	ldr	r2, [pc, #364]	; (8005180 <HAL_GPIO_Init+0x310>)
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	3302      	adds	r3, #2
 800501a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	220f      	movs	r2, #15
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a52      	ldr	r2, [pc, #328]	; (8005184 <HAL_GPIO_Init+0x314>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02b      	beq.n	8005096 <HAL_GPIO_Init+0x226>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a51      	ldr	r2, [pc, #324]	; (8005188 <HAL_GPIO_Init+0x318>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d025      	beq.n	8005092 <HAL_GPIO_Init+0x222>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a50      	ldr	r2, [pc, #320]	; (800518c <HAL_GPIO_Init+0x31c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01f      	beq.n	800508e <HAL_GPIO_Init+0x21e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a4f      	ldr	r2, [pc, #316]	; (8005190 <HAL_GPIO_Init+0x320>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d019      	beq.n	800508a <HAL_GPIO_Init+0x21a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a4e      	ldr	r2, [pc, #312]	; (8005194 <HAL_GPIO_Init+0x324>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <HAL_GPIO_Init+0x216>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a4d      	ldr	r2, [pc, #308]	; (8005198 <HAL_GPIO_Init+0x328>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00d      	beq.n	8005082 <HAL_GPIO_Init+0x212>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a4c      	ldr	r2, [pc, #304]	; (800519c <HAL_GPIO_Init+0x32c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d007      	beq.n	800507e <HAL_GPIO_Init+0x20e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a4b      	ldr	r2, [pc, #300]	; (80051a0 <HAL_GPIO_Init+0x330>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d101      	bne.n	800507a <HAL_GPIO_Init+0x20a>
 8005076:	2307      	movs	r3, #7
 8005078:	e00e      	b.n	8005098 <HAL_GPIO_Init+0x228>
 800507a:	2308      	movs	r3, #8
 800507c:	e00c      	b.n	8005098 <HAL_GPIO_Init+0x228>
 800507e:	2306      	movs	r3, #6
 8005080:	e00a      	b.n	8005098 <HAL_GPIO_Init+0x228>
 8005082:	2305      	movs	r3, #5
 8005084:	e008      	b.n	8005098 <HAL_GPIO_Init+0x228>
 8005086:	2304      	movs	r3, #4
 8005088:	e006      	b.n	8005098 <HAL_GPIO_Init+0x228>
 800508a:	2303      	movs	r3, #3
 800508c:	e004      	b.n	8005098 <HAL_GPIO_Init+0x228>
 800508e:	2302      	movs	r3, #2
 8005090:	e002      	b.n	8005098 <HAL_GPIO_Init+0x228>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <HAL_GPIO_Init+0x228>
 8005096:	2300      	movs	r3, #0
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	f002 0203 	and.w	r2, r2, #3
 800509e:	0092      	lsls	r2, r2, #2
 80050a0:	4093      	lsls	r3, r2
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050a8:	4935      	ldr	r1, [pc, #212]	; (8005180 <HAL_GPIO_Init+0x310>)
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	089b      	lsrs	r3, r3, #2
 80050ae:	3302      	adds	r3, #2
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050b6:	4b3b      	ldr	r3, [pc, #236]	; (80051a4 <HAL_GPIO_Init+0x334>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050da:	4a32      	ldr	r2, [pc, #200]	; (80051a4 <HAL_GPIO_Init+0x334>)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050e0:	4b30      	ldr	r3, [pc, #192]	; (80051a4 <HAL_GPIO_Init+0x334>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	43db      	mvns	r3, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4013      	ands	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005104:	4a27      	ldr	r2, [pc, #156]	; (80051a4 <HAL_GPIO_Init+0x334>)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800510a:	4b26      	ldr	r3, [pc, #152]	; (80051a4 <HAL_GPIO_Init+0x334>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	43db      	mvns	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800512e:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <HAL_GPIO_Init+0x334>)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005134:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <HAL_GPIO_Init+0x334>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005158:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <HAL_GPIO_Init+0x334>)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3301      	adds	r3, #1
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b0f      	cmp	r3, #15
 8005168:	f67f ae90 	bls.w	8004e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	3724      	adds	r7, #36	; 0x24
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800
 8005180:	40013800 	.word	0x40013800
 8005184:	40020000 	.word	0x40020000
 8005188:	40020400 	.word	0x40020400
 800518c:	40020800 	.word	0x40020800
 8005190:	40020c00 	.word	0x40020c00
 8005194:	40021000 	.word	0x40021000
 8005198:	40021400 	.word	0x40021400
 800519c:	40021800 	.word	0x40021800
 80051a0:	40021c00 	.word	0x40021c00
 80051a4:	40013c00 	.word	0x40013c00

080051a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	887b      	ldrh	r3, [r7, #2]
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051c0:	2301      	movs	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
 80051c4:	e001      	b.n	80051ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	807b      	strh	r3, [r7, #2]
 80051e4:	4613      	mov	r3, r2
 80051e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051e8:	787b      	ldrb	r3, [r7, #1]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051ee:	887a      	ldrh	r2, [r7, #2]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051f4:	e003      	b.n	80051fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051f6:	887b      	ldrh	r3, [r7, #2]
 80051f8:	041a      	lsls	r2, r3, #16
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	619a      	str	r2, [r3, #24]
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e12b      	b.n	8005476 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc fc56 	bl	8001ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2224      	movs	r2, #36	; 0x24
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0201 	bic.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800525e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800526e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005270:	f001 fbd8 	bl	8006a24 <HAL_RCC_GetPCLK1Freq>
 8005274:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4a81      	ldr	r2, [pc, #516]	; (8005480 <HAL_I2C_Init+0x274>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d807      	bhi.n	8005290 <HAL_I2C_Init+0x84>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a80      	ldr	r2, [pc, #512]	; (8005484 <HAL_I2C_Init+0x278>)
 8005284:	4293      	cmp	r3, r2
 8005286:	bf94      	ite	ls
 8005288:	2301      	movls	r3, #1
 800528a:	2300      	movhi	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e006      	b.n	800529e <HAL_I2C_Init+0x92>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4a7d      	ldr	r2, [pc, #500]	; (8005488 <HAL_I2C_Init+0x27c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	bf94      	ite	ls
 8005298:	2301      	movls	r3, #1
 800529a:	2300      	movhi	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e0e7      	b.n	8005476 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a78      	ldr	r2, [pc, #480]	; (800548c <HAL_I2C_Init+0x280>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	0c9b      	lsrs	r3, r3, #18
 80052b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4a6a      	ldr	r2, [pc, #424]	; (8005480 <HAL_I2C_Init+0x274>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d802      	bhi.n	80052e0 <HAL_I2C_Init+0xd4>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	3301      	adds	r3, #1
 80052de:	e009      	b.n	80052f4 <HAL_I2C_Init+0xe8>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052e6:	fb02 f303 	mul.w	r3, r2, r3
 80052ea:	4a69      	ldr	r2, [pc, #420]	; (8005490 <HAL_I2C_Init+0x284>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	099b      	lsrs	r3, r3, #6
 80052f2:	3301      	adds	r3, #1
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005306:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	495c      	ldr	r1, [pc, #368]	; (8005480 <HAL_I2C_Init+0x274>)
 8005310:	428b      	cmp	r3, r1
 8005312:	d819      	bhi.n	8005348 <HAL_I2C_Init+0x13c>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	1e59      	subs	r1, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005322:	1c59      	adds	r1, r3, #1
 8005324:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005328:	400b      	ands	r3, r1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_I2C_Init+0x138>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1e59      	subs	r1, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	fbb1 f3f3 	udiv	r3, r1, r3
 800533c:	3301      	adds	r3, #1
 800533e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005342:	e051      	b.n	80053e8 <HAL_I2C_Init+0x1dc>
 8005344:	2304      	movs	r3, #4
 8005346:	e04f      	b.n	80053e8 <HAL_I2C_Init+0x1dc>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d111      	bne.n	8005374 <HAL_I2C_Init+0x168>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1e58      	subs	r0, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6859      	ldr	r1, [r3, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	440b      	add	r3, r1
 800535e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005362:	3301      	adds	r3, #1
 8005364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005368:	2b00      	cmp	r3, #0
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	e012      	b.n	800539a <HAL_I2C_Init+0x18e>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	1e58      	subs	r0, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6859      	ldr	r1, [r3, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	0099      	lsls	r1, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	fbb0 f3f3 	udiv	r3, r0, r3
 800538a:	3301      	adds	r3, #1
 800538c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_I2C_Init+0x196>
 800539e:	2301      	movs	r3, #1
 80053a0:	e022      	b.n	80053e8 <HAL_I2C_Init+0x1dc>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10e      	bne.n	80053c8 <HAL_I2C_Init+0x1bc>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	1e58      	subs	r0, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6859      	ldr	r1, [r3, #4]
 80053b2:	460b      	mov	r3, r1
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	440b      	add	r3, r1
 80053b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80053bc:	3301      	adds	r3, #1
 80053be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c6:	e00f      	b.n	80053e8 <HAL_I2C_Init+0x1dc>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	1e58      	subs	r0, r3, #1
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6859      	ldr	r1, [r3, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	0099      	lsls	r1, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	fbb0 f3f3 	udiv	r3, r0, r3
 80053de:	3301      	adds	r3, #1
 80053e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	6809      	ldr	r1, [r1, #0]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005416:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6911      	ldr	r1, [r2, #16]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68d2      	ldr	r2, [r2, #12]
 8005422:	4311      	orrs	r1, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	430b      	orrs	r3, r1
 800542a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695a      	ldr	r2, [r3, #20]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	000186a0 	.word	0x000186a0
 8005484:	001e847f 	.word	0x001e847f
 8005488:	003d08ff 	.word	0x003d08ff
 800548c:	431bde83 	.word	0x431bde83
 8005490:	10624dd3 	.word	0x10624dd3

08005494 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	4608      	mov	r0, r1
 800549e:	4611      	mov	r1, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	817b      	strh	r3, [r7, #10]
 80054a6:	460b      	mov	r3, r1
 80054a8:	813b      	strh	r3, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054ae:	f7fe fe51 	bl	8004154 <HAL_GetTick>
 80054b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b20      	cmp	r3, #32
 80054be:	f040 80d9 	bne.w	8005674 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	2319      	movs	r3, #25
 80054c8:	2201      	movs	r2, #1
 80054ca:	496d      	ldr	r1, [pc, #436]	; (8005680 <HAL_I2C_Mem_Write+0x1ec>)
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 fc7f 	bl	8005dd0 <I2C_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80054d8:	2302      	movs	r3, #2
 80054da:	e0cc      	b.n	8005676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_I2C_Mem_Write+0x56>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e0c5      	b.n	8005676 <HAL_I2C_Mem_Write+0x1e2>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d007      	beq.n	8005510 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800551e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2221      	movs	r2, #33	; 0x21
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2240      	movs	r2, #64	; 0x40
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005540:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a4d      	ldr	r2, [pc, #308]	; (8005684 <HAL_I2C_Mem_Write+0x1f0>)
 8005550:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005552:	88f8      	ldrh	r0, [r7, #6]
 8005554:	893a      	ldrh	r2, [r7, #8]
 8005556:	8979      	ldrh	r1, [r7, #10]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	4603      	mov	r3, r0
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 fab6 	bl	8005ad4 <I2C_RequestMemoryWrite>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d052      	beq.n	8005614 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e081      	b.n	8005676 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 fd00 	bl	8005f7c <I2C_WaitOnTXEFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00d      	beq.n	800559e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2b04      	cmp	r3, #4
 8005588:	d107      	bne.n	800559a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e06b      	b.n	8005676 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	781a      	ldrb	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d11b      	bne.n	8005614 <HAL_I2C_Mem_Write+0x180>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d017      	beq.n	8005614 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	781a      	ldrb	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1aa      	bne.n	8005572 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fcec 	bl	8005ffe <I2C_WaitOnBTFFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00d      	beq.n	8005648 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	2b04      	cmp	r3, #4
 8005632:	d107      	bne.n	8005644 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005642:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e016      	b.n	8005676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	e000      	b.n	8005676 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005674:	2302      	movs	r3, #2
  }
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	00100002 	.word	0x00100002
 8005684:	ffff0000 	.word	0xffff0000

08005688 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	; 0x30
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	4608      	mov	r0, r1
 8005692:	4611      	mov	r1, r2
 8005694:	461a      	mov	r2, r3
 8005696:	4603      	mov	r3, r0
 8005698:	817b      	strh	r3, [r7, #10]
 800569a:	460b      	mov	r3, r1
 800569c:	813b      	strh	r3, [r7, #8]
 800569e:	4613      	mov	r3, r2
 80056a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056a2:	f7fe fd57 	bl	8004154 <HAL_GetTick>
 80056a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	f040 8208 	bne.w	8005ac6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	2319      	movs	r3, #25
 80056bc:	2201      	movs	r2, #1
 80056be:	497b      	ldr	r1, [pc, #492]	; (80058ac <HAL_I2C_Mem_Read+0x224>)
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fb85 	bl	8005dd0 <I2C_WaitOnFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
 80056ce:	e1fb      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_I2C_Mem_Read+0x56>
 80056da:	2302      	movs	r3, #2
 80056dc:	e1f4      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x440>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d007      	beq.n	8005704 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005712:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2222      	movs	r2, #34	; 0x22
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2240      	movs	r2, #64	; 0x40
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005734:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a5b      	ldr	r2, [pc, #364]	; (80058b0 <HAL_I2C_Mem_Read+0x228>)
 8005744:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005746:	88f8      	ldrh	r0, [r7, #6]
 8005748:	893a      	ldrh	r2, [r7, #8]
 800574a:	8979      	ldrh	r1, [r7, #10]
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	4603      	mov	r3, r0
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fa52 	bl	8005c00 <I2C_RequestMemoryRead>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e1b0      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576a:	2b00      	cmp	r3, #0
 800576c:	d113      	bne.n	8005796 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576e:	2300      	movs	r3, #0
 8005770:	623b      	str	r3, [r7, #32]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	623b      	str	r3, [r7, #32]
 8005782:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e184      	b.n	8005aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579a:	2b01      	cmp	r3, #1
 800579c:	d11b      	bne.n	80057d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e164      	b.n	8005aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d11b      	bne.n	8005816 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057fe:	2300      	movs	r3, #0
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	e144      	b.n	8005aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800582c:	e138      	b.n	8005aa0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005832:	2b03      	cmp	r3, #3
 8005834:	f200 80f1 	bhi.w	8005a1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	2b01      	cmp	r3, #1
 800583e:	d123      	bne.n	8005888 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fc1b 	bl	8006080 <I2C_WaitOnRXNEFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e139      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587c:	b29b      	uxth	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005886:	e10b      	b.n	8005aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588c:	2b02      	cmp	r3, #2
 800588e:	d14e      	bne.n	800592e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	2200      	movs	r2, #0
 8005898:	4906      	ldr	r1, [pc, #24]	; (80058b4 <HAL_I2C_Mem_Read+0x22c>)
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fa98 	bl	8005dd0 <I2C_WaitOnFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e10e      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x440>
 80058aa:	bf00      	nop
 80058ac:	00100002 	.word	0x00100002
 80058b0:	ffff0000 	.word	0xffff0000
 80058b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800592c:	e0b8      	b.n	8005aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	2200      	movs	r2, #0
 8005936:	4966      	ldr	r1, [pc, #408]	; (8005ad0 <HAL_I2C_Mem_Read+0x448>)
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fa49 	bl	8005dd0 <I2C_WaitOnFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0bf      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	2200      	movs	r2, #0
 8005992:	494f      	ldr	r1, [pc, #316]	; (8005ad0 <HAL_I2C_Mem_Read+0x448>)
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 fa1b 	bl	8005dd0 <I2C_WaitOnFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e091      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a18:	e042      	b.n	8005aa0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 fb2e 	bl	8006080 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e04c      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d118      	bne.n	8005aa0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f47f aec2 	bne.w	800582e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e000      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ac6:	2302      	movs	r3, #2
  }
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3728      	adds	r7, #40	; 0x28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	00010004 	.word	0x00010004

08005ad4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	4608      	mov	r0, r1
 8005ade:	4611      	mov	r1, r2
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	817b      	strh	r3, [r7, #10]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	813b      	strh	r3, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005afc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f960 	bl	8005dd0 <I2C_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00d      	beq.n	8005b32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b24:	d103      	bne.n	8005b2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e05f      	b.n	8005bf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b32:	897b      	ldrh	r3, [r7, #10]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	6a3a      	ldr	r2, [r7, #32]
 8005b46:	492d      	ldr	r1, [pc, #180]	; (8005bfc <I2C_RequestMemoryWrite+0x128>)
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f998 	bl	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e04c      	b.n	8005bf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b70:	6a39      	ldr	r1, [r7, #32]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fa02 	bl	8005f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00d      	beq.n	8005b9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d107      	bne.n	8005b96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e02b      	b.n	8005bf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d105      	bne.n	8005bac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ba0:	893b      	ldrh	r3, [r7, #8]
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	611a      	str	r2, [r3, #16]
 8005baa:	e021      	b.n	8005bf0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bac:	893b      	ldrh	r3, [r7, #8]
 8005bae:	0a1b      	lsrs	r3, r3, #8
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbc:	6a39      	ldr	r1, [r7, #32]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f9dc 	bl	8005f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d107      	bne.n	8005be2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e005      	b.n	8005bf2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005be6:	893b      	ldrh	r3, [r7, #8]
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	00010002 	.word	0x00010002

08005c00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	4608      	mov	r0, r1
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4603      	mov	r3, r0
 8005c10:	817b      	strh	r3, [r7, #10]
 8005c12:	460b      	mov	r3, r1
 8005c14:	813b      	strh	r3, [r7, #8]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f8c2 	bl	8005dd0 <I2C_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00d      	beq.n	8005c6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c60:	d103      	bne.n	8005c6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e0aa      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c6e:	897b      	ldrh	r3, [r7, #10]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	6a3a      	ldr	r2, [r7, #32]
 8005c82:	4952      	ldr	r1, [pc, #328]	; (8005dcc <I2C_RequestMemoryRead+0x1cc>)
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f8fa 	bl	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e097      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cac:	6a39      	ldr	r1, [r7, #32]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f964 	bl	8005f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00d      	beq.n	8005cd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d107      	bne.n	8005cd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e076      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d105      	bne.n	8005ce8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cdc:	893b      	ldrh	r3, [r7, #8]
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	611a      	str	r2, [r3, #16]
 8005ce6:	e021      	b.n	8005d2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ce8:	893b      	ldrh	r3, [r7, #8]
 8005cea:	0a1b      	lsrs	r3, r3, #8
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf8:	6a39      	ldr	r1, [r7, #32]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f93e 	bl	8005f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d107      	bne.n	8005d1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e050      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d22:	893b      	ldrh	r3, [r7, #8]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2e:	6a39      	ldr	r1, [r7, #32]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f923 	bl	8005f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00d      	beq.n	8005d58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d107      	bne.n	8005d54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e035      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f82b 	bl	8005dd0 <I2C_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00d      	beq.n	8005d9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d8e:	d103      	bne.n	8005d98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e013      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d9c:	897b      	ldrh	r3, [r7, #10]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	6a3a      	ldr	r2, [r7, #32]
 8005db0:	4906      	ldr	r1, [pc, #24]	; (8005dcc <I2C_RequestMemoryRead+0x1cc>)
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f863 	bl	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	00010002 	.word	0x00010002

08005dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005de0:	e025      	b.n	8005e2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de8:	d021      	beq.n	8005e2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dea:	f7fe f9b3 	bl	8004154 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d302      	bcc.n	8005e00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d116      	bne.n	8005e2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f043 0220 	orr.w	r2, r3, #32
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e023      	b.n	8005e76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	0c1b      	lsrs	r3, r3, #16
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d10d      	bne.n	8005e54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	43da      	mvns	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	bf0c      	ite	eq
 8005e4a:	2301      	moveq	r3, #1
 8005e4c:	2300      	movne	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	e00c      	b.n	8005e6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	43da      	mvns	r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	bf0c      	ite	eq
 8005e66:	2301      	moveq	r3, #1
 8005e68:	2300      	movne	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d0b6      	beq.n	8005de2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
 8005e8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e8c:	e051      	b.n	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e9c:	d123      	bne.n	8005ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005eb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	f043 0204 	orr.w	r2, r3, #4
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e046      	b.n	8005f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d021      	beq.n	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eee:	f7fe f931 	bl	8004154 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d302      	bcc.n	8005f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d116      	bne.n	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f043 0220 	orr.w	r2, r3, #32
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e020      	b.n	8005f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	0c1b      	lsrs	r3, r3, #16
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d10c      	bne.n	8005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	43da      	mvns	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4013      	ands	r3, r2
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf14      	ite	ne
 8005f4e:	2301      	movne	r3, #1
 8005f50:	2300      	moveq	r3, #0
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	e00b      	b.n	8005f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	43da      	mvns	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4013      	ands	r3, r2
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bf14      	ite	ne
 8005f68:	2301      	movne	r3, #1
 8005f6a:	2300      	moveq	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d18d      	bne.n	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f88:	e02d      	b.n	8005fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 f8ce 	bl	800612c <I2C_IsAcknowledgeFailed>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e02d      	b.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d021      	beq.n	8005fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa2:	f7fe f8d7 	bl	8004154 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d302      	bcc.n	8005fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d116      	bne.n	8005fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f043 0220 	orr.w	r2, r3, #32
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e007      	b.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	2b80      	cmp	r3, #128	; 0x80
 8005ff2:	d1ca      	bne.n	8005f8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800600a:	e02d      	b.n	8006068 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 f88d 	bl	800612c <I2C_IsAcknowledgeFailed>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e02d      	b.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006022:	d021      	beq.n	8006068 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006024:	f7fe f896 	bl	8004154 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	429a      	cmp	r2, r3
 8006032:	d302      	bcc.n	800603a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d116      	bne.n	8006068 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	f043 0220 	orr.w	r2, r3, #32
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e007      	b.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b04      	cmp	r3, #4
 8006074:	d1ca      	bne.n	800600c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800608c:	e042      	b.n	8006114 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	2b10      	cmp	r3, #16
 800609a:	d119      	bne.n	80060d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0210 	mvn.w	r2, #16
 80060a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e029      	b.n	8006124 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d0:	f7fe f840 	bl	8004154 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d302      	bcc.n	80060e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d116      	bne.n	8006114 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	f043 0220 	orr.w	r2, r3, #32
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e007      	b.n	8006124 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611e:	2b40      	cmp	r3, #64	; 0x40
 8006120:	d1b5      	bne.n	800608e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006142:	d11b      	bne.n	800617c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800614c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006168:	f043 0204 	orr.w	r2, r3, #4
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e264      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d075      	beq.n	8006296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061aa:	4ba3      	ldr	r3, [pc, #652]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d00c      	beq.n	80061d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061b6:	4ba0      	ldr	r3, [pc, #640]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d112      	bne.n	80061e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061c2:	4b9d      	ldr	r3, [pc, #628]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ce:	d10b      	bne.n	80061e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d0:	4b99      	ldr	r3, [pc, #612]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d05b      	beq.n	8006294 <HAL_RCC_OscConfig+0x108>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d157      	bne.n	8006294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e23f      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f0:	d106      	bne.n	8006200 <HAL_RCC_OscConfig+0x74>
 80061f2:	4b91      	ldr	r3, [pc, #580]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a90      	ldr	r2, [pc, #576]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80061f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	e01d      	b.n	800623c <HAL_RCC_OscConfig+0xb0>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006208:	d10c      	bne.n	8006224 <HAL_RCC_OscConfig+0x98>
 800620a:	4b8b      	ldr	r3, [pc, #556]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a8a      	ldr	r2, [pc, #552]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 8006210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	4b88      	ldr	r3, [pc, #544]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a87      	ldr	r2, [pc, #540]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 800621c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	e00b      	b.n	800623c <HAL_RCC_OscConfig+0xb0>
 8006224:	4b84      	ldr	r3, [pc, #528]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a83      	ldr	r2, [pc, #524]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 800622a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	4b81      	ldr	r3, [pc, #516]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a80      	ldr	r2, [pc, #512]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 8006236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800623a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d013      	beq.n	800626c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006244:	f7fd ff86 	bl	8004154 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800624c:	f7fd ff82 	bl	8004154 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b64      	cmp	r3, #100	; 0x64
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e204      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800625e:	4b76      	ldr	r3, [pc, #472]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0f0      	beq.n	800624c <HAL_RCC_OscConfig+0xc0>
 800626a:	e014      	b.n	8006296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626c:	f7fd ff72 	bl	8004154 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006274:	f7fd ff6e 	bl	8004154 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b64      	cmp	r3, #100	; 0x64
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e1f0      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006286:	4b6c      	ldr	r3, [pc, #432]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f0      	bne.n	8006274 <HAL_RCC_OscConfig+0xe8>
 8006292:	e000      	b.n	8006296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d063      	beq.n	800636a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062a2:	4b65      	ldr	r3, [pc, #404]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 030c 	and.w	r3, r3, #12
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ae:	4b62      	ldr	r3, [pc, #392]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d11c      	bne.n	80062f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ba:	4b5f      	ldr	r3, [pc, #380]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d116      	bne.n	80062f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062c6:	4b5c      	ldr	r3, [pc, #368]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d005      	beq.n	80062de <HAL_RCC_OscConfig+0x152>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d001      	beq.n	80062de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e1c4      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062de:	4b56      	ldr	r3, [pc, #344]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4952      	ldr	r1, [pc, #328]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062f2:	e03a      	b.n	800636a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d020      	beq.n	800633e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062fc:	4b4f      	ldr	r3, [pc, #316]	; (800643c <HAL_RCC_OscConfig+0x2b0>)
 80062fe:	2201      	movs	r2, #1
 8006300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006302:	f7fd ff27 	bl	8004154 <HAL_GetTick>
 8006306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006308:	e008      	b.n	800631c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800630a:	f7fd ff23 	bl	8004154 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e1a5      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800631c:	4b46      	ldr	r3, [pc, #280]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0f0      	beq.n	800630a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006328:	4b43      	ldr	r3, [pc, #268]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	4940      	ldr	r1, [pc, #256]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 8006338:	4313      	orrs	r3, r2
 800633a:	600b      	str	r3, [r1, #0]
 800633c:	e015      	b.n	800636a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800633e:	4b3f      	ldr	r3, [pc, #252]	; (800643c <HAL_RCC_OscConfig+0x2b0>)
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006344:	f7fd ff06 	bl	8004154 <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800634c:	f7fd ff02 	bl	8004154 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e184      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800635e:	4b36      	ldr	r3, [pc, #216]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1f0      	bne.n	800634c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0308 	and.w	r3, r3, #8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d030      	beq.n	80063d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d016      	beq.n	80063ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800637e:	4b30      	ldr	r3, [pc, #192]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 8006380:	2201      	movs	r2, #1
 8006382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006384:	f7fd fee6 	bl	8004154 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800638c:	f7fd fee2 	bl	8004154 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e164      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800639e:	4b26      	ldr	r3, [pc, #152]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80063a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f0      	beq.n	800638c <HAL_RCC_OscConfig+0x200>
 80063aa:	e015      	b.n	80063d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063ac:	4b24      	ldr	r3, [pc, #144]	; (8006440 <HAL_RCC_OscConfig+0x2b4>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b2:	f7fd fecf 	bl	8004154 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ba:	f7fd fecb 	bl	8004154 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e14d      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063cc:	4b1a      	ldr	r3, [pc, #104]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80063ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1f0      	bne.n	80063ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80a0 	beq.w	8006526 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ea:	4b13      	ldr	r3, [pc, #76]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10f      	bne.n	8006416 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f6:	2300      	movs	r3, #0
 80063f8:	60bb      	str	r3, [r7, #8]
 80063fa:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	4a0e      	ldr	r2, [pc, #56]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 8006400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006404:	6413      	str	r3, [r2, #64]	; 0x40
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <HAL_RCC_OscConfig+0x2ac>)
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640e:	60bb      	str	r3, [r7, #8]
 8006410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006412:	2301      	movs	r3, #1
 8006414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006416:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <HAL_RCC_OscConfig+0x2b8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d121      	bne.n	8006466 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006422:	4b08      	ldr	r3, [pc, #32]	; (8006444 <HAL_RCC_OscConfig+0x2b8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a07      	ldr	r2, [pc, #28]	; (8006444 <HAL_RCC_OscConfig+0x2b8>)
 8006428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800642c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800642e:	f7fd fe91 	bl	8004154 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006434:	e011      	b.n	800645a <HAL_RCC_OscConfig+0x2ce>
 8006436:	bf00      	nop
 8006438:	40023800 	.word	0x40023800
 800643c:	42470000 	.word	0x42470000
 8006440:	42470e80 	.word	0x42470e80
 8006444:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006448:	f7fd fe84 	bl	8004154 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e106      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645a:	4b85      	ldr	r3, [pc, #532]	; (8006670 <HAL_RCC_OscConfig+0x4e4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f0      	beq.n	8006448 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d106      	bne.n	800647c <HAL_RCC_OscConfig+0x2f0>
 800646e:	4b81      	ldr	r3, [pc, #516]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 8006470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006472:	4a80      	ldr	r2, [pc, #512]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 8006474:	f043 0301 	orr.w	r3, r3, #1
 8006478:	6713      	str	r3, [r2, #112]	; 0x70
 800647a:	e01c      	b.n	80064b6 <HAL_RCC_OscConfig+0x32a>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	2b05      	cmp	r3, #5
 8006482:	d10c      	bne.n	800649e <HAL_RCC_OscConfig+0x312>
 8006484:	4b7b      	ldr	r3, [pc, #492]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 8006486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006488:	4a7a      	ldr	r2, [pc, #488]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 800648a:	f043 0304 	orr.w	r3, r3, #4
 800648e:	6713      	str	r3, [r2, #112]	; 0x70
 8006490:	4b78      	ldr	r3, [pc, #480]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 8006492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006494:	4a77      	ldr	r2, [pc, #476]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	6713      	str	r3, [r2, #112]	; 0x70
 800649c:	e00b      	b.n	80064b6 <HAL_RCC_OscConfig+0x32a>
 800649e:	4b75      	ldr	r3, [pc, #468]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 80064a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a2:	4a74      	ldr	r2, [pc, #464]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 80064a4:	f023 0301 	bic.w	r3, r3, #1
 80064a8:	6713      	str	r3, [r2, #112]	; 0x70
 80064aa:	4b72      	ldr	r3, [pc, #456]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 80064ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ae:	4a71      	ldr	r2, [pc, #452]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 80064b0:	f023 0304 	bic.w	r3, r3, #4
 80064b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d015      	beq.n	80064ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064be:	f7fd fe49 	bl	8004154 <HAL_GetTick>
 80064c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064c4:	e00a      	b.n	80064dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064c6:	f7fd fe45 	bl	8004154 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e0c5      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064dc:	4b65      	ldr	r3, [pc, #404]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0ee      	beq.n	80064c6 <HAL_RCC_OscConfig+0x33a>
 80064e8:	e014      	b.n	8006514 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ea:	f7fd fe33 	bl	8004154 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064f0:	e00a      	b.n	8006508 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064f2:	f7fd fe2f 	bl	8004154 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006500:	4293      	cmp	r3, r2
 8006502:	d901      	bls.n	8006508 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e0af      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006508:	4b5a      	ldr	r3, [pc, #360]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 800650a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1ee      	bne.n	80064f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006514:	7dfb      	ldrb	r3, [r7, #23]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d105      	bne.n	8006526 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800651a:	4b56      	ldr	r3, [pc, #344]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	4a55      	ldr	r2, [pc, #340]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 8006520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006524:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 809b 	beq.w	8006666 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006530:	4b50      	ldr	r3, [pc, #320]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 030c 	and.w	r3, r3, #12
 8006538:	2b08      	cmp	r3, #8
 800653a:	d05c      	beq.n	80065f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d141      	bne.n	80065c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006544:	4b4c      	ldr	r3, [pc, #304]	; (8006678 <HAL_RCC_OscConfig+0x4ec>)
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800654a:	f7fd fe03 	bl	8004154 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006552:	f7fd fdff 	bl	8004154 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e081      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006564:	4b43      	ldr	r3, [pc, #268]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1f0      	bne.n	8006552 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	431a      	orrs	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	019b      	lsls	r3, r3, #6
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	085b      	lsrs	r3, r3, #1
 8006588:	3b01      	subs	r3, #1
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	061b      	lsls	r3, r3, #24
 8006594:	4937      	ldr	r1, [pc, #220]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 8006596:	4313      	orrs	r3, r2
 8006598:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800659a:	4b37      	ldr	r3, [pc, #220]	; (8006678 <HAL_RCC_OscConfig+0x4ec>)
 800659c:	2201      	movs	r2, #1
 800659e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a0:	f7fd fdd8 	bl	8004154 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065a8:	f7fd fdd4 	bl	8004154 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e056      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ba:	4b2e      	ldr	r3, [pc, #184]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f0      	beq.n	80065a8 <HAL_RCC_OscConfig+0x41c>
 80065c6:	e04e      	b.n	8006666 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c8:	4b2b      	ldr	r3, [pc, #172]	; (8006678 <HAL_RCC_OscConfig+0x4ec>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ce:	f7fd fdc1 	bl	8004154 <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065d6:	f7fd fdbd 	bl	8004154 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e03f      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065e8:	4b22      	ldr	r3, [pc, #136]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1f0      	bne.n	80065d6 <HAL_RCC_OscConfig+0x44a>
 80065f4:	e037      	b.n	8006666 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e032      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006602:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <HAL_RCC_OscConfig+0x4e8>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d028      	beq.n	8006662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800661a:	429a      	cmp	r2, r3
 800661c:	d121      	bne.n	8006662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006628:	429a      	cmp	r2, r3
 800662a:	d11a      	bne.n	8006662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006632:	4013      	ands	r3, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006638:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800663a:	4293      	cmp	r3, r2
 800663c:	d111      	bne.n	8006662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	3b01      	subs	r3, #1
 800664c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800664e:	429a      	cmp	r2, r3
 8006650:	d107      	bne.n	8006662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800665e:	429a      	cmp	r2, r3
 8006660:	d001      	beq.n	8006666 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40007000 	.word	0x40007000
 8006674:	40023800 	.word	0x40023800
 8006678:	42470060 	.word	0x42470060

0800667c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0cc      	b.n	800682a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006690:	4b68      	ldr	r3, [pc, #416]	; (8006834 <HAL_RCC_ClockConfig+0x1b8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d90c      	bls.n	80066b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800669e:	4b65      	ldr	r3, [pc, #404]	; (8006834 <HAL_RCC_ClockConfig+0x1b8>)
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066a6:	4b63      	ldr	r3, [pc, #396]	; (8006834 <HAL_RCC_ClockConfig+0x1b8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d001      	beq.n	80066b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0b8      	b.n	800682a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d020      	beq.n	8006706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066d0:	4b59      	ldr	r3, [pc, #356]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	4a58      	ldr	r2, [pc, #352]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 80066d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066e8:	4b53      	ldr	r3, [pc, #332]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	4a52      	ldr	r2, [pc, #328]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 80066ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066f4:	4b50      	ldr	r3, [pc, #320]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	494d      	ldr	r1, [pc, #308]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 8006702:	4313      	orrs	r3, r2
 8006704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d044      	beq.n	800679c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d107      	bne.n	800672a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671a:	4b47      	ldr	r3, [pc, #284]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d119      	bne.n	800675a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e07f      	b.n	800682a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d003      	beq.n	800673a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006736:	2b03      	cmp	r3, #3
 8006738:	d107      	bne.n	800674a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800673a:	4b3f      	ldr	r3, [pc, #252]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d109      	bne.n	800675a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e06f      	b.n	800682a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800674a:	4b3b      	ldr	r3, [pc, #236]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e067      	b.n	800682a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800675a:	4b37      	ldr	r3, [pc, #220]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f023 0203 	bic.w	r2, r3, #3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	4934      	ldr	r1, [pc, #208]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 8006768:	4313      	orrs	r3, r2
 800676a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800676c:	f7fd fcf2 	bl	8004154 <HAL_GetTick>
 8006770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006772:	e00a      	b.n	800678a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006774:	f7fd fcee 	bl	8004154 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006782:	4293      	cmp	r3, r2
 8006784:	d901      	bls.n	800678a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e04f      	b.n	800682a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678a:	4b2b      	ldr	r3, [pc, #172]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 020c 	and.w	r2, r3, #12
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	429a      	cmp	r2, r3
 800679a:	d1eb      	bne.n	8006774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800679c:	4b25      	ldr	r3, [pc, #148]	; (8006834 <HAL_RCC_ClockConfig+0x1b8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d20c      	bcs.n	80067c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067aa:	4b22      	ldr	r3, [pc, #136]	; (8006834 <HAL_RCC_ClockConfig+0x1b8>)
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b2:	4b20      	ldr	r3, [pc, #128]	; (8006834 <HAL_RCC_ClockConfig+0x1b8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d001      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e032      	b.n	800682a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d008      	beq.n	80067e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067d0:	4b19      	ldr	r3, [pc, #100]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4916      	ldr	r1, [pc, #88]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d009      	beq.n	8006802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067ee:	4b12      	ldr	r3, [pc, #72]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	490e      	ldr	r1, [pc, #56]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006802:	f000 f821 	bl	8006848 <HAL_RCC_GetSysClockFreq>
 8006806:	4602      	mov	r2, r0
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <HAL_RCC_ClockConfig+0x1bc>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	490a      	ldr	r1, [pc, #40]	; (800683c <HAL_RCC_ClockConfig+0x1c0>)
 8006814:	5ccb      	ldrb	r3, [r1, r3]
 8006816:	fa22 f303 	lsr.w	r3, r2, r3
 800681a:	4a09      	ldr	r2, [pc, #36]	; (8006840 <HAL_RCC_ClockConfig+0x1c4>)
 800681c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800681e:	4b09      	ldr	r3, [pc, #36]	; (8006844 <HAL_RCC_ClockConfig+0x1c8>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f7fd fc52 	bl	80040cc <HAL_InitTick>

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	40023c00 	.word	0x40023c00
 8006838:	40023800 	.word	0x40023800
 800683c:	0800c3cc 	.word	0x0800c3cc
 8006840:	20000014 	.word	0x20000014
 8006844:	20000050 	.word	0x20000050

08006848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	607b      	str	r3, [r7, #4]
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	2300      	movs	r3, #0
 800685a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006860:	4b67      	ldr	r3, [pc, #412]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f003 030c 	and.w	r3, r3, #12
 8006868:	2b08      	cmp	r3, #8
 800686a:	d00d      	beq.n	8006888 <HAL_RCC_GetSysClockFreq+0x40>
 800686c:	2b08      	cmp	r3, #8
 800686e:	f200 80bd 	bhi.w	80069ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <HAL_RCC_GetSysClockFreq+0x34>
 8006876:	2b04      	cmp	r3, #4
 8006878:	d003      	beq.n	8006882 <HAL_RCC_GetSysClockFreq+0x3a>
 800687a:	e0b7      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800687c:	4b61      	ldr	r3, [pc, #388]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800687e:	60bb      	str	r3, [r7, #8]
       break;
 8006880:	e0b7      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006882:	4b61      	ldr	r3, [pc, #388]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006884:	60bb      	str	r3, [r7, #8]
      break;
 8006886:	e0b4      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006888:	4b5d      	ldr	r3, [pc, #372]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006890:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006892:	4b5b      	ldr	r3, [pc, #364]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d04d      	beq.n	800693a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800689e:	4b58      	ldr	r3, [pc, #352]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	099b      	lsrs	r3, r3, #6
 80068a4:	461a      	mov	r2, r3
 80068a6:	f04f 0300 	mov.w	r3, #0
 80068aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80068ae:	f04f 0100 	mov.w	r1, #0
 80068b2:	ea02 0800 	and.w	r8, r2, r0
 80068b6:	ea03 0901 	and.w	r9, r3, r1
 80068ba:	4640      	mov	r0, r8
 80068bc:	4649      	mov	r1, r9
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	014b      	lsls	r3, r1, #5
 80068c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80068cc:	0142      	lsls	r2, r0, #5
 80068ce:	4610      	mov	r0, r2
 80068d0:	4619      	mov	r1, r3
 80068d2:	ebb0 0008 	subs.w	r0, r0, r8
 80068d6:	eb61 0109 	sbc.w	r1, r1, r9
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	f04f 0300 	mov.w	r3, #0
 80068e2:	018b      	lsls	r3, r1, #6
 80068e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80068e8:	0182      	lsls	r2, r0, #6
 80068ea:	1a12      	subs	r2, r2, r0
 80068ec:	eb63 0301 	sbc.w	r3, r3, r1
 80068f0:	f04f 0000 	mov.w	r0, #0
 80068f4:	f04f 0100 	mov.w	r1, #0
 80068f8:	00d9      	lsls	r1, r3, #3
 80068fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068fe:	00d0      	lsls	r0, r2, #3
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	eb12 0208 	adds.w	r2, r2, r8
 8006908:	eb43 0309 	adc.w	r3, r3, r9
 800690c:	f04f 0000 	mov.w	r0, #0
 8006910:	f04f 0100 	mov.w	r1, #0
 8006914:	0259      	lsls	r1, r3, #9
 8006916:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800691a:	0250      	lsls	r0, r2, #9
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4610      	mov	r0, r2
 8006922:	4619      	mov	r1, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	461a      	mov	r2, r3
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	f7fa f934 	bl	8000b98 <__aeabi_uldivmod>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4613      	mov	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	e04a      	b.n	80069d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800693a:	4b31      	ldr	r3, [pc, #196]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	099b      	lsrs	r3, r3, #6
 8006940:	461a      	mov	r2, r3
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	f240 10ff 	movw	r0, #511	; 0x1ff
 800694a:	f04f 0100 	mov.w	r1, #0
 800694e:	ea02 0400 	and.w	r4, r2, r0
 8006952:	ea03 0501 	and.w	r5, r3, r1
 8006956:	4620      	mov	r0, r4
 8006958:	4629      	mov	r1, r5
 800695a:	f04f 0200 	mov.w	r2, #0
 800695e:	f04f 0300 	mov.w	r3, #0
 8006962:	014b      	lsls	r3, r1, #5
 8006964:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006968:	0142      	lsls	r2, r0, #5
 800696a:	4610      	mov	r0, r2
 800696c:	4619      	mov	r1, r3
 800696e:	1b00      	subs	r0, r0, r4
 8006970:	eb61 0105 	sbc.w	r1, r1, r5
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	018b      	lsls	r3, r1, #6
 800697e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006982:	0182      	lsls	r2, r0, #6
 8006984:	1a12      	subs	r2, r2, r0
 8006986:	eb63 0301 	sbc.w	r3, r3, r1
 800698a:	f04f 0000 	mov.w	r0, #0
 800698e:	f04f 0100 	mov.w	r1, #0
 8006992:	00d9      	lsls	r1, r3, #3
 8006994:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006998:	00d0      	lsls	r0, r2, #3
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	1912      	adds	r2, r2, r4
 80069a0:	eb45 0303 	adc.w	r3, r5, r3
 80069a4:	f04f 0000 	mov.w	r0, #0
 80069a8:	f04f 0100 	mov.w	r1, #0
 80069ac:	0299      	lsls	r1, r3, #10
 80069ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80069b2:	0290      	lsls	r0, r2, #10
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	4610      	mov	r0, r2
 80069ba:	4619      	mov	r1, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	461a      	mov	r2, r3
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	f7fa f8e8 	bl	8000b98 <__aeabi_uldivmod>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4613      	mov	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069d0:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	0c1b      	lsrs	r3, r3, #16
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	3301      	adds	r3, #1
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e8:	60bb      	str	r3, [r7, #8]
      break;
 80069ea:	e002      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069ec:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80069ee:	60bb      	str	r3, [r7, #8]
      break;
 80069f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069f2:	68bb      	ldr	r3, [r7, #8]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80069fe:	bf00      	nop
 8006a00:	40023800 	.word	0x40023800
 8006a04:	00f42400 	.word	0x00f42400
 8006a08:	007a1200 	.word	0x007a1200

08006a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a12:	681b      	ldr	r3, [r3, #0]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	20000014 	.word	0x20000014

08006a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a28:	f7ff fff0 	bl	8006a0c <HAL_RCC_GetHCLKFreq>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	0a9b      	lsrs	r3, r3, #10
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	4903      	ldr	r1, [pc, #12]	; (8006a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a3a:	5ccb      	ldrb	r3, [r1, r3]
 8006a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40023800 	.word	0x40023800
 8006a48:	0800c3dc 	.word	0x0800c3dc

08006a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e07b      	b.n	8006b56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d108      	bne.n	8006a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a6e:	d009      	beq.n	8006a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	61da      	str	r2, [r3, #28]
 8006a76:	e005      	b.n	8006a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fc f8e4 	bl	8002c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006acc:	431a      	orrs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b08:	ea42 0103 	orr.w	r1, r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	0c1b      	lsrs	r3, r3, #16
 8006b22:	f003 0104 	and.w	r1, r3, #4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	f003 0210 	and.w	r2, r3, #16
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b088      	sub	sp, #32
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	603b      	str	r3, [r7, #0]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_SPI_Transmit+0x22>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e126      	b.n	8006dce <HAL_SPI_Transmit+0x270>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b88:	f7fd fae4 	bl	8004154 <HAL_GetTick>
 8006b8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b8e:	88fb      	ldrh	r3, [r7, #6]
 8006b90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d002      	beq.n	8006ba4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ba2:	e10b      	b.n	8006dbc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <HAL_SPI_Transmit+0x52>
 8006baa:	88fb      	ldrh	r3, [r7, #6]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bb4:	e102      	b.n	8006dbc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2203      	movs	r2, #3
 8006bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	88fa      	ldrh	r2, [r7, #6]
 8006bce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	88fa      	ldrh	r2, [r7, #6]
 8006bd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfc:	d10f      	bne.n	8006c1e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	d007      	beq.n	8006c3c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c44:	d14b      	bne.n	8006cde <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <HAL_SPI_Transmit+0xf6>
 8006c4e:	8afb      	ldrh	r3, [r7, #22]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d13e      	bne.n	8006cd2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	881a      	ldrh	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	1c9a      	adds	r2, r3, #2
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c78:	e02b      	b.n	8006cd2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d112      	bne.n	8006cae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	881a      	ldrh	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	1c9a      	adds	r2, r3, #2
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cac:	e011      	b.n	8006cd2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cae:	f7fd fa51 	bl	8004154 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d803      	bhi.n	8006cc6 <HAL_SPI_Transmit+0x168>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d102      	bne.n	8006ccc <HAL_SPI_Transmit+0x16e>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d102      	bne.n	8006cd2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cd0:	e074      	b.n	8006dbc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1ce      	bne.n	8006c7a <HAL_SPI_Transmit+0x11c>
 8006cdc:	e04c      	b.n	8006d78 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <HAL_SPI_Transmit+0x18e>
 8006ce6:	8afb      	ldrh	r3, [r7, #22]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d140      	bne.n	8006d6e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	7812      	ldrb	r2, [r2, #0]
 8006cf8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d12:	e02c      	b.n	8006d6e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d113      	bne.n	8006d4a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	7812      	ldrb	r2, [r2, #0]
 8006d2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d48:	e011      	b.n	8006d6e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d4a:	f7fd fa03 	bl	8004154 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d803      	bhi.n	8006d62 <HAL_SPI_Transmit+0x204>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d102      	bne.n	8006d68 <HAL_SPI_Transmit+0x20a>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d6c:	e026      	b.n	8006dbc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1cd      	bne.n	8006d14 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f8b3 	bl	8006ee8 <SPI_EndRxTxTransaction>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10a      	bne.n	8006dac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d96:	2300      	movs	r3, #0
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	77fb      	strb	r3, [r7, #31]
 8006db8:	e000      	b.n	8006dbc <HAL_SPI_Transmit+0x25e>
  }

error:
 8006dba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3720      	adds	r7, #32
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b088      	sub	sp, #32
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	4613      	mov	r3, r2
 8006de6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006de8:	f7fd f9b4 	bl	8004154 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	1a9b      	subs	r3, r3, r2
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	4413      	add	r3, r2
 8006df6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006df8:	f7fd f9ac 	bl	8004154 <HAL_GetTick>
 8006dfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006dfe:	4b39      	ldr	r3, [pc, #228]	; (8006ee4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	015b      	lsls	r3, r3, #5
 8006e04:	0d1b      	lsrs	r3, r3, #20
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	fb02 f303 	mul.w	r3, r2, r3
 8006e0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e0e:	e054      	b.n	8006eba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e16:	d050      	beq.n	8006eba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e18:	f7fd f99c 	bl	8004154 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d902      	bls.n	8006e2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d13d      	bne.n	8006eaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e46:	d111      	bne.n	8006e6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e50:	d004      	beq.n	8006e5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5a:	d107      	bne.n	8006e6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e74:	d10f      	bne.n	8006e96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e017      	b.n	8006eda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	bf0c      	ite	eq
 8006eca:	2301      	moveq	r3, #1
 8006ecc:	2300      	movne	r3, #0
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d19b      	bne.n	8006e10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3720      	adds	r7, #32
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000014 	.word	0x20000014

08006ee8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ef4:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <SPI_EndRxTxTransaction+0x7c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1b      	ldr	r2, [pc, #108]	; (8006f68 <SPI_EndRxTxTransaction+0x80>)
 8006efa:	fba2 2303 	umull	r2, r3, r2, r3
 8006efe:	0d5b      	lsrs	r3, r3, #21
 8006f00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f04:	fb02 f303 	mul.w	r3, r2, r3
 8006f08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f12:	d112      	bne.n	8006f3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2180      	movs	r1, #128	; 0x80
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f7ff ff5a 	bl	8006dd8 <SPI_WaitFlagStateUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d016      	beq.n	8006f58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2e:	f043 0220 	orr.w	r2, r3, #32
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e00f      	b.n	8006f5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f50:	2b80      	cmp	r3, #128	; 0x80
 8006f52:	d0f2      	beq.n	8006f3a <SPI_EndRxTxTransaction+0x52>
 8006f54:	e000      	b.n	8006f58 <SPI_EndRxTxTransaction+0x70>
        break;
 8006f56:	bf00      	nop
  }

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20000014 	.word	0x20000014
 8006f68:	165e9f81 	.word	0x165e9f81

08006f6c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e034      	b.n	8006fec <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7fa fabc 	bl	8001514 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	f000 ffda 	bl	8007f60 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6818      	ldr	r0, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	f001 f824 	bl	8008004 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6858      	ldr	r0, [r3, #4]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	f001 f859 	bl	8008080 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	6892      	ldr	r2, [r2, #8]
 8006fd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	6892      	ldr	r2, [r2, #8]
 8006fe2:	f041 0101 	orr.w	r1, r1, #1
 8006fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e041      	b.n	800708a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d106      	bne.n	8007020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fc f896 	bl	800314c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3304      	adds	r3, #4
 8007030:	4619      	mov	r1, r3
 8007032:	4610      	mov	r0, r2
 8007034:	f000 fc1a 	bl	800786c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d001      	beq.n	80070ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e046      	b.n	800713a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a23      	ldr	r2, [pc, #140]	; (8007148 <HAL_TIM_Base_Start+0xb4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d022      	beq.n	8007104 <HAL_TIM_Base_Start+0x70>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c6:	d01d      	beq.n	8007104 <HAL_TIM_Base_Start+0x70>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1f      	ldr	r2, [pc, #124]	; (800714c <HAL_TIM_Base_Start+0xb8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d018      	beq.n	8007104 <HAL_TIM_Base_Start+0x70>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a1e      	ldr	r2, [pc, #120]	; (8007150 <HAL_TIM_Base_Start+0xbc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d013      	beq.n	8007104 <HAL_TIM_Base_Start+0x70>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a1c      	ldr	r2, [pc, #112]	; (8007154 <HAL_TIM_Base_Start+0xc0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00e      	beq.n	8007104 <HAL_TIM_Base_Start+0x70>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1b      	ldr	r2, [pc, #108]	; (8007158 <HAL_TIM_Base_Start+0xc4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d009      	beq.n	8007104 <HAL_TIM_Base_Start+0x70>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a19      	ldr	r2, [pc, #100]	; (800715c <HAL_TIM_Base_Start+0xc8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d004      	beq.n	8007104 <HAL_TIM_Base_Start+0x70>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a18      	ldr	r2, [pc, #96]	; (8007160 <HAL_TIM_Base_Start+0xcc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d111      	bne.n	8007128 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b06      	cmp	r3, #6
 8007114:	d010      	beq.n	8007138 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f042 0201 	orr.w	r2, r2, #1
 8007124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007126:	e007      	b.n	8007138 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0201 	orr.w	r2, r2, #1
 8007136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40010000 	.word	0x40010000
 800714c:	40000400 	.word	0x40000400
 8007150:	40000800 	.word	0x40000800
 8007154:	40000c00 	.word	0x40000c00
 8007158:	40010400 	.word	0x40010400
 800715c:	40014000 	.word	0x40014000
 8007160:	40001800 	.word	0x40001800

08007164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b01      	cmp	r3, #1
 8007176:	d001      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e04e      	b.n	800721a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a23      	ldr	r2, [pc, #140]	; (8007228 <HAL_TIM_Base_Start_IT+0xc4>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d022      	beq.n	80071e4 <HAL_TIM_Base_Start_IT+0x80>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a6:	d01d      	beq.n	80071e4 <HAL_TIM_Base_Start_IT+0x80>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1f      	ldr	r2, [pc, #124]	; (800722c <HAL_TIM_Base_Start_IT+0xc8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d018      	beq.n	80071e4 <HAL_TIM_Base_Start_IT+0x80>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a1e      	ldr	r2, [pc, #120]	; (8007230 <HAL_TIM_Base_Start_IT+0xcc>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d013      	beq.n	80071e4 <HAL_TIM_Base_Start_IT+0x80>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a1c      	ldr	r2, [pc, #112]	; (8007234 <HAL_TIM_Base_Start_IT+0xd0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d00e      	beq.n	80071e4 <HAL_TIM_Base_Start_IT+0x80>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a1b      	ldr	r2, [pc, #108]	; (8007238 <HAL_TIM_Base_Start_IT+0xd4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d009      	beq.n	80071e4 <HAL_TIM_Base_Start_IT+0x80>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a19      	ldr	r2, [pc, #100]	; (800723c <HAL_TIM_Base_Start_IT+0xd8>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d004      	beq.n	80071e4 <HAL_TIM_Base_Start_IT+0x80>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a18      	ldr	r2, [pc, #96]	; (8007240 <HAL_TIM_Base_Start_IT+0xdc>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d111      	bne.n	8007208 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b06      	cmp	r3, #6
 80071f4:	d010      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f042 0201 	orr.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007206:	e007      	b.n	8007218 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40010000 	.word	0x40010000
 800722c:	40000400 	.word	0x40000400
 8007230:	40000800 	.word	0x40000800
 8007234:	40000c00 	.word	0x40000c00
 8007238:	40010400 	.word	0x40010400
 800723c:	40014000 	.word	0x40014000
 8007240:	40001800 	.word	0x40001800

08007244 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e041      	b.n	80072da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d106      	bne.n	8007270 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f839 	bl	80072e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3304      	adds	r3, #4
 8007280:	4619      	mov	r1, r3
 8007282:	4610      	mov	r0, r2
 8007284:	f000 faf2 	bl	800786c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072ea:	bf00      	nop
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b082      	sub	sp, #8
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b02      	cmp	r3, #2
 800730a:	d122      	bne.n	8007352 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b02      	cmp	r3, #2
 8007318:	d11b      	bne.n	8007352 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f06f 0202 	mvn.w	r2, #2
 8007322:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fa78 	bl	800782e <HAL_TIM_IC_CaptureCallback>
 800733e:	e005      	b.n	800734c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fa6a 	bl	800781a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa7b 	bl	8007842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b04      	cmp	r3, #4
 800735e:	d122      	bne.n	80073a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f003 0304 	and.w	r3, r3, #4
 800736a:	2b04      	cmp	r3, #4
 800736c:	d11b      	bne.n	80073a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f06f 0204 	mvn.w	r2, #4
 8007376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fa4e 	bl	800782e <HAL_TIM_IC_CaptureCallback>
 8007392:	e005      	b.n	80073a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fa40 	bl	800781a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa51 	bl	8007842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	f003 0308 	and.w	r3, r3, #8
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	d122      	bne.n	80073fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b08      	cmp	r3, #8
 80073c0:	d11b      	bne.n	80073fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f06f 0208 	mvn.w	r2, #8
 80073ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2204      	movs	r2, #4
 80073d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	f003 0303 	and.w	r3, r3, #3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fa24 	bl	800782e <HAL_TIM_IC_CaptureCallback>
 80073e6:	e005      	b.n	80073f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fa16 	bl	800781a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fa27 	bl	8007842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b10      	cmp	r3, #16
 8007406:	d122      	bne.n	800744e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f003 0310 	and.w	r3, r3, #16
 8007412:	2b10      	cmp	r3, #16
 8007414:	d11b      	bne.n	800744e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f06f 0210 	mvn.w	r2, #16
 800741e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2208      	movs	r2, #8
 8007424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f9fa 	bl	800782e <HAL_TIM_IC_CaptureCallback>
 800743a:	e005      	b.n	8007448 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f9ec 	bl	800781a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f9fd 	bl	8007842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b01      	cmp	r3, #1
 800745a:	d10e      	bne.n	800747a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b01      	cmp	r3, #1
 8007468:	d107      	bne.n	800747a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f06f 0201 	mvn.w	r2, #1
 8007472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7fb fb7f 	bl	8002b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007484:	2b80      	cmp	r3, #128	; 0x80
 8007486:	d10e      	bne.n	80074a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d107      	bne.n	80074a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800749e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fd53 	bl	8007f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b0:	2b40      	cmp	r3, #64	; 0x40
 80074b2:	d10e      	bne.n	80074d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074be:	2b40      	cmp	r3, #64	; 0x40
 80074c0:	d107      	bne.n	80074d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f9c2 	bl	8007856 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d10e      	bne.n	80074fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	f003 0320 	and.w	r3, r3, #32
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	d107      	bne.n	80074fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f06f 0220 	mvn.w	r2, #32
 80074f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fd1d 	bl	8007f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800751e:	2b01      	cmp	r3, #1
 8007520:	d101      	bne.n	8007526 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007522:	2302      	movs	r3, #2
 8007524:	e0ae      	b.n	8007684 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b0c      	cmp	r3, #12
 8007532:	f200 809f 	bhi.w	8007674 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007536:	a201      	add	r2, pc, #4	; (adr r2, 800753c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	08007571 	.word	0x08007571
 8007540:	08007675 	.word	0x08007675
 8007544:	08007675 	.word	0x08007675
 8007548:	08007675 	.word	0x08007675
 800754c:	080075b1 	.word	0x080075b1
 8007550:	08007675 	.word	0x08007675
 8007554:	08007675 	.word	0x08007675
 8007558:	08007675 	.word	0x08007675
 800755c:	080075f3 	.word	0x080075f3
 8007560:	08007675 	.word	0x08007675
 8007564:	08007675 	.word	0x08007675
 8007568:	08007675 	.word	0x08007675
 800756c:	08007633 	.word	0x08007633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68b9      	ldr	r1, [r7, #8]
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fa18 	bl	80079ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0208 	orr.w	r2, r2, #8
 800758a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699a      	ldr	r2, [r3, #24]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0204 	bic.w	r2, r2, #4
 800759a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6999      	ldr	r1, [r3, #24]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	691a      	ldr	r2, [r3, #16]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	619a      	str	r2, [r3, #24]
      break;
 80075ae:	e064      	b.n	800767a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fa68 	bl	8007a8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699a      	ldr	r2, [r3, #24]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6999      	ldr	r1, [r3, #24]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	021a      	lsls	r2, r3, #8
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	619a      	str	r2, [r3, #24]
      break;
 80075f0:	e043      	b.n	800767a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68b9      	ldr	r1, [r7, #8]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fabd 	bl	8007b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 0208 	orr.w	r2, r2, #8
 800760c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69da      	ldr	r2, [r3, #28]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0204 	bic.w	r2, r2, #4
 800761c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69d9      	ldr	r1, [r3, #28]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	61da      	str	r2, [r3, #28]
      break;
 8007630:	e023      	b.n	800767a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68b9      	ldr	r1, [r7, #8]
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fb11 	bl	8007c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69da      	ldr	r2, [r3, #28]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800764c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69da      	ldr	r2, [r3, #28]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800765c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	69d9      	ldr	r1, [r3, #28]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	021a      	lsls	r2, r3, #8
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	61da      	str	r2, [r3, #28]
      break;
 8007672:	e002      	b.n	800767a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	75fb      	strb	r3, [r7, #23]
      break;
 8007678:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007682:	7dfb      	ldrb	r3, [r7, #23]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d101      	bne.n	80076a8 <HAL_TIM_ConfigClockSource+0x1c>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e0b4      	b.n	8007812 <HAL_TIM_ConfigClockSource+0x186>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076e0:	d03e      	beq.n	8007760 <HAL_TIM_ConfigClockSource+0xd4>
 80076e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076e6:	f200 8087 	bhi.w	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 80076ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ee:	f000 8086 	beq.w	80077fe <HAL_TIM_ConfigClockSource+0x172>
 80076f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f6:	d87f      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f8:	2b70      	cmp	r3, #112	; 0x70
 80076fa:	d01a      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0xa6>
 80076fc:	2b70      	cmp	r3, #112	; 0x70
 80076fe:	d87b      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007700:	2b60      	cmp	r3, #96	; 0x60
 8007702:	d050      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0x11a>
 8007704:	2b60      	cmp	r3, #96	; 0x60
 8007706:	d877      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007708:	2b50      	cmp	r3, #80	; 0x50
 800770a:	d03c      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0xfa>
 800770c:	2b50      	cmp	r3, #80	; 0x50
 800770e:	d873      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007710:	2b40      	cmp	r3, #64	; 0x40
 8007712:	d058      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x13a>
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	d86f      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007718:	2b30      	cmp	r3, #48	; 0x30
 800771a:	d064      	beq.n	80077e6 <HAL_TIM_ConfigClockSource+0x15a>
 800771c:	2b30      	cmp	r3, #48	; 0x30
 800771e:	d86b      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007720:	2b20      	cmp	r3, #32
 8007722:	d060      	beq.n	80077e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007724:	2b20      	cmp	r3, #32
 8007726:	d867      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007728:	2b00      	cmp	r3, #0
 800772a:	d05c      	beq.n	80077e6 <HAL_TIM_ConfigClockSource+0x15a>
 800772c:	2b10      	cmp	r3, #16
 800772e:	d05a      	beq.n	80077e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007730:	e062      	b.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	6899      	ldr	r1, [r3, #8]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f000 fb5d 	bl	8007e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	609a      	str	r2, [r3, #8]
      break;
 800775e:	e04f      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	6899      	ldr	r1, [r3, #8]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f000 fb46 	bl	8007e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007782:	609a      	str	r2, [r3, #8]
      break;
 8007784:	e03c      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6859      	ldr	r1, [r3, #4]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	461a      	mov	r2, r3
 8007794:	f000 faba 	bl	8007d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2150      	movs	r1, #80	; 0x50
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fb13 	bl	8007dca <TIM_ITRx_SetConfig>
      break;
 80077a4:	e02c      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6859      	ldr	r1, [r3, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	461a      	mov	r2, r3
 80077b4:	f000 fad9 	bl	8007d6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2160      	movs	r1, #96	; 0x60
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fb03 	bl	8007dca <TIM_ITRx_SetConfig>
      break;
 80077c4:	e01c      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	6859      	ldr	r1, [r3, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f000 fa9a 	bl	8007d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2140      	movs	r1, #64	; 0x40
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 faf3 	bl	8007dca <TIM_ITRx_SetConfig>
      break;
 80077e4:	e00c      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4619      	mov	r1, r3
 80077f0:	4610      	mov	r0, r2
 80077f2:	f000 faea 	bl	8007dca <TIM_ITRx_SetConfig>
      break;
 80077f6:	e003      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
      break;
 80077fc:	e000      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007810:	7bfb      	ldrb	r3, [r7, #15]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
	...

0800786c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a40      	ldr	r2, [pc, #256]	; (8007980 <TIM_Base_SetConfig+0x114>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d013      	beq.n	80078ac <TIM_Base_SetConfig+0x40>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788a:	d00f      	beq.n	80078ac <TIM_Base_SetConfig+0x40>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a3d      	ldr	r2, [pc, #244]	; (8007984 <TIM_Base_SetConfig+0x118>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d00b      	beq.n	80078ac <TIM_Base_SetConfig+0x40>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a3c      	ldr	r2, [pc, #240]	; (8007988 <TIM_Base_SetConfig+0x11c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d007      	beq.n	80078ac <TIM_Base_SetConfig+0x40>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a3b      	ldr	r2, [pc, #236]	; (800798c <TIM_Base_SetConfig+0x120>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d003      	beq.n	80078ac <TIM_Base_SetConfig+0x40>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a3a      	ldr	r2, [pc, #232]	; (8007990 <TIM_Base_SetConfig+0x124>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d108      	bne.n	80078be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2f      	ldr	r2, [pc, #188]	; (8007980 <TIM_Base_SetConfig+0x114>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d02b      	beq.n	800791e <TIM_Base_SetConfig+0xb2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078cc:	d027      	beq.n	800791e <TIM_Base_SetConfig+0xb2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a2c      	ldr	r2, [pc, #176]	; (8007984 <TIM_Base_SetConfig+0x118>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d023      	beq.n	800791e <TIM_Base_SetConfig+0xb2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a2b      	ldr	r2, [pc, #172]	; (8007988 <TIM_Base_SetConfig+0x11c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d01f      	beq.n	800791e <TIM_Base_SetConfig+0xb2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a2a      	ldr	r2, [pc, #168]	; (800798c <TIM_Base_SetConfig+0x120>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d01b      	beq.n	800791e <TIM_Base_SetConfig+0xb2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a29      	ldr	r2, [pc, #164]	; (8007990 <TIM_Base_SetConfig+0x124>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d017      	beq.n	800791e <TIM_Base_SetConfig+0xb2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a28      	ldr	r2, [pc, #160]	; (8007994 <TIM_Base_SetConfig+0x128>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d013      	beq.n	800791e <TIM_Base_SetConfig+0xb2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a27      	ldr	r2, [pc, #156]	; (8007998 <TIM_Base_SetConfig+0x12c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00f      	beq.n	800791e <TIM_Base_SetConfig+0xb2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a26      	ldr	r2, [pc, #152]	; (800799c <TIM_Base_SetConfig+0x130>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00b      	beq.n	800791e <TIM_Base_SetConfig+0xb2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a25      	ldr	r2, [pc, #148]	; (80079a0 <TIM_Base_SetConfig+0x134>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d007      	beq.n	800791e <TIM_Base_SetConfig+0xb2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a24      	ldr	r2, [pc, #144]	; (80079a4 <TIM_Base_SetConfig+0x138>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d003      	beq.n	800791e <TIM_Base_SetConfig+0xb2>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a23      	ldr	r2, [pc, #140]	; (80079a8 <TIM_Base_SetConfig+0x13c>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d108      	bne.n	8007930 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	4313      	orrs	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a0a      	ldr	r2, [pc, #40]	; (8007980 <TIM_Base_SetConfig+0x114>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d003      	beq.n	8007964 <TIM_Base_SetConfig+0xf8>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a0c      	ldr	r2, [pc, #48]	; (8007990 <TIM_Base_SetConfig+0x124>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d103      	bne.n	800796c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	691a      	ldr	r2, [r3, #16]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	615a      	str	r2, [r3, #20]
}
 8007972:	bf00      	nop
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	40010000 	.word	0x40010000
 8007984:	40000400 	.word	0x40000400
 8007988:	40000800 	.word	0x40000800
 800798c:	40000c00 	.word	0x40000c00
 8007990:	40010400 	.word	0x40010400
 8007994:	40014000 	.word	0x40014000
 8007998:	40014400 	.word	0x40014400
 800799c:	40014800 	.word	0x40014800
 80079a0:	40001800 	.word	0x40001800
 80079a4:	40001c00 	.word	0x40001c00
 80079a8:	40002000 	.word	0x40002000

080079ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	f023 0201 	bic.w	r2, r3, #1
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0303 	bic.w	r3, r3, #3
 80079e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f023 0302 	bic.w	r3, r3, #2
 80079f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a20      	ldr	r2, [pc, #128]	; (8007a84 <TIM_OC1_SetConfig+0xd8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d003      	beq.n	8007a10 <TIM_OC1_SetConfig+0x64>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a1f      	ldr	r2, [pc, #124]	; (8007a88 <TIM_OC1_SetConfig+0xdc>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d10c      	bne.n	8007a2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f023 0308 	bic.w	r3, r3, #8
 8007a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f023 0304 	bic.w	r3, r3, #4
 8007a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a15      	ldr	r2, [pc, #84]	; (8007a84 <TIM_OC1_SetConfig+0xd8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d003      	beq.n	8007a3a <TIM_OC1_SetConfig+0x8e>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a14      	ldr	r2, [pc, #80]	; (8007a88 <TIM_OC1_SetConfig+0xdc>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d111      	bne.n	8007a5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	621a      	str	r2, [r3, #32]
}
 8007a78:	bf00      	nop
 8007a7a:	371c      	adds	r7, #28
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	40010000 	.word	0x40010000
 8007a88:	40010400 	.word	0x40010400

08007a8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	f023 0210 	bic.w	r2, r3, #16
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f023 0320 	bic.w	r3, r3, #32
 8007ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a22      	ldr	r2, [pc, #136]	; (8007b70 <TIM_OC2_SetConfig+0xe4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d003      	beq.n	8007af4 <TIM_OC2_SetConfig+0x68>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a21      	ldr	r2, [pc, #132]	; (8007b74 <TIM_OC2_SetConfig+0xe8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d10d      	bne.n	8007b10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a17      	ldr	r2, [pc, #92]	; (8007b70 <TIM_OC2_SetConfig+0xe4>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <TIM_OC2_SetConfig+0x94>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a16      	ldr	r2, [pc, #88]	; (8007b74 <TIM_OC2_SetConfig+0xe8>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d113      	bne.n	8007b48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	621a      	str	r2, [r3, #32]
}
 8007b62:	bf00      	nop
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	40010000 	.word	0x40010000
 8007b74:	40010400 	.word	0x40010400

08007b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0303 	bic.w	r3, r3, #3
 8007bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a21      	ldr	r2, [pc, #132]	; (8007c58 <TIM_OC3_SetConfig+0xe0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d003      	beq.n	8007bde <TIM_OC3_SetConfig+0x66>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a20      	ldr	r2, [pc, #128]	; (8007c5c <TIM_OC3_SetConfig+0xe4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d10d      	bne.n	8007bfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a16      	ldr	r2, [pc, #88]	; (8007c58 <TIM_OC3_SetConfig+0xe0>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d003      	beq.n	8007c0a <TIM_OC3_SetConfig+0x92>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a15      	ldr	r2, [pc, #84]	; (8007c5c <TIM_OC3_SetConfig+0xe4>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d113      	bne.n	8007c32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	011b      	lsls	r3, r3, #4
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	011b      	lsls	r3, r3, #4
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	621a      	str	r2, [r3, #32]
}
 8007c4c:	bf00      	nop
 8007c4e:	371c      	adds	r7, #28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	40010000 	.word	0x40010000
 8007c5c:	40010400 	.word	0x40010400

08007c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	031b      	lsls	r3, r3, #12
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a12      	ldr	r2, [pc, #72]	; (8007d04 <TIM_OC4_SetConfig+0xa4>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d003      	beq.n	8007cc8 <TIM_OC4_SetConfig+0x68>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a11      	ldr	r2, [pc, #68]	; (8007d08 <TIM_OC4_SetConfig+0xa8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d109      	bne.n	8007cdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	019b      	lsls	r3, r3, #6
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	621a      	str	r2, [r3, #32]
}
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	40010000 	.word	0x40010000
 8007d08:	40010400 	.word	0x40010400

08007d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	f023 0201 	bic.w	r2, r3, #1
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f023 030a 	bic.w	r3, r3, #10
 8007d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	621a      	str	r2, [r3, #32]
}
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b087      	sub	sp, #28
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	f023 0210 	bic.w	r2, r3, #16
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	031b      	lsls	r3, r3, #12
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007da6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	011b      	lsls	r3, r3, #4
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	621a      	str	r2, [r3, #32]
}
 8007dbe:	bf00      	nop
 8007dc0:	371c      	adds	r7, #28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b085      	sub	sp, #20
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	f043 0307 	orr.w	r3, r3, #7
 8007dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	609a      	str	r2, [r3, #8]
}
 8007df4:	bf00      	nop
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
 8007e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	021a      	lsls	r2, r3, #8
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	431a      	orrs	r2, r3
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	609a      	str	r2, [r3, #8]
}
 8007e34:	bf00      	nop
 8007e36:	371c      	adds	r7, #28
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e05a      	b.n	8007f0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a21      	ldr	r2, [pc, #132]	; (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d022      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea4:	d01d      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a1d      	ldr	r2, [pc, #116]	; (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d018      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a1b      	ldr	r2, [pc, #108]	; (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d013      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a1a      	ldr	r2, [pc, #104]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d00e      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a18      	ldr	r2, [pc, #96]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d009      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a17      	ldr	r2, [pc, #92]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d004      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a15      	ldr	r2, [pc, #84]	; (8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d10c      	bne.n	8007efc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ee8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	40010000 	.word	0x40010000
 8007f20:	40000400 	.word	0x40000400
 8007f24:	40000800 	.word	0x40000800
 8007f28:	40000c00 	.word	0x40000c00
 8007f2c:	40010400 	.word	0x40010400
 8007f30:	40014000 	.word	0x40014000
 8007f34:	40001800 	.word	0x40001800

08007f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f78:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	4b20      	ldr	r3, [pc, #128]	; (8008000 <FSMC_NORSRAM_Init+0xa0>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f8a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007f90:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007f96:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007f9c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007fa2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007fa8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007fae:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007fb4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007fba:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007fc0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007fc6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007fcc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d103      	bne.n	8007fe4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68f9      	ldr	r1, [r7, #12]
 8007fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	fff00080 	.word	0xfff00080

08008004 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008026:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008032:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800803a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008042:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	3b01      	subs	r3, #1
 800804a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800804c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	3b02      	subs	r3, #2
 8008054:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008056:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800805c:	4313      	orrs	r3, r2
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4313      	orrs	r3, r2
 8008062:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6979      	ldr	r1, [r7, #20]
 800806c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
	...

08008080 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008098:	d122      	bne.n	80080e0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	4b15      	ldr	r3, [pc, #84]	; (80080fc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80080b6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80080be:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80080c6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80080cc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6979      	ldr	r1, [r7, #20]
 80080da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80080de:	e005      	b.n	80080ec <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80080e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	cff00000 	.word	0xcff00000

08008100 <__errno>:
 8008100:	4b01      	ldr	r3, [pc, #4]	; (8008108 <__errno+0x8>)
 8008102:	6818      	ldr	r0, [r3, #0]
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	20000058 	.word	0x20000058

0800810c <__libc_init_array>:
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	4d0d      	ldr	r5, [pc, #52]	; (8008144 <__libc_init_array+0x38>)
 8008110:	4c0d      	ldr	r4, [pc, #52]	; (8008148 <__libc_init_array+0x3c>)
 8008112:	1b64      	subs	r4, r4, r5
 8008114:	10a4      	asrs	r4, r4, #2
 8008116:	2600      	movs	r6, #0
 8008118:	42a6      	cmp	r6, r4
 800811a:	d109      	bne.n	8008130 <__libc_init_array+0x24>
 800811c:	4d0b      	ldr	r5, [pc, #44]	; (800814c <__libc_init_array+0x40>)
 800811e:	4c0c      	ldr	r4, [pc, #48]	; (8008150 <__libc_init_array+0x44>)
 8008120:	f001 f90a 	bl	8009338 <_init>
 8008124:	1b64      	subs	r4, r4, r5
 8008126:	10a4      	asrs	r4, r4, #2
 8008128:	2600      	movs	r6, #0
 800812a:	42a6      	cmp	r6, r4
 800812c:	d105      	bne.n	800813a <__libc_init_array+0x2e>
 800812e:	bd70      	pop	{r4, r5, r6, pc}
 8008130:	f855 3b04 	ldr.w	r3, [r5], #4
 8008134:	4798      	blx	r3
 8008136:	3601      	adds	r6, #1
 8008138:	e7ee      	b.n	8008118 <__libc_init_array+0xc>
 800813a:	f855 3b04 	ldr.w	r3, [r5], #4
 800813e:	4798      	blx	r3
 8008140:	3601      	adds	r6, #1
 8008142:	e7f2      	b.n	800812a <__libc_init_array+0x1e>
 8008144:	0800c540 	.word	0x0800c540
 8008148:	0800c540 	.word	0x0800c540
 800814c:	0800c540 	.word	0x0800c540
 8008150:	0800c544 	.word	0x0800c544

08008154 <memset>:
 8008154:	4402      	add	r2, r0
 8008156:	4603      	mov	r3, r0
 8008158:	4293      	cmp	r3, r2
 800815a:	d100      	bne.n	800815e <memset+0xa>
 800815c:	4770      	bx	lr
 800815e:	f803 1b01 	strb.w	r1, [r3], #1
 8008162:	e7f9      	b.n	8008158 <memset+0x4>

08008164 <rand>:
 8008164:	4b17      	ldr	r3, [pc, #92]	; (80081c4 <rand+0x60>)
 8008166:	b510      	push	{r4, lr}
 8008168:	681c      	ldr	r4, [r3, #0]
 800816a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800816c:	b9b3      	cbnz	r3, 800819c <rand+0x38>
 800816e:	2018      	movs	r0, #24
 8008170:	f000 f868 	bl	8008244 <malloc>
 8008174:	63a0      	str	r0, [r4, #56]	; 0x38
 8008176:	b928      	cbnz	r0, 8008184 <rand+0x20>
 8008178:	4602      	mov	r2, r0
 800817a:	4b13      	ldr	r3, [pc, #76]	; (80081c8 <rand+0x64>)
 800817c:	4813      	ldr	r0, [pc, #76]	; (80081cc <rand+0x68>)
 800817e:	214e      	movs	r1, #78	; 0x4e
 8008180:	f000 f830 	bl	80081e4 <__assert_func>
 8008184:	4a12      	ldr	r2, [pc, #72]	; (80081d0 <rand+0x6c>)
 8008186:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <rand+0x70>)
 8008188:	e9c0 2300 	strd	r2, r3, [r0]
 800818c:	4b12      	ldr	r3, [pc, #72]	; (80081d8 <rand+0x74>)
 800818e:	6083      	str	r3, [r0, #8]
 8008190:	230b      	movs	r3, #11
 8008192:	8183      	strh	r3, [r0, #12]
 8008194:	2201      	movs	r2, #1
 8008196:	2300      	movs	r3, #0
 8008198:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800819c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800819e:	480f      	ldr	r0, [pc, #60]	; (80081dc <rand+0x78>)
 80081a0:	690a      	ldr	r2, [r1, #16]
 80081a2:	694b      	ldr	r3, [r1, #20]
 80081a4:	4c0e      	ldr	r4, [pc, #56]	; (80081e0 <rand+0x7c>)
 80081a6:	4350      	muls	r0, r2
 80081a8:	fb04 0003 	mla	r0, r4, r3, r0
 80081ac:	fba2 3404 	umull	r3, r4, r2, r4
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	4404      	add	r4, r0
 80081b4:	f144 0000 	adc.w	r0, r4, #0
 80081b8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80081bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	bf00      	nop
 80081c4:	20000058 	.word	0x20000058
 80081c8:	0800c3f0 	.word	0x0800c3f0
 80081cc:	0800c407 	.word	0x0800c407
 80081d0:	abcd330e 	.word	0xabcd330e
 80081d4:	e66d1234 	.word	0xe66d1234
 80081d8:	0005deec 	.word	0x0005deec
 80081dc:	5851f42d 	.word	0x5851f42d
 80081e0:	4c957f2d 	.word	0x4c957f2d

080081e4 <__assert_func>:
 80081e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081e6:	4614      	mov	r4, r2
 80081e8:	461a      	mov	r2, r3
 80081ea:	4b09      	ldr	r3, [pc, #36]	; (8008210 <__assert_func+0x2c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4605      	mov	r5, r0
 80081f0:	68d8      	ldr	r0, [r3, #12]
 80081f2:	b14c      	cbz	r4, 8008208 <__assert_func+0x24>
 80081f4:	4b07      	ldr	r3, [pc, #28]	; (8008214 <__assert_func+0x30>)
 80081f6:	9100      	str	r1, [sp, #0]
 80081f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081fc:	4906      	ldr	r1, [pc, #24]	; (8008218 <__assert_func+0x34>)
 80081fe:	462b      	mov	r3, r5
 8008200:	f000 f80e 	bl	8008220 <fiprintf>
 8008204:	f000 fc8e 	bl	8008b24 <abort>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__assert_func+0x38>)
 800820a:	461c      	mov	r4, r3
 800820c:	e7f3      	b.n	80081f6 <__assert_func+0x12>
 800820e:	bf00      	nop
 8008210:	20000058 	.word	0x20000058
 8008214:	0800c466 	.word	0x0800c466
 8008218:	0800c473 	.word	0x0800c473
 800821c:	0800c4a1 	.word	0x0800c4a1

08008220 <fiprintf>:
 8008220:	b40e      	push	{r1, r2, r3}
 8008222:	b503      	push	{r0, r1, lr}
 8008224:	4601      	mov	r1, r0
 8008226:	ab03      	add	r3, sp, #12
 8008228:	4805      	ldr	r0, [pc, #20]	; (8008240 <fiprintf+0x20>)
 800822a:	f853 2b04 	ldr.w	r2, [r3], #4
 800822e:	6800      	ldr	r0, [r0, #0]
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	f000 f8e3 	bl	80083fc <_vfiprintf_r>
 8008236:	b002      	add	sp, #8
 8008238:	f85d eb04 	ldr.w	lr, [sp], #4
 800823c:	b003      	add	sp, #12
 800823e:	4770      	bx	lr
 8008240:	20000058 	.word	0x20000058

08008244 <malloc>:
 8008244:	4b02      	ldr	r3, [pc, #8]	; (8008250 <malloc+0xc>)
 8008246:	4601      	mov	r1, r0
 8008248:	6818      	ldr	r0, [r3, #0]
 800824a:	f000 b853 	b.w	80082f4 <_malloc_r>
 800824e:	bf00      	nop
 8008250:	20000058 	.word	0x20000058

08008254 <_free_r>:
 8008254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008256:	2900      	cmp	r1, #0
 8008258:	d048      	beq.n	80082ec <_free_r+0x98>
 800825a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800825e:	9001      	str	r0, [sp, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f1a1 0404 	sub.w	r4, r1, #4
 8008266:	bfb8      	it	lt
 8008268:	18e4      	addlt	r4, r4, r3
 800826a:	f000 fe81 	bl	8008f70 <__malloc_lock>
 800826e:	4a20      	ldr	r2, [pc, #128]	; (80082f0 <_free_r+0x9c>)
 8008270:	9801      	ldr	r0, [sp, #4]
 8008272:	6813      	ldr	r3, [r2, #0]
 8008274:	4615      	mov	r5, r2
 8008276:	b933      	cbnz	r3, 8008286 <_free_r+0x32>
 8008278:	6063      	str	r3, [r4, #4]
 800827a:	6014      	str	r4, [r2, #0]
 800827c:	b003      	add	sp, #12
 800827e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008282:	f000 be7b 	b.w	8008f7c <__malloc_unlock>
 8008286:	42a3      	cmp	r3, r4
 8008288:	d90b      	bls.n	80082a2 <_free_r+0x4e>
 800828a:	6821      	ldr	r1, [r4, #0]
 800828c:	1862      	adds	r2, r4, r1
 800828e:	4293      	cmp	r3, r2
 8008290:	bf04      	itt	eq
 8008292:	681a      	ldreq	r2, [r3, #0]
 8008294:	685b      	ldreq	r3, [r3, #4]
 8008296:	6063      	str	r3, [r4, #4]
 8008298:	bf04      	itt	eq
 800829a:	1852      	addeq	r2, r2, r1
 800829c:	6022      	streq	r2, [r4, #0]
 800829e:	602c      	str	r4, [r5, #0]
 80082a0:	e7ec      	b.n	800827c <_free_r+0x28>
 80082a2:	461a      	mov	r2, r3
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	b10b      	cbz	r3, 80082ac <_free_r+0x58>
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	d9fa      	bls.n	80082a2 <_free_r+0x4e>
 80082ac:	6811      	ldr	r1, [r2, #0]
 80082ae:	1855      	adds	r5, r2, r1
 80082b0:	42a5      	cmp	r5, r4
 80082b2:	d10b      	bne.n	80082cc <_free_r+0x78>
 80082b4:	6824      	ldr	r4, [r4, #0]
 80082b6:	4421      	add	r1, r4
 80082b8:	1854      	adds	r4, r2, r1
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	6011      	str	r1, [r2, #0]
 80082be:	d1dd      	bne.n	800827c <_free_r+0x28>
 80082c0:	681c      	ldr	r4, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	6053      	str	r3, [r2, #4]
 80082c6:	4421      	add	r1, r4
 80082c8:	6011      	str	r1, [r2, #0]
 80082ca:	e7d7      	b.n	800827c <_free_r+0x28>
 80082cc:	d902      	bls.n	80082d4 <_free_r+0x80>
 80082ce:	230c      	movs	r3, #12
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	e7d3      	b.n	800827c <_free_r+0x28>
 80082d4:	6825      	ldr	r5, [r4, #0]
 80082d6:	1961      	adds	r1, r4, r5
 80082d8:	428b      	cmp	r3, r1
 80082da:	bf04      	itt	eq
 80082dc:	6819      	ldreq	r1, [r3, #0]
 80082de:	685b      	ldreq	r3, [r3, #4]
 80082e0:	6063      	str	r3, [r4, #4]
 80082e2:	bf04      	itt	eq
 80082e4:	1949      	addeq	r1, r1, r5
 80082e6:	6021      	streq	r1, [r4, #0]
 80082e8:	6054      	str	r4, [r2, #4]
 80082ea:	e7c7      	b.n	800827c <_free_r+0x28>
 80082ec:	b003      	add	sp, #12
 80082ee:	bd30      	pop	{r4, r5, pc}
 80082f0:	20000108 	.word	0x20000108

080082f4 <_malloc_r>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	1ccd      	adds	r5, r1, #3
 80082f8:	f025 0503 	bic.w	r5, r5, #3
 80082fc:	3508      	adds	r5, #8
 80082fe:	2d0c      	cmp	r5, #12
 8008300:	bf38      	it	cc
 8008302:	250c      	movcc	r5, #12
 8008304:	2d00      	cmp	r5, #0
 8008306:	4606      	mov	r6, r0
 8008308:	db01      	blt.n	800830e <_malloc_r+0x1a>
 800830a:	42a9      	cmp	r1, r5
 800830c:	d903      	bls.n	8008316 <_malloc_r+0x22>
 800830e:	230c      	movs	r3, #12
 8008310:	6033      	str	r3, [r6, #0]
 8008312:	2000      	movs	r0, #0
 8008314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008316:	f000 fe2b 	bl	8008f70 <__malloc_lock>
 800831a:	4921      	ldr	r1, [pc, #132]	; (80083a0 <_malloc_r+0xac>)
 800831c:	680a      	ldr	r2, [r1, #0]
 800831e:	4614      	mov	r4, r2
 8008320:	b99c      	cbnz	r4, 800834a <_malloc_r+0x56>
 8008322:	4f20      	ldr	r7, [pc, #128]	; (80083a4 <_malloc_r+0xb0>)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	b923      	cbnz	r3, 8008332 <_malloc_r+0x3e>
 8008328:	4621      	mov	r1, r4
 800832a:	4630      	mov	r0, r6
 800832c:	f000 fb2a 	bl	8008984 <_sbrk_r>
 8008330:	6038      	str	r0, [r7, #0]
 8008332:	4629      	mov	r1, r5
 8008334:	4630      	mov	r0, r6
 8008336:	f000 fb25 	bl	8008984 <_sbrk_r>
 800833a:	1c43      	adds	r3, r0, #1
 800833c:	d123      	bne.n	8008386 <_malloc_r+0x92>
 800833e:	230c      	movs	r3, #12
 8008340:	6033      	str	r3, [r6, #0]
 8008342:	4630      	mov	r0, r6
 8008344:	f000 fe1a 	bl	8008f7c <__malloc_unlock>
 8008348:	e7e3      	b.n	8008312 <_malloc_r+0x1e>
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	1b5b      	subs	r3, r3, r5
 800834e:	d417      	bmi.n	8008380 <_malloc_r+0x8c>
 8008350:	2b0b      	cmp	r3, #11
 8008352:	d903      	bls.n	800835c <_malloc_r+0x68>
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	441c      	add	r4, r3
 8008358:	6025      	str	r5, [r4, #0]
 800835a:	e004      	b.n	8008366 <_malloc_r+0x72>
 800835c:	6863      	ldr	r3, [r4, #4]
 800835e:	42a2      	cmp	r2, r4
 8008360:	bf0c      	ite	eq
 8008362:	600b      	streq	r3, [r1, #0]
 8008364:	6053      	strne	r3, [r2, #4]
 8008366:	4630      	mov	r0, r6
 8008368:	f000 fe08 	bl	8008f7c <__malloc_unlock>
 800836c:	f104 000b 	add.w	r0, r4, #11
 8008370:	1d23      	adds	r3, r4, #4
 8008372:	f020 0007 	bic.w	r0, r0, #7
 8008376:	1ac2      	subs	r2, r0, r3
 8008378:	d0cc      	beq.n	8008314 <_malloc_r+0x20>
 800837a:	1a1b      	subs	r3, r3, r0
 800837c:	50a3      	str	r3, [r4, r2]
 800837e:	e7c9      	b.n	8008314 <_malloc_r+0x20>
 8008380:	4622      	mov	r2, r4
 8008382:	6864      	ldr	r4, [r4, #4]
 8008384:	e7cc      	b.n	8008320 <_malloc_r+0x2c>
 8008386:	1cc4      	adds	r4, r0, #3
 8008388:	f024 0403 	bic.w	r4, r4, #3
 800838c:	42a0      	cmp	r0, r4
 800838e:	d0e3      	beq.n	8008358 <_malloc_r+0x64>
 8008390:	1a21      	subs	r1, r4, r0
 8008392:	4630      	mov	r0, r6
 8008394:	f000 faf6 	bl	8008984 <_sbrk_r>
 8008398:	3001      	adds	r0, #1
 800839a:	d1dd      	bne.n	8008358 <_malloc_r+0x64>
 800839c:	e7cf      	b.n	800833e <_malloc_r+0x4a>
 800839e:	bf00      	nop
 80083a0:	20000108 	.word	0x20000108
 80083a4:	2000010c 	.word	0x2000010c

080083a8 <__sfputc_r>:
 80083a8:	6893      	ldr	r3, [r2, #8]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	b410      	push	{r4}
 80083b0:	6093      	str	r3, [r2, #8]
 80083b2:	da08      	bge.n	80083c6 <__sfputc_r+0x1e>
 80083b4:	6994      	ldr	r4, [r2, #24]
 80083b6:	42a3      	cmp	r3, r4
 80083b8:	db01      	blt.n	80083be <__sfputc_r+0x16>
 80083ba:	290a      	cmp	r1, #10
 80083bc:	d103      	bne.n	80083c6 <__sfputc_r+0x1e>
 80083be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083c2:	f000 baef 	b.w	80089a4 <__swbuf_r>
 80083c6:	6813      	ldr	r3, [r2, #0]
 80083c8:	1c58      	adds	r0, r3, #1
 80083ca:	6010      	str	r0, [r2, #0]
 80083cc:	7019      	strb	r1, [r3, #0]
 80083ce:	4608      	mov	r0, r1
 80083d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <__sfputs_r>:
 80083d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d8:	4606      	mov	r6, r0
 80083da:	460f      	mov	r7, r1
 80083dc:	4614      	mov	r4, r2
 80083de:	18d5      	adds	r5, r2, r3
 80083e0:	42ac      	cmp	r4, r5
 80083e2:	d101      	bne.n	80083e8 <__sfputs_r+0x12>
 80083e4:	2000      	movs	r0, #0
 80083e6:	e007      	b.n	80083f8 <__sfputs_r+0x22>
 80083e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ec:	463a      	mov	r2, r7
 80083ee:	4630      	mov	r0, r6
 80083f0:	f7ff ffda 	bl	80083a8 <__sfputc_r>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d1f3      	bne.n	80083e0 <__sfputs_r+0xa>
 80083f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083fc <_vfiprintf_r>:
 80083fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	460d      	mov	r5, r1
 8008402:	b09d      	sub	sp, #116	; 0x74
 8008404:	4614      	mov	r4, r2
 8008406:	4698      	mov	r8, r3
 8008408:	4606      	mov	r6, r0
 800840a:	b118      	cbz	r0, 8008414 <_vfiprintf_r+0x18>
 800840c:	6983      	ldr	r3, [r0, #24]
 800840e:	b90b      	cbnz	r3, 8008414 <_vfiprintf_r+0x18>
 8008410:	f000 fcaa 	bl	8008d68 <__sinit>
 8008414:	4b89      	ldr	r3, [pc, #548]	; (800863c <_vfiprintf_r+0x240>)
 8008416:	429d      	cmp	r5, r3
 8008418:	d11b      	bne.n	8008452 <_vfiprintf_r+0x56>
 800841a:	6875      	ldr	r5, [r6, #4]
 800841c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800841e:	07d9      	lsls	r1, r3, #31
 8008420:	d405      	bmi.n	800842e <_vfiprintf_r+0x32>
 8008422:	89ab      	ldrh	r3, [r5, #12]
 8008424:	059a      	lsls	r2, r3, #22
 8008426:	d402      	bmi.n	800842e <_vfiprintf_r+0x32>
 8008428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800842a:	f000 fd3b 	bl	8008ea4 <__retarget_lock_acquire_recursive>
 800842e:	89ab      	ldrh	r3, [r5, #12]
 8008430:	071b      	lsls	r3, r3, #28
 8008432:	d501      	bpl.n	8008438 <_vfiprintf_r+0x3c>
 8008434:	692b      	ldr	r3, [r5, #16]
 8008436:	b9eb      	cbnz	r3, 8008474 <_vfiprintf_r+0x78>
 8008438:	4629      	mov	r1, r5
 800843a:	4630      	mov	r0, r6
 800843c:	f000 fb04 	bl	8008a48 <__swsetup_r>
 8008440:	b1c0      	cbz	r0, 8008474 <_vfiprintf_r+0x78>
 8008442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008444:	07dc      	lsls	r4, r3, #31
 8008446:	d50e      	bpl.n	8008466 <_vfiprintf_r+0x6a>
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	b01d      	add	sp, #116	; 0x74
 800844e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008452:	4b7b      	ldr	r3, [pc, #492]	; (8008640 <_vfiprintf_r+0x244>)
 8008454:	429d      	cmp	r5, r3
 8008456:	d101      	bne.n	800845c <_vfiprintf_r+0x60>
 8008458:	68b5      	ldr	r5, [r6, #8]
 800845a:	e7df      	b.n	800841c <_vfiprintf_r+0x20>
 800845c:	4b79      	ldr	r3, [pc, #484]	; (8008644 <_vfiprintf_r+0x248>)
 800845e:	429d      	cmp	r5, r3
 8008460:	bf08      	it	eq
 8008462:	68f5      	ldreq	r5, [r6, #12]
 8008464:	e7da      	b.n	800841c <_vfiprintf_r+0x20>
 8008466:	89ab      	ldrh	r3, [r5, #12]
 8008468:	0598      	lsls	r0, r3, #22
 800846a:	d4ed      	bmi.n	8008448 <_vfiprintf_r+0x4c>
 800846c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800846e:	f000 fd1a 	bl	8008ea6 <__retarget_lock_release_recursive>
 8008472:	e7e9      	b.n	8008448 <_vfiprintf_r+0x4c>
 8008474:	2300      	movs	r3, #0
 8008476:	9309      	str	r3, [sp, #36]	; 0x24
 8008478:	2320      	movs	r3, #32
 800847a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800847e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008482:	2330      	movs	r3, #48	; 0x30
 8008484:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008648 <_vfiprintf_r+0x24c>
 8008488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800848c:	f04f 0901 	mov.w	r9, #1
 8008490:	4623      	mov	r3, r4
 8008492:	469a      	mov	sl, r3
 8008494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008498:	b10a      	cbz	r2, 800849e <_vfiprintf_r+0xa2>
 800849a:	2a25      	cmp	r2, #37	; 0x25
 800849c:	d1f9      	bne.n	8008492 <_vfiprintf_r+0x96>
 800849e:	ebba 0b04 	subs.w	fp, sl, r4
 80084a2:	d00b      	beq.n	80084bc <_vfiprintf_r+0xc0>
 80084a4:	465b      	mov	r3, fp
 80084a6:	4622      	mov	r2, r4
 80084a8:	4629      	mov	r1, r5
 80084aa:	4630      	mov	r0, r6
 80084ac:	f7ff ff93 	bl	80083d6 <__sfputs_r>
 80084b0:	3001      	adds	r0, #1
 80084b2:	f000 80aa 	beq.w	800860a <_vfiprintf_r+0x20e>
 80084b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b8:	445a      	add	r2, fp
 80084ba:	9209      	str	r2, [sp, #36]	; 0x24
 80084bc:	f89a 3000 	ldrb.w	r3, [sl]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 80a2 	beq.w	800860a <_vfiprintf_r+0x20e>
 80084c6:	2300      	movs	r3, #0
 80084c8:	f04f 32ff 	mov.w	r2, #4294967295
 80084cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084d0:	f10a 0a01 	add.w	sl, sl, #1
 80084d4:	9304      	str	r3, [sp, #16]
 80084d6:	9307      	str	r3, [sp, #28]
 80084d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084dc:	931a      	str	r3, [sp, #104]	; 0x68
 80084de:	4654      	mov	r4, sl
 80084e0:	2205      	movs	r2, #5
 80084e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e6:	4858      	ldr	r0, [pc, #352]	; (8008648 <_vfiprintf_r+0x24c>)
 80084e8:	f7f7 fe7a 	bl	80001e0 <memchr>
 80084ec:	9a04      	ldr	r2, [sp, #16]
 80084ee:	b9d8      	cbnz	r0, 8008528 <_vfiprintf_r+0x12c>
 80084f0:	06d1      	lsls	r1, r2, #27
 80084f2:	bf44      	itt	mi
 80084f4:	2320      	movmi	r3, #32
 80084f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084fa:	0713      	lsls	r3, r2, #28
 80084fc:	bf44      	itt	mi
 80084fe:	232b      	movmi	r3, #43	; 0x2b
 8008500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008504:	f89a 3000 	ldrb.w	r3, [sl]
 8008508:	2b2a      	cmp	r3, #42	; 0x2a
 800850a:	d015      	beq.n	8008538 <_vfiprintf_r+0x13c>
 800850c:	9a07      	ldr	r2, [sp, #28]
 800850e:	4654      	mov	r4, sl
 8008510:	2000      	movs	r0, #0
 8008512:	f04f 0c0a 	mov.w	ip, #10
 8008516:	4621      	mov	r1, r4
 8008518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800851c:	3b30      	subs	r3, #48	; 0x30
 800851e:	2b09      	cmp	r3, #9
 8008520:	d94e      	bls.n	80085c0 <_vfiprintf_r+0x1c4>
 8008522:	b1b0      	cbz	r0, 8008552 <_vfiprintf_r+0x156>
 8008524:	9207      	str	r2, [sp, #28]
 8008526:	e014      	b.n	8008552 <_vfiprintf_r+0x156>
 8008528:	eba0 0308 	sub.w	r3, r0, r8
 800852c:	fa09 f303 	lsl.w	r3, r9, r3
 8008530:	4313      	orrs	r3, r2
 8008532:	9304      	str	r3, [sp, #16]
 8008534:	46a2      	mov	sl, r4
 8008536:	e7d2      	b.n	80084de <_vfiprintf_r+0xe2>
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	1d19      	adds	r1, r3, #4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	9103      	str	r1, [sp, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	bfbb      	ittet	lt
 8008544:	425b      	neglt	r3, r3
 8008546:	f042 0202 	orrlt.w	r2, r2, #2
 800854a:	9307      	strge	r3, [sp, #28]
 800854c:	9307      	strlt	r3, [sp, #28]
 800854e:	bfb8      	it	lt
 8008550:	9204      	strlt	r2, [sp, #16]
 8008552:	7823      	ldrb	r3, [r4, #0]
 8008554:	2b2e      	cmp	r3, #46	; 0x2e
 8008556:	d10c      	bne.n	8008572 <_vfiprintf_r+0x176>
 8008558:	7863      	ldrb	r3, [r4, #1]
 800855a:	2b2a      	cmp	r3, #42	; 0x2a
 800855c:	d135      	bne.n	80085ca <_vfiprintf_r+0x1ce>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	1d1a      	adds	r2, r3, #4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	9203      	str	r2, [sp, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfb8      	it	lt
 800856a:	f04f 33ff 	movlt.w	r3, #4294967295
 800856e:	3402      	adds	r4, #2
 8008570:	9305      	str	r3, [sp, #20]
 8008572:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008658 <_vfiprintf_r+0x25c>
 8008576:	7821      	ldrb	r1, [r4, #0]
 8008578:	2203      	movs	r2, #3
 800857a:	4650      	mov	r0, sl
 800857c:	f7f7 fe30 	bl	80001e0 <memchr>
 8008580:	b140      	cbz	r0, 8008594 <_vfiprintf_r+0x198>
 8008582:	2340      	movs	r3, #64	; 0x40
 8008584:	eba0 000a 	sub.w	r0, r0, sl
 8008588:	fa03 f000 	lsl.w	r0, r3, r0
 800858c:	9b04      	ldr	r3, [sp, #16]
 800858e:	4303      	orrs	r3, r0
 8008590:	3401      	adds	r4, #1
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008598:	482c      	ldr	r0, [pc, #176]	; (800864c <_vfiprintf_r+0x250>)
 800859a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800859e:	2206      	movs	r2, #6
 80085a0:	f7f7 fe1e 	bl	80001e0 <memchr>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d03f      	beq.n	8008628 <_vfiprintf_r+0x22c>
 80085a8:	4b29      	ldr	r3, [pc, #164]	; (8008650 <_vfiprintf_r+0x254>)
 80085aa:	bb1b      	cbnz	r3, 80085f4 <_vfiprintf_r+0x1f8>
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	3307      	adds	r3, #7
 80085b0:	f023 0307 	bic.w	r3, r3, #7
 80085b4:	3308      	adds	r3, #8
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ba:	443b      	add	r3, r7
 80085bc:	9309      	str	r3, [sp, #36]	; 0x24
 80085be:	e767      	b.n	8008490 <_vfiprintf_r+0x94>
 80085c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c4:	460c      	mov	r4, r1
 80085c6:	2001      	movs	r0, #1
 80085c8:	e7a5      	b.n	8008516 <_vfiprintf_r+0x11a>
 80085ca:	2300      	movs	r3, #0
 80085cc:	3401      	adds	r4, #1
 80085ce:	9305      	str	r3, [sp, #20]
 80085d0:	4619      	mov	r1, r3
 80085d2:	f04f 0c0a 	mov.w	ip, #10
 80085d6:	4620      	mov	r0, r4
 80085d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085dc:	3a30      	subs	r2, #48	; 0x30
 80085de:	2a09      	cmp	r2, #9
 80085e0:	d903      	bls.n	80085ea <_vfiprintf_r+0x1ee>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0c5      	beq.n	8008572 <_vfiprintf_r+0x176>
 80085e6:	9105      	str	r1, [sp, #20]
 80085e8:	e7c3      	b.n	8008572 <_vfiprintf_r+0x176>
 80085ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ee:	4604      	mov	r4, r0
 80085f0:	2301      	movs	r3, #1
 80085f2:	e7f0      	b.n	80085d6 <_vfiprintf_r+0x1da>
 80085f4:	ab03      	add	r3, sp, #12
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	462a      	mov	r2, r5
 80085fa:	4b16      	ldr	r3, [pc, #88]	; (8008654 <_vfiprintf_r+0x258>)
 80085fc:	a904      	add	r1, sp, #16
 80085fe:	4630      	mov	r0, r6
 8008600:	f3af 8000 	nop.w
 8008604:	4607      	mov	r7, r0
 8008606:	1c78      	adds	r0, r7, #1
 8008608:	d1d6      	bne.n	80085b8 <_vfiprintf_r+0x1bc>
 800860a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800860c:	07d9      	lsls	r1, r3, #31
 800860e:	d405      	bmi.n	800861c <_vfiprintf_r+0x220>
 8008610:	89ab      	ldrh	r3, [r5, #12]
 8008612:	059a      	lsls	r2, r3, #22
 8008614:	d402      	bmi.n	800861c <_vfiprintf_r+0x220>
 8008616:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008618:	f000 fc45 	bl	8008ea6 <__retarget_lock_release_recursive>
 800861c:	89ab      	ldrh	r3, [r5, #12]
 800861e:	065b      	lsls	r3, r3, #25
 8008620:	f53f af12 	bmi.w	8008448 <_vfiprintf_r+0x4c>
 8008624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008626:	e711      	b.n	800844c <_vfiprintf_r+0x50>
 8008628:	ab03      	add	r3, sp, #12
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	462a      	mov	r2, r5
 800862e:	4b09      	ldr	r3, [pc, #36]	; (8008654 <_vfiprintf_r+0x258>)
 8008630:	a904      	add	r1, sp, #16
 8008632:	4630      	mov	r0, r6
 8008634:	f000 f880 	bl	8008738 <_printf_i>
 8008638:	e7e4      	b.n	8008604 <_vfiprintf_r+0x208>
 800863a:	bf00      	nop
 800863c:	0800c4f8 	.word	0x0800c4f8
 8008640:	0800c518 	.word	0x0800c518
 8008644:	0800c4d8 	.word	0x0800c4d8
 8008648:	0800c4a2 	.word	0x0800c4a2
 800864c:	0800c4ac 	.word	0x0800c4ac
 8008650:	00000000 	.word	0x00000000
 8008654:	080083d7 	.word	0x080083d7
 8008658:	0800c4a8 	.word	0x0800c4a8

0800865c <_printf_common>:
 800865c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008660:	4616      	mov	r6, r2
 8008662:	4699      	mov	r9, r3
 8008664:	688a      	ldr	r2, [r1, #8]
 8008666:	690b      	ldr	r3, [r1, #16]
 8008668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800866c:	4293      	cmp	r3, r2
 800866e:	bfb8      	it	lt
 8008670:	4613      	movlt	r3, r2
 8008672:	6033      	str	r3, [r6, #0]
 8008674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008678:	4607      	mov	r7, r0
 800867a:	460c      	mov	r4, r1
 800867c:	b10a      	cbz	r2, 8008682 <_printf_common+0x26>
 800867e:	3301      	adds	r3, #1
 8008680:	6033      	str	r3, [r6, #0]
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	0699      	lsls	r1, r3, #26
 8008686:	bf42      	ittt	mi
 8008688:	6833      	ldrmi	r3, [r6, #0]
 800868a:	3302      	addmi	r3, #2
 800868c:	6033      	strmi	r3, [r6, #0]
 800868e:	6825      	ldr	r5, [r4, #0]
 8008690:	f015 0506 	ands.w	r5, r5, #6
 8008694:	d106      	bne.n	80086a4 <_printf_common+0x48>
 8008696:	f104 0a19 	add.w	sl, r4, #25
 800869a:	68e3      	ldr	r3, [r4, #12]
 800869c:	6832      	ldr	r2, [r6, #0]
 800869e:	1a9b      	subs	r3, r3, r2
 80086a0:	42ab      	cmp	r3, r5
 80086a2:	dc26      	bgt.n	80086f2 <_printf_common+0x96>
 80086a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086a8:	1e13      	subs	r3, r2, #0
 80086aa:	6822      	ldr	r2, [r4, #0]
 80086ac:	bf18      	it	ne
 80086ae:	2301      	movne	r3, #1
 80086b0:	0692      	lsls	r2, r2, #26
 80086b2:	d42b      	bmi.n	800870c <_printf_common+0xb0>
 80086b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086b8:	4649      	mov	r1, r9
 80086ba:	4638      	mov	r0, r7
 80086bc:	47c0      	blx	r8
 80086be:	3001      	adds	r0, #1
 80086c0:	d01e      	beq.n	8008700 <_printf_common+0xa4>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	68e5      	ldr	r5, [r4, #12]
 80086c6:	6832      	ldr	r2, [r6, #0]
 80086c8:	f003 0306 	and.w	r3, r3, #6
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	bf08      	it	eq
 80086d0:	1aad      	subeq	r5, r5, r2
 80086d2:	68a3      	ldr	r3, [r4, #8]
 80086d4:	6922      	ldr	r2, [r4, #16]
 80086d6:	bf0c      	ite	eq
 80086d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086dc:	2500      	movne	r5, #0
 80086de:	4293      	cmp	r3, r2
 80086e0:	bfc4      	itt	gt
 80086e2:	1a9b      	subgt	r3, r3, r2
 80086e4:	18ed      	addgt	r5, r5, r3
 80086e6:	2600      	movs	r6, #0
 80086e8:	341a      	adds	r4, #26
 80086ea:	42b5      	cmp	r5, r6
 80086ec:	d11a      	bne.n	8008724 <_printf_common+0xc8>
 80086ee:	2000      	movs	r0, #0
 80086f0:	e008      	b.n	8008704 <_printf_common+0xa8>
 80086f2:	2301      	movs	r3, #1
 80086f4:	4652      	mov	r2, sl
 80086f6:	4649      	mov	r1, r9
 80086f8:	4638      	mov	r0, r7
 80086fa:	47c0      	blx	r8
 80086fc:	3001      	adds	r0, #1
 80086fe:	d103      	bne.n	8008708 <_printf_common+0xac>
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
 8008704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008708:	3501      	adds	r5, #1
 800870a:	e7c6      	b.n	800869a <_printf_common+0x3e>
 800870c:	18e1      	adds	r1, r4, r3
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	2030      	movs	r0, #48	; 0x30
 8008712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008716:	4422      	add	r2, r4
 8008718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800871c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008720:	3302      	adds	r3, #2
 8008722:	e7c7      	b.n	80086b4 <_printf_common+0x58>
 8008724:	2301      	movs	r3, #1
 8008726:	4622      	mov	r2, r4
 8008728:	4649      	mov	r1, r9
 800872a:	4638      	mov	r0, r7
 800872c:	47c0      	blx	r8
 800872e:	3001      	adds	r0, #1
 8008730:	d0e6      	beq.n	8008700 <_printf_common+0xa4>
 8008732:	3601      	adds	r6, #1
 8008734:	e7d9      	b.n	80086ea <_printf_common+0x8e>
	...

08008738 <_printf_i>:
 8008738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	4691      	mov	r9, r2
 8008740:	7e27      	ldrb	r7, [r4, #24]
 8008742:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008744:	2f78      	cmp	r7, #120	; 0x78
 8008746:	4680      	mov	r8, r0
 8008748:	469a      	mov	sl, r3
 800874a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800874e:	d807      	bhi.n	8008760 <_printf_i+0x28>
 8008750:	2f62      	cmp	r7, #98	; 0x62
 8008752:	d80a      	bhi.n	800876a <_printf_i+0x32>
 8008754:	2f00      	cmp	r7, #0
 8008756:	f000 80d8 	beq.w	800890a <_printf_i+0x1d2>
 800875a:	2f58      	cmp	r7, #88	; 0x58
 800875c:	f000 80a3 	beq.w	80088a6 <_printf_i+0x16e>
 8008760:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008768:	e03a      	b.n	80087e0 <_printf_i+0xa8>
 800876a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800876e:	2b15      	cmp	r3, #21
 8008770:	d8f6      	bhi.n	8008760 <_printf_i+0x28>
 8008772:	a001      	add	r0, pc, #4	; (adr r0, 8008778 <_printf_i+0x40>)
 8008774:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008778:	080087d1 	.word	0x080087d1
 800877c:	080087e5 	.word	0x080087e5
 8008780:	08008761 	.word	0x08008761
 8008784:	08008761 	.word	0x08008761
 8008788:	08008761 	.word	0x08008761
 800878c:	08008761 	.word	0x08008761
 8008790:	080087e5 	.word	0x080087e5
 8008794:	08008761 	.word	0x08008761
 8008798:	08008761 	.word	0x08008761
 800879c:	08008761 	.word	0x08008761
 80087a0:	08008761 	.word	0x08008761
 80087a4:	080088f1 	.word	0x080088f1
 80087a8:	08008815 	.word	0x08008815
 80087ac:	080088d3 	.word	0x080088d3
 80087b0:	08008761 	.word	0x08008761
 80087b4:	08008761 	.word	0x08008761
 80087b8:	08008913 	.word	0x08008913
 80087bc:	08008761 	.word	0x08008761
 80087c0:	08008815 	.word	0x08008815
 80087c4:	08008761 	.word	0x08008761
 80087c8:	08008761 	.word	0x08008761
 80087cc:	080088db 	.word	0x080088db
 80087d0:	680b      	ldr	r3, [r1, #0]
 80087d2:	1d1a      	adds	r2, r3, #4
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	600a      	str	r2, [r1, #0]
 80087d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087e0:	2301      	movs	r3, #1
 80087e2:	e0a3      	b.n	800892c <_printf_i+0x1f4>
 80087e4:	6825      	ldr	r5, [r4, #0]
 80087e6:	6808      	ldr	r0, [r1, #0]
 80087e8:	062e      	lsls	r6, r5, #24
 80087ea:	f100 0304 	add.w	r3, r0, #4
 80087ee:	d50a      	bpl.n	8008806 <_printf_i+0xce>
 80087f0:	6805      	ldr	r5, [r0, #0]
 80087f2:	600b      	str	r3, [r1, #0]
 80087f4:	2d00      	cmp	r5, #0
 80087f6:	da03      	bge.n	8008800 <_printf_i+0xc8>
 80087f8:	232d      	movs	r3, #45	; 0x2d
 80087fa:	426d      	negs	r5, r5
 80087fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008800:	485e      	ldr	r0, [pc, #376]	; (800897c <_printf_i+0x244>)
 8008802:	230a      	movs	r3, #10
 8008804:	e019      	b.n	800883a <_printf_i+0x102>
 8008806:	f015 0f40 	tst.w	r5, #64	; 0x40
 800880a:	6805      	ldr	r5, [r0, #0]
 800880c:	600b      	str	r3, [r1, #0]
 800880e:	bf18      	it	ne
 8008810:	b22d      	sxthne	r5, r5
 8008812:	e7ef      	b.n	80087f4 <_printf_i+0xbc>
 8008814:	680b      	ldr	r3, [r1, #0]
 8008816:	6825      	ldr	r5, [r4, #0]
 8008818:	1d18      	adds	r0, r3, #4
 800881a:	6008      	str	r0, [r1, #0]
 800881c:	0628      	lsls	r0, r5, #24
 800881e:	d501      	bpl.n	8008824 <_printf_i+0xec>
 8008820:	681d      	ldr	r5, [r3, #0]
 8008822:	e002      	b.n	800882a <_printf_i+0xf2>
 8008824:	0669      	lsls	r1, r5, #25
 8008826:	d5fb      	bpl.n	8008820 <_printf_i+0xe8>
 8008828:	881d      	ldrh	r5, [r3, #0]
 800882a:	4854      	ldr	r0, [pc, #336]	; (800897c <_printf_i+0x244>)
 800882c:	2f6f      	cmp	r7, #111	; 0x6f
 800882e:	bf0c      	ite	eq
 8008830:	2308      	moveq	r3, #8
 8008832:	230a      	movne	r3, #10
 8008834:	2100      	movs	r1, #0
 8008836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800883a:	6866      	ldr	r6, [r4, #4]
 800883c:	60a6      	str	r6, [r4, #8]
 800883e:	2e00      	cmp	r6, #0
 8008840:	bfa2      	ittt	ge
 8008842:	6821      	ldrge	r1, [r4, #0]
 8008844:	f021 0104 	bicge.w	r1, r1, #4
 8008848:	6021      	strge	r1, [r4, #0]
 800884a:	b90d      	cbnz	r5, 8008850 <_printf_i+0x118>
 800884c:	2e00      	cmp	r6, #0
 800884e:	d04d      	beq.n	80088ec <_printf_i+0x1b4>
 8008850:	4616      	mov	r6, r2
 8008852:	fbb5 f1f3 	udiv	r1, r5, r3
 8008856:	fb03 5711 	mls	r7, r3, r1, r5
 800885a:	5dc7      	ldrb	r7, [r0, r7]
 800885c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008860:	462f      	mov	r7, r5
 8008862:	42bb      	cmp	r3, r7
 8008864:	460d      	mov	r5, r1
 8008866:	d9f4      	bls.n	8008852 <_printf_i+0x11a>
 8008868:	2b08      	cmp	r3, #8
 800886a:	d10b      	bne.n	8008884 <_printf_i+0x14c>
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	07df      	lsls	r7, r3, #31
 8008870:	d508      	bpl.n	8008884 <_printf_i+0x14c>
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	6861      	ldr	r1, [r4, #4]
 8008876:	4299      	cmp	r1, r3
 8008878:	bfde      	ittt	le
 800887a:	2330      	movle	r3, #48	; 0x30
 800887c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008880:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008884:	1b92      	subs	r2, r2, r6
 8008886:	6122      	str	r2, [r4, #16]
 8008888:	f8cd a000 	str.w	sl, [sp]
 800888c:	464b      	mov	r3, r9
 800888e:	aa03      	add	r2, sp, #12
 8008890:	4621      	mov	r1, r4
 8008892:	4640      	mov	r0, r8
 8008894:	f7ff fee2 	bl	800865c <_printf_common>
 8008898:	3001      	adds	r0, #1
 800889a:	d14c      	bne.n	8008936 <_printf_i+0x1fe>
 800889c:	f04f 30ff 	mov.w	r0, #4294967295
 80088a0:	b004      	add	sp, #16
 80088a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a6:	4835      	ldr	r0, [pc, #212]	; (800897c <_printf_i+0x244>)
 80088a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	680e      	ldr	r6, [r1, #0]
 80088b0:	061f      	lsls	r7, r3, #24
 80088b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80088b6:	600e      	str	r6, [r1, #0]
 80088b8:	d514      	bpl.n	80088e4 <_printf_i+0x1ac>
 80088ba:	07d9      	lsls	r1, r3, #31
 80088bc:	bf44      	itt	mi
 80088be:	f043 0320 	orrmi.w	r3, r3, #32
 80088c2:	6023      	strmi	r3, [r4, #0]
 80088c4:	b91d      	cbnz	r5, 80088ce <_printf_i+0x196>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	f023 0320 	bic.w	r3, r3, #32
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	2310      	movs	r3, #16
 80088d0:	e7b0      	b.n	8008834 <_printf_i+0xfc>
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	f043 0320 	orr.w	r3, r3, #32
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	2378      	movs	r3, #120	; 0x78
 80088dc:	4828      	ldr	r0, [pc, #160]	; (8008980 <_printf_i+0x248>)
 80088de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088e2:	e7e3      	b.n	80088ac <_printf_i+0x174>
 80088e4:	065e      	lsls	r6, r3, #25
 80088e6:	bf48      	it	mi
 80088e8:	b2ad      	uxthmi	r5, r5
 80088ea:	e7e6      	b.n	80088ba <_printf_i+0x182>
 80088ec:	4616      	mov	r6, r2
 80088ee:	e7bb      	b.n	8008868 <_printf_i+0x130>
 80088f0:	680b      	ldr	r3, [r1, #0]
 80088f2:	6826      	ldr	r6, [r4, #0]
 80088f4:	6960      	ldr	r0, [r4, #20]
 80088f6:	1d1d      	adds	r5, r3, #4
 80088f8:	600d      	str	r5, [r1, #0]
 80088fa:	0635      	lsls	r5, r6, #24
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	d501      	bpl.n	8008904 <_printf_i+0x1cc>
 8008900:	6018      	str	r0, [r3, #0]
 8008902:	e002      	b.n	800890a <_printf_i+0x1d2>
 8008904:	0671      	lsls	r1, r6, #25
 8008906:	d5fb      	bpl.n	8008900 <_printf_i+0x1c8>
 8008908:	8018      	strh	r0, [r3, #0]
 800890a:	2300      	movs	r3, #0
 800890c:	6123      	str	r3, [r4, #16]
 800890e:	4616      	mov	r6, r2
 8008910:	e7ba      	b.n	8008888 <_printf_i+0x150>
 8008912:	680b      	ldr	r3, [r1, #0]
 8008914:	1d1a      	adds	r2, r3, #4
 8008916:	600a      	str	r2, [r1, #0]
 8008918:	681e      	ldr	r6, [r3, #0]
 800891a:	6862      	ldr	r2, [r4, #4]
 800891c:	2100      	movs	r1, #0
 800891e:	4630      	mov	r0, r6
 8008920:	f7f7 fc5e 	bl	80001e0 <memchr>
 8008924:	b108      	cbz	r0, 800892a <_printf_i+0x1f2>
 8008926:	1b80      	subs	r0, r0, r6
 8008928:	6060      	str	r0, [r4, #4]
 800892a:	6863      	ldr	r3, [r4, #4]
 800892c:	6123      	str	r3, [r4, #16]
 800892e:	2300      	movs	r3, #0
 8008930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008934:	e7a8      	b.n	8008888 <_printf_i+0x150>
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	4632      	mov	r2, r6
 800893a:	4649      	mov	r1, r9
 800893c:	4640      	mov	r0, r8
 800893e:	47d0      	blx	sl
 8008940:	3001      	adds	r0, #1
 8008942:	d0ab      	beq.n	800889c <_printf_i+0x164>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	079b      	lsls	r3, r3, #30
 8008948:	d413      	bmi.n	8008972 <_printf_i+0x23a>
 800894a:	68e0      	ldr	r0, [r4, #12]
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	4298      	cmp	r0, r3
 8008950:	bfb8      	it	lt
 8008952:	4618      	movlt	r0, r3
 8008954:	e7a4      	b.n	80088a0 <_printf_i+0x168>
 8008956:	2301      	movs	r3, #1
 8008958:	4632      	mov	r2, r6
 800895a:	4649      	mov	r1, r9
 800895c:	4640      	mov	r0, r8
 800895e:	47d0      	blx	sl
 8008960:	3001      	adds	r0, #1
 8008962:	d09b      	beq.n	800889c <_printf_i+0x164>
 8008964:	3501      	adds	r5, #1
 8008966:	68e3      	ldr	r3, [r4, #12]
 8008968:	9903      	ldr	r1, [sp, #12]
 800896a:	1a5b      	subs	r3, r3, r1
 800896c:	42ab      	cmp	r3, r5
 800896e:	dcf2      	bgt.n	8008956 <_printf_i+0x21e>
 8008970:	e7eb      	b.n	800894a <_printf_i+0x212>
 8008972:	2500      	movs	r5, #0
 8008974:	f104 0619 	add.w	r6, r4, #25
 8008978:	e7f5      	b.n	8008966 <_printf_i+0x22e>
 800897a:	bf00      	nop
 800897c:	0800c4b3 	.word	0x0800c4b3
 8008980:	0800c4c4 	.word	0x0800c4c4

08008984 <_sbrk_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4d06      	ldr	r5, [pc, #24]	; (80089a0 <_sbrk_r+0x1c>)
 8008988:	2300      	movs	r3, #0
 800898a:	4604      	mov	r4, r0
 800898c:	4608      	mov	r0, r1
 800898e:	602b      	str	r3, [r5, #0]
 8008990:	f7fa faaa 	bl	8002ee8 <_sbrk>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_sbrk_r+0x1a>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_sbrk_r+0x1a>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	200003d8 	.word	0x200003d8

080089a4 <__swbuf_r>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	460e      	mov	r6, r1
 80089a8:	4614      	mov	r4, r2
 80089aa:	4605      	mov	r5, r0
 80089ac:	b118      	cbz	r0, 80089b6 <__swbuf_r+0x12>
 80089ae:	6983      	ldr	r3, [r0, #24]
 80089b0:	b90b      	cbnz	r3, 80089b6 <__swbuf_r+0x12>
 80089b2:	f000 f9d9 	bl	8008d68 <__sinit>
 80089b6:	4b21      	ldr	r3, [pc, #132]	; (8008a3c <__swbuf_r+0x98>)
 80089b8:	429c      	cmp	r4, r3
 80089ba:	d12b      	bne.n	8008a14 <__swbuf_r+0x70>
 80089bc:	686c      	ldr	r4, [r5, #4]
 80089be:	69a3      	ldr	r3, [r4, #24]
 80089c0:	60a3      	str	r3, [r4, #8]
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	071a      	lsls	r2, r3, #28
 80089c6:	d52f      	bpl.n	8008a28 <__swbuf_r+0x84>
 80089c8:	6923      	ldr	r3, [r4, #16]
 80089ca:	b36b      	cbz	r3, 8008a28 <__swbuf_r+0x84>
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	6820      	ldr	r0, [r4, #0]
 80089d0:	1ac0      	subs	r0, r0, r3
 80089d2:	6963      	ldr	r3, [r4, #20]
 80089d4:	b2f6      	uxtb	r6, r6
 80089d6:	4283      	cmp	r3, r0
 80089d8:	4637      	mov	r7, r6
 80089da:	dc04      	bgt.n	80089e6 <__swbuf_r+0x42>
 80089dc:	4621      	mov	r1, r4
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 f92e 	bl	8008c40 <_fflush_r>
 80089e4:	bb30      	cbnz	r0, 8008a34 <__swbuf_r+0x90>
 80089e6:	68a3      	ldr	r3, [r4, #8]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	60a3      	str	r3, [r4, #8]
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	1c5a      	adds	r2, r3, #1
 80089f0:	6022      	str	r2, [r4, #0]
 80089f2:	701e      	strb	r6, [r3, #0]
 80089f4:	6963      	ldr	r3, [r4, #20]
 80089f6:	3001      	adds	r0, #1
 80089f8:	4283      	cmp	r3, r0
 80089fa:	d004      	beq.n	8008a06 <__swbuf_r+0x62>
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	07db      	lsls	r3, r3, #31
 8008a00:	d506      	bpl.n	8008a10 <__swbuf_r+0x6c>
 8008a02:	2e0a      	cmp	r6, #10
 8008a04:	d104      	bne.n	8008a10 <__swbuf_r+0x6c>
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 f919 	bl	8008c40 <_fflush_r>
 8008a0e:	b988      	cbnz	r0, 8008a34 <__swbuf_r+0x90>
 8008a10:	4638      	mov	r0, r7
 8008a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a14:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <__swbuf_r+0x9c>)
 8008a16:	429c      	cmp	r4, r3
 8008a18:	d101      	bne.n	8008a1e <__swbuf_r+0x7a>
 8008a1a:	68ac      	ldr	r4, [r5, #8]
 8008a1c:	e7cf      	b.n	80089be <__swbuf_r+0x1a>
 8008a1e:	4b09      	ldr	r3, [pc, #36]	; (8008a44 <__swbuf_r+0xa0>)
 8008a20:	429c      	cmp	r4, r3
 8008a22:	bf08      	it	eq
 8008a24:	68ec      	ldreq	r4, [r5, #12]
 8008a26:	e7ca      	b.n	80089be <__swbuf_r+0x1a>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f000 f80c 	bl	8008a48 <__swsetup_r>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d0cb      	beq.n	80089cc <__swbuf_r+0x28>
 8008a34:	f04f 37ff 	mov.w	r7, #4294967295
 8008a38:	e7ea      	b.n	8008a10 <__swbuf_r+0x6c>
 8008a3a:	bf00      	nop
 8008a3c:	0800c4f8 	.word	0x0800c4f8
 8008a40:	0800c518 	.word	0x0800c518
 8008a44:	0800c4d8 	.word	0x0800c4d8

08008a48 <__swsetup_r>:
 8008a48:	4b32      	ldr	r3, [pc, #200]	; (8008b14 <__swsetup_r+0xcc>)
 8008a4a:	b570      	push	{r4, r5, r6, lr}
 8008a4c:	681d      	ldr	r5, [r3, #0]
 8008a4e:	4606      	mov	r6, r0
 8008a50:	460c      	mov	r4, r1
 8008a52:	b125      	cbz	r5, 8008a5e <__swsetup_r+0x16>
 8008a54:	69ab      	ldr	r3, [r5, #24]
 8008a56:	b913      	cbnz	r3, 8008a5e <__swsetup_r+0x16>
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 f985 	bl	8008d68 <__sinit>
 8008a5e:	4b2e      	ldr	r3, [pc, #184]	; (8008b18 <__swsetup_r+0xd0>)
 8008a60:	429c      	cmp	r4, r3
 8008a62:	d10f      	bne.n	8008a84 <__swsetup_r+0x3c>
 8008a64:	686c      	ldr	r4, [r5, #4]
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a6c:	0719      	lsls	r1, r3, #28
 8008a6e:	d42c      	bmi.n	8008aca <__swsetup_r+0x82>
 8008a70:	06dd      	lsls	r5, r3, #27
 8008a72:	d411      	bmi.n	8008a98 <__swsetup_r+0x50>
 8008a74:	2309      	movs	r3, #9
 8008a76:	6033      	str	r3, [r6, #0]
 8008a78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a7c:	81a3      	strh	r3, [r4, #12]
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	e03e      	b.n	8008b02 <__swsetup_r+0xba>
 8008a84:	4b25      	ldr	r3, [pc, #148]	; (8008b1c <__swsetup_r+0xd4>)
 8008a86:	429c      	cmp	r4, r3
 8008a88:	d101      	bne.n	8008a8e <__swsetup_r+0x46>
 8008a8a:	68ac      	ldr	r4, [r5, #8]
 8008a8c:	e7eb      	b.n	8008a66 <__swsetup_r+0x1e>
 8008a8e:	4b24      	ldr	r3, [pc, #144]	; (8008b20 <__swsetup_r+0xd8>)
 8008a90:	429c      	cmp	r4, r3
 8008a92:	bf08      	it	eq
 8008a94:	68ec      	ldreq	r4, [r5, #12]
 8008a96:	e7e6      	b.n	8008a66 <__swsetup_r+0x1e>
 8008a98:	0758      	lsls	r0, r3, #29
 8008a9a:	d512      	bpl.n	8008ac2 <__swsetup_r+0x7a>
 8008a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a9e:	b141      	cbz	r1, 8008ab2 <__swsetup_r+0x6a>
 8008aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aa4:	4299      	cmp	r1, r3
 8008aa6:	d002      	beq.n	8008aae <__swsetup_r+0x66>
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7ff fbd3 	bl	8008254 <_free_r>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ab8:	81a3      	strh	r3, [r4, #12]
 8008aba:	2300      	movs	r3, #0
 8008abc:	6063      	str	r3, [r4, #4]
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	f043 0308 	orr.w	r3, r3, #8
 8008ac8:	81a3      	strh	r3, [r4, #12]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	b94b      	cbnz	r3, 8008ae2 <__swsetup_r+0x9a>
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad8:	d003      	beq.n	8008ae2 <__swsetup_r+0x9a>
 8008ada:	4621      	mov	r1, r4
 8008adc:	4630      	mov	r0, r6
 8008ade:	f000 fa07 	bl	8008ef0 <__smakebuf_r>
 8008ae2:	89a0      	ldrh	r0, [r4, #12]
 8008ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ae8:	f010 0301 	ands.w	r3, r0, #1
 8008aec:	d00a      	beq.n	8008b04 <__swsetup_r+0xbc>
 8008aee:	2300      	movs	r3, #0
 8008af0:	60a3      	str	r3, [r4, #8]
 8008af2:	6963      	ldr	r3, [r4, #20]
 8008af4:	425b      	negs	r3, r3
 8008af6:	61a3      	str	r3, [r4, #24]
 8008af8:	6923      	ldr	r3, [r4, #16]
 8008afa:	b943      	cbnz	r3, 8008b0e <__swsetup_r+0xc6>
 8008afc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b00:	d1ba      	bne.n	8008a78 <__swsetup_r+0x30>
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	0781      	lsls	r1, r0, #30
 8008b06:	bf58      	it	pl
 8008b08:	6963      	ldrpl	r3, [r4, #20]
 8008b0a:	60a3      	str	r3, [r4, #8]
 8008b0c:	e7f4      	b.n	8008af8 <__swsetup_r+0xb0>
 8008b0e:	2000      	movs	r0, #0
 8008b10:	e7f7      	b.n	8008b02 <__swsetup_r+0xba>
 8008b12:	bf00      	nop
 8008b14:	20000058 	.word	0x20000058
 8008b18:	0800c4f8 	.word	0x0800c4f8
 8008b1c:	0800c518 	.word	0x0800c518
 8008b20:	0800c4d8 	.word	0x0800c4d8

08008b24 <abort>:
 8008b24:	b508      	push	{r3, lr}
 8008b26:	2006      	movs	r0, #6
 8008b28:	f000 fa56 	bl	8008fd8 <raise>
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	f7fa f963 	bl	8002df8 <_exit>
	...

08008b34 <__sflush_r>:
 8008b34:	898a      	ldrh	r2, [r1, #12]
 8008b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	0710      	lsls	r0, r2, #28
 8008b3e:	460c      	mov	r4, r1
 8008b40:	d458      	bmi.n	8008bf4 <__sflush_r+0xc0>
 8008b42:	684b      	ldr	r3, [r1, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dc05      	bgt.n	8008b54 <__sflush_r+0x20>
 8008b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dc02      	bgt.n	8008b54 <__sflush_r+0x20>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b56:	2e00      	cmp	r6, #0
 8008b58:	d0f9      	beq.n	8008b4e <__sflush_r+0x1a>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b60:	682f      	ldr	r7, [r5, #0]
 8008b62:	602b      	str	r3, [r5, #0]
 8008b64:	d032      	beq.n	8008bcc <__sflush_r+0x98>
 8008b66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	075a      	lsls	r2, r3, #29
 8008b6c:	d505      	bpl.n	8008b7a <__sflush_r+0x46>
 8008b6e:	6863      	ldr	r3, [r4, #4]
 8008b70:	1ac0      	subs	r0, r0, r3
 8008b72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b74:	b10b      	cbz	r3, 8008b7a <__sflush_r+0x46>
 8008b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b78:	1ac0      	subs	r0, r0, r3
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b80:	6a21      	ldr	r1, [r4, #32]
 8008b82:	4628      	mov	r0, r5
 8008b84:	47b0      	blx	r6
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	d106      	bne.n	8008b9a <__sflush_r+0x66>
 8008b8c:	6829      	ldr	r1, [r5, #0]
 8008b8e:	291d      	cmp	r1, #29
 8008b90:	d82c      	bhi.n	8008bec <__sflush_r+0xb8>
 8008b92:	4a2a      	ldr	r2, [pc, #168]	; (8008c3c <__sflush_r+0x108>)
 8008b94:	40ca      	lsrs	r2, r1
 8008b96:	07d6      	lsls	r6, r2, #31
 8008b98:	d528      	bpl.n	8008bec <__sflush_r+0xb8>
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	6062      	str	r2, [r4, #4]
 8008b9e:	04d9      	lsls	r1, r3, #19
 8008ba0:	6922      	ldr	r2, [r4, #16]
 8008ba2:	6022      	str	r2, [r4, #0]
 8008ba4:	d504      	bpl.n	8008bb0 <__sflush_r+0x7c>
 8008ba6:	1c42      	adds	r2, r0, #1
 8008ba8:	d101      	bne.n	8008bae <__sflush_r+0x7a>
 8008baa:	682b      	ldr	r3, [r5, #0]
 8008bac:	b903      	cbnz	r3, 8008bb0 <__sflush_r+0x7c>
 8008bae:	6560      	str	r0, [r4, #84]	; 0x54
 8008bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bb2:	602f      	str	r7, [r5, #0]
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	d0ca      	beq.n	8008b4e <__sflush_r+0x1a>
 8008bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bbc:	4299      	cmp	r1, r3
 8008bbe:	d002      	beq.n	8008bc6 <__sflush_r+0x92>
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f7ff fb47 	bl	8008254 <_free_r>
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	6360      	str	r0, [r4, #52]	; 0x34
 8008bca:	e7c1      	b.n	8008b50 <__sflush_r+0x1c>
 8008bcc:	6a21      	ldr	r1, [r4, #32]
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	47b0      	blx	r6
 8008bd4:	1c41      	adds	r1, r0, #1
 8008bd6:	d1c7      	bne.n	8008b68 <__sflush_r+0x34>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0c4      	beq.n	8008b68 <__sflush_r+0x34>
 8008bde:	2b1d      	cmp	r3, #29
 8008be0:	d001      	beq.n	8008be6 <__sflush_r+0xb2>
 8008be2:	2b16      	cmp	r3, #22
 8008be4:	d101      	bne.n	8008bea <__sflush_r+0xb6>
 8008be6:	602f      	str	r7, [r5, #0]
 8008be8:	e7b1      	b.n	8008b4e <__sflush_r+0x1a>
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	e7ad      	b.n	8008b50 <__sflush_r+0x1c>
 8008bf4:	690f      	ldr	r7, [r1, #16]
 8008bf6:	2f00      	cmp	r7, #0
 8008bf8:	d0a9      	beq.n	8008b4e <__sflush_r+0x1a>
 8008bfa:	0793      	lsls	r3, r2, #30
 8008bfc:	680e      	ldr	r6, [r1, #0]
 8008bfe:	bf08      	it	eq
 8008c00:	694b      	ldreq	r3, [r1, #20]
 8008c02:	600f      	str	r7, [r1, #0]
 8008c04:	bf18      	it	ne
 8008c06:	2300      	movne	r3, #0
 8008c08:	eba6 0807 	sub.w	r8, r6, r7
 8008c0c:	608b      	str	r3, [r1, #8]
 8008c0e:	f1b8 0f00 	cmp.w	r8, #0
 8008c12:	dd9c      	ble.n	8008b4e <__sflush_r+0x1a>
 8008c14:	6a21      	ldr	r1, [r4, #32]
 8008c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c18:	4643      	mov	r3, r8
 8008c1a:	463a      	mov	r2, r7
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	47b0      	blx	r6
 8008c20:	2800      	cmp	r0, #0
 8008c22:	dc06      	bgt.n	8008c32 <__sflush_r+0xfe>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c2a:	81a3      	strh	r3, [r4, #12]
 8008c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c30:	e78e      	b.n	8008b50 <__sflush_r+0x1c>
 8008c32:	4407      	add	r7, r0
 8008c34:	eba8 0800 	sub.w	r8, r8, r0
 8008c38:	e7e9      	b.n	8008c0e <__sflush_r+0xda>
 8008c3a:	bf00      	nop
 8008c3c:	20400001 	.word	0x20400001

08008c40 <_fflush_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	690b      	ldr	r3, [r1, #16]
 8008c44:	4605      	mov	r5, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	b913      	cbnz	r3, 8008c50 <_fflush_r+0x10>
 8008c4a:	2500      	movs	r5, #0
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	b118      	cbz	r0, 8008c5a <_fflush_r+0x1a>
 8008c52:	6983      	ldr	r3, [r0, #24]
 8008c54:	b90b      	cbnz	r3, 8008c5a <_fflush_r+0x1a>
 8008c56:	f000 f887 	bl	8008d68 <__sinit>
 8008c5a:	4b14      	ldr	r3, [pc, #80]	; (8008cac <_fflush_r+0x6c>)
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	d11b      	bne.n	8008c98 <_fflush_r+0x58>
 8008c60:	686c      	ldr	r4, [r5, #4]
 8008c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0ef      	beq.n	8008c4a <_fflush_r+0xa>
 8008c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c6c:	07d0      	lsls	r0, r2, #31
 8008c6e:	d404      	bmi.n	8008c7a <_fflush_r+0x3a>
 8008c70:	0599      	lsls	r1, r3, #22
 8008c72:	d402      	bmi.n	8008c7a <_fflush_r+0x3a>
 8008c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c76:	f000 f915 	bl	8008ea4 <__retarget_lock_acquire_recursive>
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	f7ff ff59 	bl	8008b34 <__sflush_r>
 8008c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c84:	07da      	lsls	r2, r3, #31
 8008c86:	4605      	mov	r5, r0
 8008c88:	d4e0      	bmi.n	8008c4c <_fflush_r+0xc>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	059b      	lsls	r3, r3, #22
 8008c8e:	d4dd      	bmi.n	8008c4c <_fflush_r+0xc>
 8008c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c92:	f000 f908 	bl	8008ea6 <__retarget_lock_release_recursive>
 8008c96:	e7d9      	b.n	8008c4c <_fflush_r+0xc>
 8008c98:	4b05      	ldr	r3, [pc, #20]	; (8008cb0 <_fflush_r+0x70>)
 8008c9a:	429c      	cmp	r4, r3
 8008c9c:	d101      	bne.n	8008ca2 <_fflush_r+0x62>
 8008c9e:	68ac      	ldr	r4, [r5, #8]
 8008ca0:	e7df      	b.n	8008c62 <_fflush_r+0x22>
 8008ca2:	4b04      	ldr	r3, [pc, #16]	; (8008cb4 <_fflush_r+0x74>)
 8008ca4:	429c      	cmp	r4, r3
 8008ca6:	bf08      	it	eq
 8008ca8:	68ec      	ldreq	r4, [r5, #12]
 8008caa:	e7da      	b.n	8008c62 <_fflush_r+0x22>
 8008cac:	0800c4f8 	.word	0x0800c4f8
 8008cb0:	0800c518 	.word	0x0800c518
 8008cb4:	0800c4d8 	.word	0x0800c4d8

08008cb8 <std>:
 8008cb8:	2300      	movs	r3, #0
 8008cba:	b510      	push	{r4, lr}
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8008cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cc6:	6083      	str	r3, [r0, #8]
 8008cc8:	8181      	strh	r1, [r0, #12]
 8008cca:	6643      	str	r3, [r0, #100]	; 0x64
 8008ccc:	81c2      	strh	r2, [r0, #14]
 8008cce:	6183      	str	r3, [r0, #24]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	2208      	movs	r2, #8
 8008cd4:	305c      	adds	r0, #92	; 0x5c
 8008cd6:	f7ff fa3d 	bl	8008154 <memset>
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <std+0x38>)
 8008cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8008cde:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <std+0x3c>)
 8008ce0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ce2:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <std+0x40>)
 8008ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ce6:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <std+0x44>)
 8008ce8:	6224      	str	r4, [r4, #32]
 8008cea:	6323      	str	r3, [r4, #48]	; 0x30
 8008cec:	bd10      	pop	{r4, pc}
 8008cee:	bf00      	nop
 8008cf0:	08009011 	.word	0x08009011
 8008cf4:	08009033 	.word	0x08009033
 8008cf8:	0800906b 	.word	0x0800906b
 8008cfc:	0800908f 	.word	0x0800908f

08008d00 <_cleanup_r>:
 8008d00:	4901      	ldr	r1, [pc, #4]	; (8008d08 <_cleanup_r+0x8>)
 8008d02:	f000 b8af 	b.w	8008e64 <_fwalk_reent>
 8008d06:	bf00      	nop
 8008d08:	08008c41 	.word	0x08008c41

08008d0c <__sfmoreglue>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	1e4a      	subs	r2, r1, #1
 8008d10:	2568      	movs	r5, #104	; 0x68
 8008d12:	4355      	muls	r5, r2
 8008d14:	460e      	mov	r6, r1
 8008d16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d1a:	f7ff faeb 	bl	80082f4 <_malloc_r>
 8008d1e:	4604      	mov	r4, r0
 8008d20:	b140      	cbz	r0, 8008d34 <__sfmoreglue+0x28>
 8008d22:	2100      	movs	r1, #0
 8008d24:	e9c0 1600 	strd	r1, r6, [r0]
 8008d28:	300c      	adds	r0, #12
 8008d2a:	60a0      	str	r0, [r4, #8]
 8008d2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d30:	f7ff fa10 	bl	8008154 <memset>
 8008d34:	4620      	mov	r0, r4
 8008d36:	bd70      	pop	{r4, r5, r6, pc}

08008d38 <__sfp_lock_acquire>:
 8008d38:	4801      	ldr	r0, [pc, #4]	; (8008d40 <__sfp_lock_acquire+0x8>)
 8008d3a:	f000 b8b3 	b.w	8008ea4 <__retarget_lock_acquire_recursive>
 8008d3e:	bf00      	nop
 8008d40:	200003d4 	.word	0x200003d4

08008d44 <__sfp_lock_release>:
 8008d44:	4801      	ldr	r0, [pc, #4]	; (8008d4c <__sfp_lock_release+0x8>)
 8008d46:	f000 b8ae 	b.w	8008ea6 <__retarget_lock_release_recursive>
 8008d4a:	bf00      	nop
 8008d4c:	200003d4 	.word	0x200003d4

08008d50 <__sinit_lock_acquire>:
 8008d50:	4801      	ldr	r0, [pc, #4]	; (8008d58 <__sinit_lock_acquire+0x8>)
 8008d52:	f000 b8a7 	b.w	8008ea4 <__retarget_lock_acquire_recursive>
 8008d56:	bf00      	nop
 8008d58:	200003cf 	.word	0x200003cf

08008d5c <__sinit_lock_release>:
 8008d5c:	4801      	ldr	r0, [pc, #4]	; (8008d64 <__sinit_lock_release+0x8>)
 8008d5e:	f000 b8a2 	b.w	8008ea6 <__retarget_lock_release_recursive>
 8008d62:	bf00      	nop
 8008d64:	200003cf 	.word	0x200003cf

08008d68 <__sinit>:
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	f7ff fff0 	bl	8008d50 <__sinit_lock_acquire>
 8008d70:	69a3      	ldr	r3, [r4, #24]
 8008d72:	b11b      	cbz	r3, 8008d7c <__sinit+0x14>
 8008d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d78:	f7ff bff0 	b.w	8008d5c <__sinit_lock_release>
 8008d7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d80:	6523      	str	r3, [r4, #80]	; 0x50
 8008d82:	4b13      	ldr	r3, [pc, #76]	; (8008dd0 <__sinit+0x68>)
 8008d84:	4a13      	ldr	r2, [pc, #76]	; (8008dd4 <__sinit+0x6c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d8a:	42a3      	cmp	r3, r4
 8008d8c:	bf04      	itt	eq
 8008d8e:	2301      	moveq	r3, #1
 8008d90:	61a3      	streq	r3, [r4, #24]
 8008d92:	4620      	mov	r0, r4
 8008d94:	f000 f820 	bl	8008dd8 <__sfp>
 8008d98:	6060      	str	r0, [r4, #4]
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 f81c 	bl	8008dd8 <__sfp>
 8008da0:	60a0      	str	r0, [r4, #8]
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 f818 	bl	8008dd8 <__sfp>
 8008da8:	2200      	movs	r2, #0
 8008daa:	60e0      	str	r0, [r4, #12]
 8008dac:	2104      	movs	r1, #4
 8008dae:	6860      	ldr	r0, [r4, #4]
 8008db0:	f7ff ff82 	bl	8008cb8 <std>
 8008db4:	68a0      	ldr	r0, [r4, #8]
 8008db6:	2201      	movs	r2, #1
 8008db8:	2109      	movs	r1, #9
 8008dba:	f7ff ff7d 	bl	8008cb8 <std>
 8008dbe:	68e0      	ldr	r0, [r4, #12]
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	2112      	movs	r1, #18
 8008dc4:	f7ff ff78 	bl	8008cb8 <std>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	61a3      	str	r3, [r4, #24]
 8008dcc:	e7d2      	b.n	8008d74 <__sinit+0xc>
 8008dce:	bf00      	nop
 8008dd0:	0800c3ec 	.word	0x0800c3ec
 8008dd4:	08008d01 	.word	0x08008d01

08008dd8 <__sfp>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	4607      	mov	r7, r0
 8008ddc:	f7ff ffac 	bl	8008d38 <__sfp_lock_acquire>
 8008de0:	4b1e      	ldr	r3, [pc, #120]	; (8008e5c <__sfp+0x84>)
 8008de2:	681e      	ldr	r6, [r3, #0]
 8008de4:	69b3      	ldr	r3, [r6, #24]
 8008de6:	b913      	cbnz	r3, 8008dee <__sfp+0x16>
 8008de8:	4630      	mov	r0, r6
 8008dea:	f7ff ffbd 	bl	8008d68 <__sinit>
 8008dee:	3648      	adds	r6, #72	; 0x48
 8008df0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	d503      	bpl.n	8008e00 <__sfp+0x28>
 8008df8:	6833      	ldr	r3, [r6, #0]
 8008dfa:	b30b      	cbz	r3, 8008e40 <__sfp+0x68>
 8008dfc:	6836      	ldr	r6, [r6, #0]
 8008dfe:	e7f7      	b.n	8008df0 <__sfp+0x18>
 8008e00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e04:	b9d5      	cbnz	r5, 8008e3c <__sfp+0x64>
 8008e06:	4b16      	ldr	r3, [pc, #88]	; (8008e60 <__sfp+0x88>)
 8008e08:	60e3      	str	r3, [r4, #12]
 8008e0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e0e:	6665      	str	r5, [r4, #100]	; 0x64
 8008e10:	f000 f847 	bl	8008ea2 <__retarget_lock_init_recursive>
 8008e14:	f7ff ff96 	bl	8008d44 <__sfp_lock_release>
 8008e18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e20:	6025      	str	r5, [r4, #0]
 8008e22:	61a5      	str	r5, [r4, #24]
 8008e24:	2208      	movs	r2, #8
 8008e26:	4629      	mov	r1, r5
 8008e28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e2c:	f7ff f992 	bl	8008154 <memset>
 8008e30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e38:	4620      	mov	r0, r4
 8008e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e3c:	3468      	adds	r4, #104	; 0x68
 8008e3e:	e7d9      	b.n	8008df4 <__sfp+0x1c>
 8008e40:	2104      	movs	r1, #4
 8008e42:	4638      	mov	r0, r7
 8008e44:	f7ff ff62 	bl	8008d0c <__sfmoreglue>
 8008e48:	4604      	mov	r4, r0
 8008e4a:	6030      	str	r0, [r6, #0]
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d1d5      	bne.n	8008dfc <__sfp+0x24>
 8008e50:	f7ff ff78 	bl	8008d44 <__sfp_lock_release>
 8008e54:	230c      	movs	r3, #12
 8008e56:	603b      	str	r3, [r7, #0]
 8008e58:	e7ee      	b.n	8008e38 <__sfp+0x60>
 8008e5a:	bf00      	nop
 8008e5c:	0800c3ec 	.word	0x0800c3ec
 8008e60:	ffff0001 	.word	0xffff0001

08008e64 <_fwalk_reent>:
 8008e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e68:	4606      	mov	r6, r0
 8008e6a:	4688      	mov	r8, r1
 8008e6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e70:	2700      	movs	r7, #0
 8008e72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e76:	f1b9 0901 	subs.w	r9, r9, #1
 8008e7a:	d505      	bpl.n	8008e88 <_fwalk_reent+0x24>
 8008e7c:	6824      	ldr	r4, [r4, #0]
 8008e7e:	2c00      	cmp	r4, #0
 8008e80:	d1f7      	bne.n	8008e72 <_fwalk_reent+0xe>
 8008e82:	4638      	mov	r0, r7
 8008e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e88:	89ab      	ldrh	r3, [r5, #12]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d907      	bls.n	8008e9e <_fwalk_reent+0x3a>
 8008e8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e92:	3301      	adds	r3, #1
 8008e94:	d003      	beq.n	8008e9e <_fwalk_reent+0x3a>
 8008e96:	4629      	mov	r1, r5
 8008e98:	4630      	mov	r0, r6
 8008e9a:	47c0      	blx	r8
 8008e9c:	4307      	orrs	r7, r0
 8008e9e:	3568      	adds	r5, #104	; 0x68
 8008ea0:	e7e9      	b.n	8008e76 <_fwalk_reent+0x12>

08008ea2 <__retarget_lock_init_recursive>:
 8008ea2:	4770      	bx	lr

08008ea4 <__retarget_lock_acquire_recursive>:
 8008ea4:	4770      	bx	lr

08008ea6 <__retarget_lock_release_recursive>:
 8008ea6:	4770      	bx	lr

08008ea8 <__swhatbuf_r>:
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	460e      	mov	r6, r1
 8008eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	b096      	sub	sp, #88	; 0x58
 8008eb4:	4614      	mov	r4, r2
 8008eb6:	461d      	mov	r5, r3
 8008eb8:	da07      	bge.n	8008eca <__swhatbuf_r+0x22>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	602b      	str	r3, [r5, #0]
 8008ebe:	89b3      	ldrh	r3, [r6, #12]
 8008ec0:	061a      	lsls	r2, r3, #24
 8008ec2:	d410      	bmi.n	8008ee6 <__swhatbuf_r+0x3e>
 8008ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ec8:	e00e      	b.n	8008ee8 <__swhatbuf_r+0x40>
 8008eca:	466a      	mov	r2, sp
 8008ecc:	f000 f906 	bl	80090dc <_fstat_r>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	dbf2      	blt.n	8008eba <__swhatbuf_r+0x12>
 8008ed4:	9a01      	ldr	r2, [sp, #4]
 8008ed6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008eda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ede:	425a      	negs	r2, r3
 8008ee0:	415a      	adcs	r2, r3
 8008ee2:	602a      	str	r2, [r5, #0]
 8008ee4:	e7ee      	b.n	8008ec4 <__swhatbuf_r+0x1c>
 8008ee6:	2340      	movs	r3, #64	; 0x40
 8008ee8:	2000      	movs	r0, #0
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	b016      	add	sp, #88	; 0x58
 8008eee:	bd70      	pop	{r4, r5, r6, pc}

08008ef0 <__smakebuf_r>:
 8008ef0:	898b      	ldrh	r3, [r1, #12]
 8008ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ef4:	079d      	lsls	r5, r3, #30
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	d507      	bpl.n	8008f0c <__smakebuf_r+0x1c>
 8008efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	6123      	str	r3, [r4, #16]
 8008f04:	2301      	movs	r3, #1
 8008f06:	6163      	str	r3, [r4, #20]
 8008f08:	b002      	add	sp, #8
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}
 8008f0c:	ab01      	add	r3, sp, #4
 8008f0e:	466a      	mov	r2, sp
 8008f10:	f7ff ffca 	bl	8008ea8 <__swhatbuf_r>
 8008f14:	9900      	ldr	r1, [sp, #0]
 8008f16:	4605      	mov	r5, r0
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f7ff f9eb 	bl	80082f4 <_malloc_r>
 8008f1e:	b948      	cbnz	r0, 8008f34 <__smakebuf_r+0x44>
 8008f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f24:	059a      	lsls	r2, r3, #22
 8008f26:	d4ef      	bmi.n	8008f08 <__smakebuf_r+0x18>
 8008f28:	f023 0303 	bic.w	r3, r3, #3
 8008f2c:	f043 0302 	orr.w	r3, r3, #2
 8008f30:	81a3      	strh	r3, [r4, #12]
 8008f32:	e7e3      	b.n	8008efc <__smakebuf_r+0xc>
 8008f34:	4b0d      	ldr	r3, [pc, #52]	; (8008f6c <__smakebuf_r+0x7c>)
 8008f36:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	6020      	str	r0, [r4, #0]
 8008f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f40:	81a3      	strh	r3, [r4, #12]
 8008f42:	9b00      	ldr	r3, [sp, #0]
 8008f44:	6163      	str	r3, [r4, #20]
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	6120      	str	r0, [r4, #16]
 8008f4a:	b15b      	cbz	r3, 8008f64 <__smakebuf_r+0x74>
 8008f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f50:	4630      	mov	r0, r6
 8008f52:	f000 f8d5 	bl	8009100 <_isatty_r>
 8008f56:	b128      	cbz	r0, 8008f64 <__smakebuf_r+0x74>
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	f023 0303 	bic.w	r3, r3, #3
 8008f5e:	f043 0301 	orr.w	r3, r3, #1
 8008f62:	81a3      	strh	r3, [r4, #12]
 8008f64:	89a0      	ldrh	r0, [r4, #12]
 8008f66:	4305      	orrs	r5, r0
 8008f68:	81a5      	strh	r5, [r4, #12]
 8008f6a:	e7cd      	b.n	8008f08 <__smakebuf_r+0x18>
 8008f6c:	08008d01 	.word	0x08008d01

08008f70 <__malloc_lock>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__malloc_lock+0x8>)
 8008f72:	f7ff bf97 	b.w	8008ea4 <__retarget_lock_acquire_recursive>
 8008f76:	bf00      	nop
 8008f78:	200003d0 	.word	0x200003d0

08008f7c <__malloc_unlock>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	; (8008f84 <__malloc_unlock+0x8>)
 8008f7e:	f7ff bf92 	b.w	8008ea6 <__retarget_lock_release_recursive>
 8008f82:	bf00      	nop
 8008f84:	200003d0 	.word	0x200003d0

08008f88 <_raise_r>:
 8008f88:	291f      	cmp	r1, #31
 8008f8a:	b538      	push	{r3, r4, r5, lr}
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	460d      	mov	r5, r1
 8008f90:	d904      	bls.n	8008f9c <_raise_r+0x14>
 8008f92:	2316      	movs	r3, #22
 8008f94:	6003      	str	r3, [r0, #0]
 8008f96:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f9e:	b112      	cbz	r2, 8008fa6 <_raise_r+0x1e>
 8008fa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fa4:	b94b      	cbnz	r3, 8008fba <_raise_r+0x32>
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f000 f830 	bl	800900c <_getpid_r>
 8008fac:	462a      	mov	r2, r5
 8008fae:	4601      	mov	r1, r0
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fb6:	f000 b817 	b.w	8008fe8 <_kill_r>
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d00a      	beq.n	8008fd4 <_raise_r+0x4c>
 8008fbe:	1c59      	adds	r1, r3, #1
 8008fc0:	d103      	bne.n	8008fca <_raise_r+0x42>
 8008fc2:	2316      	movs	r3, #22
 8008fc4:	6003      	str	r3, [r0, #0]
 8008fc6:	2001      	movs	r0, #1
 8008fc8:	e7e7      	b.n	8008f9a <_raise_r+0x12>
 8008fca:	2400      	movs	r4, #0
 8008fcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	4798      	blx	r3
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e7e0      	b.n	8008f9a <_raise_r+0x12>

08008fd8 <raise>:
 8008fd8:	4b02      	ldr	r3, [pc, #8]	; (8008fe4 <raise+0xc>)
 8008fda:	4601      	mov	r1, r0
 8008fdc:	6818      	ldr	r0, [r3, #0]
 8008fde:	f7ff bfd3 	b.w	8008f88 <_raise_r>
 8008fe2:	bf00      	nop
 8008fe4:	20000058 	.word	0x20000058

08008fe8 <_kill_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d07      	ldr	r5, [pc, #28]	; (8009008 <_kill_r+0x20>)
 8008fec:	2300      	movs	r3, #0
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	602b      	str	r3, [r5, #0]
 8008ff6:	f7f9 feef 	bl	8002dd8 <_kill>
 8008ffa:	1c43      	adds	r3, r0, #1
 8008ffc:	d102      	bne.n	8009004 <_kill_r+0x1c>
 8008ffe:	682b      	ldr	r3, [r5, #0]
 8009000:	b103      	cbz	r3, 8009004 <_kill_r+0x1c>
 8009002:	6023      	str	r3, [r4, #0]
 8009004:	bd38      	pop	{r3, r4, r5, pc}
 8009006:	bf00      	nop
 8009008:	200003d8 	.word	0x200003d8

0800900c <_getpid_r>:
 800900c:	f7f9 bedc 	b.w	8002dc8 <_getpid>

08009010 <__sread>:
 8009010:	b510      	push	{r4, lr}
 8009012:	460c      	mov	r4, r1
 8009014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009018:	f000 f894 	bl	8009144 <_read_r>
 800901c:	2800      	cmp	r0, #0
 800901e:	bfab      	itete	ge
 8009020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009022:	89a3      	ldrhlt	r3, [r4, #12]
 8009024:	181b      	addge	r3, r3, r0
 8009026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800902a:	bfac      	ite	ge
 800902c:	6563      	strge	r3, [r4, #84]	; 0x54
 800902e:	81a3      	strhlt	r3, [r4, #12]
 8009030:	bd10      	pop	{r4, pc}

08009032 <__swrite>:
 8009032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009036:	461f      	mov	r7, r3
 8009038:	898b      	ldrh	r3, [r1, #12]
 800903a:	05db      	lsls	r3, r3, #23
 800903c:	4605      	mov	r5, r0
 800903e:	460c      	mov	r4, r1
 8009040:	4616      	mov	r6, r2
 8009042:	d505      	bpl.n	8009050 <__swrite+0x1e>
 8009044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009048:	2302      	movs	r3, #2
 800904a:	2200      	movs	r2, #0
 800904c:	f000 f868 	bl	8009120 <_lseek_r>
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800905a:	81a3      	strh	r3, [r4, #12]
 800905c:	4632      	mov	r2, r6
 800905e:	463b      	mov	r3, r7
 8009060:	4628      	mov	r0, r5
 8009062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009066:	f000 b817 	b.w	8009098 <_write_r>

0800906a <__sseek>:
 800906a:	b510      	push	{r4, lr}
 800906c:	460c      	mov	r4, r1
 800906e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009072:	f000 f855 	bl	8009120 <_lseek_r>
 8009076:	1c43      	adds	r3, r0, #1
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	bf15      	itete	ne
 800907c:	6560      	strne	r0, [r4, #84]	; 0x54
 800907e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009086:	81a3      	strheq	r3, [r4, #12]
 8009088:	bf18      	it	ne
 800908a:	81a3      	strhne	r3, [r4, #12]
 800908c:	bd10      	pop	{r4, pc}

0800908e <__sclose>:
 800908e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009092:	f000 b813 	b.w	80090bc <_close_r>
	...

08009098 <_write_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d07      	ldr	r5, [pc, #28]	; (80090b8 <_write_r+0x20>)
 800909c:	4604      	mov	r4, r0
 800909e:	4608      	mov	r0, r1
 80090a0:	4611      	mov	r1, r2
 80090a2:	2200      	movs	r2, #0
 80090a4:	602a      	str	r2, [r5, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	f7f9 fecd 	bl	8002e46 <_write>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	d102      	bne.n	80090b6 <_write_r+0x1e>
 80090b0:	682b      	ldr	r3, [r5, #0]
 80090b2:	b103      	cbz	r3, 80090b6 <_write_r+0x1e>
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	200003d8 	.word	0x200003d8

080090bc <_close_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d06      	ldr	r5, [pc, #24]	; (80090d8 <_close_r+0x1c>)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f7f9 fed9 	bl	8002e7e <_close>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_close_r+0x1a>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_close_r+0x1a>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	200003d8 	.word	0x200003d8

080090dc <_fstat_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d07      	ldr	r5, [pc, #28]	; (80090fc <_fstat_r+0x20>)
 80090e0:	2300      	movs	r3, #0
 80090e2:	4604      	mov	r4, r0
 80090e4:	4608      	mov	r0, r1
 80090e6:	4611      	mov	r1, r2
 80090e8:	602b      	str	r3, [r5, #0]
 80090ea:	f7f9 fed4 	bl	8002e96 <_fstat>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	d102      	bne.n	80090f8 <_fstat_r+0x1c>
 80090f2:	682b      	ldr	r3, [r5, #0]
 80090f4:	b103      	cbz	r3, 80090f8 <_fstat_r+0x1c>
 80090f6:	6023      	str	r3, [r4, #0]
 80090f8:	bd38      	pop	{r3, r4, r5, pc}
 80090fa:	bf00      	nop
 80090fc:	200003d8 	.word	0x200003d8

08009100 <_isatty_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4d06      	ldr	r5, [pc, #24]	; (800911c <_isatty_r+0x1c>)
 8009104:	2300      	movs	r3, #0
 8009106:	4604      	mov	r4, r0
 8009108:	4608      	mov	r0, r1
 800910a:	602b      	str	r3, [r5, #0]
 800910c:	f7f9 fed3 	bl	8002eb6 <_isatty>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d102      	bne.n	800911a <_isatty_r+0x1a>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	b103      	cbz	r3, 800911a <_isatty_r+0x1a>
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	200003d8 	.word	0x200003d8

08009120 <_lseek_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d07      	ldr	r5, [pc, #28]	; (8009140 <_lseek_r+0x20>)
 8009124:	4604      	mov	r4, r0
 8009126:	4608      	mov	r0, r1
 8009128:	4611      	mov	r1, r2
 800912a:	2200      	movs	r2, #0
 800912c:	602a      	str	r2, [r5, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	f7f9 fecc 	bl	8002ecc <_lseek>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_lseek_r+0x1e>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_lseek_r+0x1e>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	200003d8 	.word	0x200003d8

08009144 <_read_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d07      	ldr	r5, [pc, #28]	; (8009164 <_read_r+0x20>)
 8009148:	4604      	mov	r4, r0
 800914a:	4608      	mov	r0, r1
 800914c:	4611      	mov	r1, r2
 800914e:	2200      	movs	r2, #0
 8009150:	602a      	str	r2, [r5, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	f7f9 fe5a 	bl	8002e0c <_read>
 8009158:	1c43      	adds	r3, r0, #1
 800915a:	d102      	bne.n	8009162 <_read_r+0x1e>
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	b103      	cbz	r3, 8009162 <_read_r+0x1e>
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	bd38      	pop	{r3, r4, r5, pc}
 8009164:	200003d8 	.word	0x200003d8

08009168 <sqrt>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	ed2d 8b02 	vpush	{d8}
 800916e:	ec55 4b10 	vmov	r4, r5, d0
 8009172:	f000 f82d 	bl	80091d0 <__ieee754_sqrt>
 8009176:	4b15      	ldr	r3, [pc, #84]	; (80091cc <sqrt+0x64>)
 8009178:	eeb0 8a40 	vmov.f32	s16, s0
 800917c:	eef0 8a60 	vmov.f32	s17, s1
 8009180:	f993 3000 	ldrsb.w	r3, [r3]
 8009184:	3301      	adds	r3, #1
 8009186:	d019      	beq.n	80091bc <sqrt+0x54>
 8009188:	4622      	mov	r2, r4
 800918a:	462b      	mov	r3, r5
 800918c:	4620      	mov	r0, r4
 800918e:	4629      	mov	r1, r5
 8009190:	f7f7 fccc 	bl	8000b2c <__aeabi_dcmpun>
 8009194:	b990      	cbnz	r0, 80091bc <sqrt+0x54>
 8009196:	2200      	movs	r2, #0
 8009198:	2300      	movs	r3, #0
 800919a:	4620      	mov	r0, r4
 800919c:	4629      	mov	r1, r5
 800919e:	f7f7 fc9d 	bl	8000adc <__aeabi_dcmplt>
 80091a2:	b158      	cbz	r0, 80091bc <sqrt+0x54>
 80091a4:	f7fe ffac 	bl	8008100 <__errno>
 80091a8:	2321      	movs	r3, #33	; 0x21
 80091aa:	6003      	str	r3, [r0, #0]
 80091ac:	2200      	movs	r2, #0
 80091ae:	2300      	movs	r3, #0
 80091b0:	4610      	mov	r0, r2
 80091b2:	4619      	mov	r1, r3
 80091b4:	f7f7 fb4a 	bl	800084c <__aeabi_ddiv>
 80091b8:	ec41 0b18 	vmov	d8, r0, r1
 80091bc:	eeb0 0a48 	vmov.f32	s0, s16
 80091c0:	eef0 0a68 	vmov.f32	s1, s17
 80091c4:	ecbd 8b02 	vpop	{d8}
 80091c8:	bd38      	pop	{r3, r4, r5, pc}
 80091ca:	bf00      	nop
 80091cc:	200000bc 	.word	0x200000bc

080091d0 <__ieee754_sqrt>:
 80091d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d4:	ec55 4b10 	vmov	r4, r5, d0
 80091d8:	4e56      	ldr	r6, [pc, #344]	; (8009334 <__ieee754_sqrt+0x164>)
 80091da:	43ae      	bics	r6, r5
 80091dc:	ee10 0a10 	vmov	r0, s0
 80091e0:	ee10 3a10 	vmov	r3, s0
 80091e4:	4629      	mov	r1, r5
 80091e6:	462a      	mov	r2, r5
 80091e8:	d110      	bne.n	800920c <__ieee754_sqrt+0x3c>
 80091ea:	ee10 2a10 	vmov	r2, s0
 80091ee:	462b      	mov	r3, r5
 80091f0:	f7f7 fa02 	bl	80005f8 <__aeabi_dmul>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4620      	mov	r0, r4
 80091fa:	4629      	mov	r1, r5
 80091fc:	f7f7 f846 	bl	800028c <__adddf3>
 8009200:	4604      	mov	r4, r0
 8009202:	460d      	mov	r5, r1
 8009204:	ec45 4b10 	vmov	d0, r4, r5
 8009208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800920c:	2d00      	cmp	r5, #0
 800920e:	dc10      	bgt.n	8009232 <__ieee754_sqrt+0x62>
 8009210:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009214:	4330      	orrs	r0, r6
 8009216:	d0f5      	beq.n	8009204 <__ieee754_sqrt+0x34>
 8009218:	b15d      	cbz	r5, 8009232 <__ieee754_sqrt+0x62>
 800921a:	ee10 2a10 	vmov	r2, s0
 800921e:	462b      	mov	r3, r5
 8009220:	ee10 0a10 	vmov	r0, s0
 8009224:	f7f7 f830 	bl	8000288 <__aeabi_dsub>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	f7f7 fb0e 	bl	800084c <__aeabi_ddiv>
 8009230:	e7e6      	b.n	8009200 <__ieee754_sqrt+0x30>
 8009232:	1509      	asrs	r1, r1, #20
 8009234:	d076      	beq.n	8009324 <__ieee754_sqrt+0x154>
 8009236:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800923a:	07ce      	lsls	r6, r1, #31
 800923c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009240:	bf5e      	ittt	pl
 8009242:	0fda      	lsrpl	r2, r3, #31
 8009244:	005b      	lslpl	r3, r3, #1
 8009246:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800924a:	0fda      	lsrs	r2, r3, #31
 800924c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009250:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009254:	2000      	movs	r0, #0
 8009256:	106d      	asrs	r5, r5, #1
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	f04f 0e16 	mov.w	lr, #22
 800925e:	4684      	mov	ip, r0
 8009260:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009264:	eb0c 0401 	add.w	r4, ip, r1
 8009268:	4294      	cmp	r4, r2
 800926a:	bfde      	ittt	le
 800926c:	1b12      	suble	r2, r2, r4
 800926e:	eb04 0c01 	addle.w	ip, r4, r1
 8009272:	1840      	addle	r0, r0, r1
 8009274:	0052      	lsls	r2, r2, #1
 8009276:	f1be 0e01 	subs.w	lr, lr, #1
 800927a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800927e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009282:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009286:	d1ed      	bne.n	8009264 <__ieee754_sqrt+0x94>
 8009288:	4671      	mov	r1, lr
 800928a:	2720      	movs	r7, #32
 800928c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009290:	4562      	cmp	r2, ip
 8009292:	eb04 060e 	add.w	r6, r4, lr
 8009296:	dc02      	bgt.n	800929e <__ieee754_sqrt+0xce>
 8009298:	d113      	bne.n	80092c2 <__ieee754_sqrt+0xf2>
 800929a:	429e      	cmp	r6, r3
 800929c:	d811      	bhi.n	80092c2 <__ieee754_sqrt+0xf2>
 800929e:	2e00      	cmp	r6, #0
 80092a0:	eb06 0e04 	add.w	lr, r6, r4
 80092a4:	da43      	bge.n	800932e <__ieee754_sqrt+0x15e>
 80092a6:	f1be 0f00 	cmp.w	lr, #0
 80092aa:	db40      	blt.n	800932e <__ieee754_sqrt+0x15e>
 80092ac:	f10c 0801 	add.w	r8, ip, #1
 80092b0:	eba2 020c 	sub.w	r2, r2, ip
 80092b4:	429e      	cmp	r6, r3
 80092b6:	bf88      	it	hi
 80092b8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80092bc:	1b9b      	subs	r3, r3, r6
 80092be:	4421      	add	r1, r4
 80092c0:	46c4      	mov	ip, r8
 80092c2:	0052      	lsls	r2, r2, #1
 80092c4:	3f01      	subs	r7, #1
 80092c6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80092ca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80092ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80092d2:	d1dd      	bne.n	8009290 <__ieee754_sqrt+0xc0>
 80092d4:	4313      	orrs	r3, r2
 80092d6:	d006      	beq.n	80092e6 <__ieee754_sqrt+0x116>
 80092d8:	1c4c      	adds	r4, r1, #1
 80092da:	bf13      	iteet	ne
 80092dc:	3101      	addne	r1, #1
 80092de:	3001      	addeq	r0, #1
 80092e0:	4639      	moveq	r1, r7
 80092e2:	f021 0101 	bicne.w	r1, r1, #1
 80092e6:	1043      	asrs	r3, r0, #1
 80092e8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80092ec:	0849      	lsrs	r1, r1, #1
 80092ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80092f2:	07c2      	lsls	r2, r0, #31
 80092f4:	bf48      	it	mi
 80092f6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80092fa:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80092fe:	460c      	mov	r4, r1
 8009300:	463d      	mov	r5, r7
 8009302:	e77f      	b.n	8009204 <__ieee754_sqrt+0x34>
 8009304:	0ada      	lsrs	r2, r3, #11
 8009306:	3815      	subs	r0, #21
 8009308:	055b      	lsls	r3, r3, #21
 800930a:	2a00      	cmp	r2, #0
 800930c:	d0fa      	beq.n	8009304 <__ieee754_sqrt+0x134>
 800930e:	02d7      	lsls	r7, r2, #11
 8009310:	d50a      	bpl.n	8009328 <__ieee754_sqrt+0x158>
 8009312:	f1c1 0420 	rsb	r4, r1, #32
 8009316:	fa23 f404 	lsr.w	r4, r3, r4
 800931a:	1e4d      	subs	r5, r1, #1
 800931c:	408b      	lsls	r3, r1
 800931e:	4322      	orrs	r2, r4
 8009320:	1b41      	subs	r1, r0, r5
 8009322:	e788      	b.n	8009236 <__ieee754_sqrt+0x66>
 8009324:	4608      	mov	r0, r1
 8009326:	e7f0      	b.n	800930a <__ieee754_sqrt+0x13a>
 8009328:	0052      	lsls	r2, r2, #1
 800932a:	3101      	adds	r1, #1
 800932c:	e7ef      	b.n	800930e <__ieee754_sqrt+0x13e>
 800932e:	46e0      	mov	r8, ip
 8009330:	e7be      	b.n	80092b0 <__ieee754_sqrt+0xe0>
 8009332:	bf00      	nop
 8009334:	7ff00000 	.word	0x7ff00000

08009338 <_init>:
 8009338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933a:	bf00      	nop
 800933c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933e:	bc08      	pop	{r3}
 8009340:	469e      	mov	lr, r3
 8009342:	4770      	bx	lr

08009344 <_fini>:
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009346:	bf00      	nop
 8009348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934a:	bc08      	pop	{r3}
 800934c:	469e      	mov	lr, r3
 800934e:	4770      	bx	lr
